<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>揭秘mesh网格核心转发流程</title>
      <link href="/2021/08/27/%E6%8F%AD%E7%A7%98mesh%E7%BD%91%E6%A0%BC%E6%A0%B8%E5%BF%83%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/08/27/%E6%8F%AD%E7%A7%98mesh%E7%BD%91%E6%A0%BC%E6%A0%B8%E5%BF%83%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文档修订历史</p><table><thead><tr><th>版本号</th><th>作者</th><th>备注</th><th>修订日期</th></tr></thead><tbody><tr><td>0.1</td><td>诣极</td><td>初始版本</td><td>2021.8.27</td></tr></tbody></table><p>为了帮助同学深入掌握mesh转发核心流程，本文重点对mosn核心转发流程做了详细的梳理。详细流程图请参考图下方图1-1所示。</p><p>首先，mosn作为数据面，整体分为4层 (对应图1-1 从下往上分隔分层), 原始的mosn简介详见<a href="https://github.com/mosn/mosn/blob/0.1.0/docs/design/README.md" target="_blank" rel="noopener">doc</a> ：</p><ul><li>network/io 主要负责网络读写</li><li>protocol 主要负责协议编解码</li><li>stream 主要负责request、response等模型转发和协调</li><li>proxy 主要负责路由等功能。</li></ul><p>接下来，帮助同学清晰的掌握mosn的流程，整个流程简化为12个步骤，我会逐一拆解分析：</p><ol><li>mosn在启动期间，会暴露本地egress端口接收客户端app的rpc请求。mosn会开启2个协程，分别死循环去对tcp进行读取和写处理。mosn会通过读协程获取到请求字节流，进入mosn的协议层处理。</li><li>mosn会通过<a href="https://github.com/mosn/mosn/blob/d1e857f3dc0d4c6dfc8d17189d2300b7e0cfac78/pkg/stream/xprotocol/conn.go#L162" target="_blank" rel="noopener">streamconn</a>实现类中循环解码，直到解析到完整的请求报文。一旦解析到请求报文，会创建和请求frame关联的<a href="https://github.com/mosn/mosn/blob/d1e857f3dc0d4c6dfc8d17189d2300b7e0cfac78/pkg/stream/xprotocol/conn.go#L304" target="_blank" rel="noopener">xstream</a>。这里的xtream用来保持和客户端app的tcp关联，后续用来用于响应response。</li><li>mosn需要将请求转发到服务集群的某一台机器，会到达proxy层创建downstream, 有以下目的：<ul><li>执行filter请求/响应链</li><li>执行路由匹配</li><li>执行负载均衡</li></ul></li><li>在选择服务集群的某一台后，会首先初始化选中ip对应host的连接池，此时mosn的角色变成了中间人的角色。一方面需要承担客户端app的服务端，另一方面需要承担远程服务方的客户端。</li></ol><p><a href="https://github.com/mosn/mosn/blob/18e28b5fb9aa7a634736eb20ac321dc86e915067/pkg/proxy/downstream.go#L866" target="_blank" rel="noopener">upstreamrequest</a> 对象起到关键作用：</p><ul><li>保持着对客户端app的tcp引用，通过持有downstream</li><li>保持着对转发服务端tcp引用，转发客户端app请求以及响应服务端response时的通知<ol start="5"><li>在upstream的<a href="https://github.com/mosn/mosn/blob/18e28b5fb9aa7a634736eb20ac321dc86e915067/pkg/proxy/upstream.go#L177" target="_blank" rel="noopener">appendHeaders</a> + <a href="https://github.com/mosn/mosn/blob/18e28b5fb9aa7a634736eb20ac321dc86e915067/pkg/proxy/downstream.go#L903" target="_blank" rel="noopener">appendData</a>阶段，会用第4步骤中选择的host创建sender xstream, 这个xstream是客户端的流对象，主要有2个目的：</li></ol></li><li>充当client角色，初始化客户端请求信息，将待转发的请求创建对应的stream绑定关系</li><li>在真正转发前，需要替换请求id信息，用来解决连接io复用导致请求互相覆盖的问题<ul><li>混淆原因： 客户端app有多个tcp连接，mosn转发到服务端只有1条cp连接，如果客户端2个tcp连接同时有个id=1的request，mosn会通过同一条tcp转发给服务端，因此响应回来时，mosn没办法区分id=1的response属于哪个客户端app的tcp连接了。这里解决办法，mosn转发到服务端的1条tcp连接，会重新修改请求的id成全局，这个时候就不会混淆请求和响应关联关系了。<ol start="6"><li>因为mosn在转发之前修改了请求id，因此会重新encode请求，一般优化手段不会encode完整报文，只会修改协议头的个别几个字节。</li><li>一旦客户端xstream准备转发就绪(endOfStream)，就会通过第4步骤中选择下游host直接发送，此时请求的携程会被阻塞。</li><li>mosn转发给服务端host时，我们知道会新建tcp连接，与此同时也会每个tcp连接也会有2个携程去处理读写。mosn客户端xstream的会通过读io，收到响应byte字节流，并且交付上层protocol去解码。</li><li>一旦完整解码成response对象，会通知<a href="https://github.com/mosn/mosn/blob/d1e857f3dc0d4c6dfc8d17189d2300b7e0cfac78/pkg/stream/xprotocol/conn.go#L371" target="_blank" rel="noopener">upstream request</a>对象。</li><li>upstream request持有客户端请求的downstream, <a href="https://github.com/mosn/mosn/blob/18e28b5fb9aa7a634736eb20ac321dc86e915067/pkg/proxy/upstream.go#L124" target="_blank" rel="noopener">唤醒</a>downstream阻塞的协程。</li><li>对应步骤2中mosn作为服务方xstream被唤醒，会将收到的响应response, 重新替换回正确的reqest id，并能且去调用协议层重新encode成字节流。</li><li>xstream中持有客户端app请求时的tcp连接，直接将响应写会客户端，并且销毁mosn中所有请求相关的资源。至此，完整的请求响应流程在mosn中的流程介绍完毕。</li></ol></li></ul></li></ul><p><img src="https://zonghaishang.github.io/images/mosn核心流程.png" alt="mosn核心流程.png"><br>图 1-1 mosn核心流程转发</p><p>本文对完整的mosn转发流程做了关键的讲解，比如更多mosn中小功能点，比如buffer、router、connection pool的实现机制，会放到进阶原理篇给大家详细介绍。</p>]]></content>
      
      
      <categories>
          
          <category> service mesh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mosn </tag>
            
            <tag> service mesh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次对mosn中dubbo、hessian-go的性能优化</title>
      <link href="/2020/06/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9mosn%E4%B8%ADdubbo%E3%80%81hessian-go%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2020/06/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9mosn%E4%B8%ADdubbo%E3%80%81hessian-go%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>蚂蚁内部对 service mesh 的稳定性和性能要求是比较高的，内部mosn 广泛用于生产环境。在云上和开源社区，RPC 领域dubbo和spring cloud 同样广泛用于生产环境，我们在 mosn 基础上，支持了 dubbo 和 spring cloud 流量代理。我们发现在支持 dubbo 协议过程中，经过 mesh 流量代理后，性能有非常大的性能损耗，在大商户落地mesh中也对性能有较高要求，因此本文会重点描述在基于 Go 语言库 <a href="https://github.com/apache/dubbo-go-hessian2" target="_blank" rel="noopener">dubbo-go-hessian2</a> 、dubbo协议中对<a href="https://github.com/mosn/mosn" target="_blank" rel="noopener">mosn</a>所做的性能优化。</p><h3 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h3><p>根据实际业务部署场景，并没有选用高性能机器，使用普通linux机器，配置和压测参数如下：</p><ul><li>Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz 4核16G</li><li>pod配置 <code>2c、1g</code>，jvm参数 <code>-server -Xms1024m -Xmx1024m</code></li><li>网络延迟0.23ms, 2台linux机器，分别部署server+mosn, 压测程序<a href="https://github.com/zonghaishang/rpc-performance" target="_blank" rel="noopener">rpc-perfomance</a> </li></ul><p>经过3轮性能优化后，使用优化版本mosn将会获得以下性能收益(框架随机512和1k字节压测)：</p><ul><li>512字节：mosn+dubbo服务调用tps整体提升55-82.8%，rt降低45%左右，内存占用40M</li><li>1k数据：mosn+dubbo服务调用tps整体提升51.1-69.3%，rt降低41%左右,  内存占用41M</li></ul><h3 id="性能优化工具pprof"><a href="#性能优化工具pprof" class="headerlink" title="性能优化工具pprof"></a>性能优化工具pprof</h3><p>磨刀不误砍柴工，在性能优化前首先要找到性能卡点，找到性能卡点后，另一个难点就是如何用高效代码优化替代slow code。因为蚂蚁service mesh是基于go语言实现的，我们首选go自带的pprof性能工具，我们简要介绍这个工具如何使用。如果我们go库自带http.Server时并且在main头部导入<code>import _ &quot;net/http/pprof&quot;</code>，go会帮我们挂载对应的handler, 详细可以参考<a href="https://pkg.go.dev/net/http/pprof?tab=doc" target="_blank" rel="noopener">godoc</a> 。</p><p>因为mosn默认会在<code>34902</code>端口暴露http服务，通过以下命令轻松获取mosn的性能诊断文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go tool pprof -seconds 60 http://benchmark-server-ip:34902/debug/pprof/profile</span><br><span class="line"># 会生成类似以下文件，该命令采样cpu 60秒</span><br><span class="line"># pprof.mosn.samples.cpu.001.pb.gz</span><br></pre></td></tr></table></figure><p>然后继续用pprof打开诊断文件，方便在浏览器查看，在图1-1给出压测后profiler火焰图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># http=:8000代表pprof打开8000端口然后用于web浏览器分析</span><br><span class="line"># mosnd代表mosn的二进制可执行文件，用于分析代码符号</span><br><span class="line"># pprof.mosn.samples.cpu.001.pb.gz是cpu诊断文件</span><br><span class="line">go tool pprof -http=:8000 mosnd pprof.mosn.samples.cpu.001.pb.gz</span><br></pre></td></tr></table></figure><p><img src="/images/1-1.png" alt="mosn性能诊断火焰图"></p><center>图1-1 mosn性能压测火焰图</center><p>在获得诊断数据后，可以切到浏览器Flame Graph(火焰图，go 1.11以上版本自带)，火焰图的x轴坐标代表cpu消耗情况，y轴代码方法调用堆栈。在优化开始之前，我们借助go工具pprof可以诊断出大致的性能卡点在以下几个方面(直接压server端mosn)：</p><ul><li>mosn在接收dubbo请求，cpu卡点在streamConnection.Dispatch</li><li>mosn在转发dubbo请求，cpu卡点在downStream.Receive</li></ul><p>可以点击火焰图任意横条，进去查看长方块耗时和堆栈明细（请参考图1-2和1-3所示）：</p><p><img src="/images/1-2.png" alt="1-2"></p><center>图1-2 Dispatch火焰图明细 </center><p><img src="/images/1-3.png" alt="1-3"></p><center>图1-3 Receive火焰图明细 </center><h3 id="性能优化思路"><a href="#性能优化思路" class="headerlink" title="性能优化思路"></a>性能优化思路</h3><p>本文重点记录优化了哪些case才能提升50%+的吞吐量和降低rt，因此后面直接分析当前优化了哪些case。在此之前，我们以Dispatch为例，看下它为啥那么吃性能 。在terminal中通过以下命令可以查看代码行耗费cpu数据（代码有删减）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> tool pprof mosnd pprof.mosn.samples.cpu<span class="number">.001</span>.pb.gz</span><br><span class="line">(pprof) list Dispatch</span><br><span class="line">Total: <span class="number">1.75</span>mins</span><br><span class="line">     <span class="number">370</span>ms     <span class="number">37.15s</span> (flat, cum) <span class="number">35.46</span>% of Total</span><br><span class="line">      <span class="number">10</span>ms       <span class="number">10</span>ms    <span class="number">123</span>:<span class="function"><span class="keyword">func</span> <span class="params">(conn *streamConnection)</span> <span class="title">Dispatch</span><span class="params">(buffer types.IoBuffer)</span></span> &#123;</span><br><span class="line">      <span class="number">40</span>ms      <span class="number">630</span>ms    <span class="number">125</span>:log.DefaultLogger.Tracef(<span class="string">"stream connection dispatch data string = %v"</span>, buffer.String())</span><br><span class="line">         .          .    <span class="number">126</span>:</span><br><span class="line">         .          .    <span class="number">127</span>:<span class="comment">// get sub protocol codec</span></span><br><span class="line">         .      <span class="number">250</span>ms    <span class="number">128</span>:requestList := conn.codec.SplitFrame(buffer.Bytes())</span><br><span class="line">      <span class="number">20</span>ms       <span class="number">20</span>ms    <span class="number">129</span>:<span class="keyword">for</span> _, request := <span class="keyword">range</span> requestList &#123;</span><br><span class="line">      <span class="number">10</span>ms      <span class="number">160</span>ms    <span class="number">134</span>:headers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">         .          .    <span class="number">135</span>:<span class="comment">// support dynamic route</span></span><br><span class="line">      <span class="number">50</span>ms      <span class="number">920</span>ms    <span class="number">136</span>:headers[strings.ToLower(protocol.MosnHeaderHostKey)] = conn.connection.RemoteAddr().String()</span><br><span class="line">         .          .    <span class="number">149</span>:</span><br><span class="line">         .          .    <span class="number">150</span>:<span class="comment">// get stream id</span></span><br><span class="line">      <span class="number">10</span>ms      <span class="number">440</span>ms    <span class="number">151</span>:streamID := conn.codec.GetStreamID(request)</span><br><span class="line">         .          .    <span class="number">156</span>:<span class="comment">// request route</span></span><br><span class="line">         .       <span class="number">50</span>ms    <span class="number">157</span>:requestRouteCodec, ok := conn.codec.(xprotocol.RequestRouting)</span><br><span class="line">         .          .    <span class="number">158</span>:<span class="keyword">if</span> ok &#123;</span><br><span class="line">         .     <span class="number">20.11s</span>    <span class="number">159</span>:routeHeaders := requestRouteCodec.GetMetas(request)</span><br><span class="line">         .          .    <span class="number">165</span>:&#125;</span><br><span class="line">         .          .    <span class="number">166</span>:</span><br><span class="line">         .          .    <span class="number">167</span>:<span class="comment">// tracing</span></span><br><span class="line">      <span class="number">10</span>ms       <span class="number">80</span>ms    <span class="number">168</span>:tracingCodec, ok := conn.codec.(xprotocol.Tracing)</span><br><span class="line">         .          .    <span class="number">169</span>:<span class="keyword">var</span> span types.Span</span><br><span class="line">         .          .    <span class="number">170</span>:<span class="keyword">if</span> ok &#123;</span><br><span class="line">      <span class="number">10</span>ms      <span class="number">1.91s</span>    <span class="number">171</span>:serviceName := tracingCodec.GetServiceName(request)</span><br><span class="line">         .      <span class="number">2.17s</span>    <span class="number">172</span>:methodName := tracingCodec.GetMethodName(request)</span><br><span class="line">         .          .    <span class="number">176</span>:</span><br><span class="line">         .          .    <span class="number">177</span>:<span class="keyword">if</span> trace.IsEnabled() &#123;</span><br><span class="line">         .       <span class="number">50</span>ms    <span class="number">179</span>:tracer := trace.Tracer(protocol.Xprotocol)</span><br><span class="line">         .          .    <span class="number">180</span>:<span class="keyword">if</span> tracer != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="number">20</span>ms      <span class="number">1.66s</span>    <span class="number">181</span>:span = tracer.Start(conn.context, headers, time.Now())</span><br><span class="line">         .          .    <span class="number">182</span>:&#125;</span><br><span class="line">         .          .    <span class="number">183</span>:&#125;</span><br><span class="line">         .          .    <span class="number">184</span>:&#125;</span><br><span class="line">         .          .    <span class="number">185</span>:</span><br><span class="line">         .      <span class="number">110</span>ms    <span class="number">186</span>:reqBuf := networkbuffer.NewIoBufferBytes(request)</span><br><span class="line">         .          .    <span class="number">188</span>:<span class="comment">// append sub protocol header</span></span><br><span class="line">      <span class="number">10</span>ms      <span class="number">950</span>ms    <span class="number">189</span>:headers[types.HeaderXprotocolSubProtocol] = <span class="keyword">string</span>(conn.subProtocol)</span><br><span class="line">      <span class="number">10</span>ms      <span class="number">4.96s</span>    <span class="number">190</span>:conn.OnReceive(ctx, streamID, protocol.CommonHeader(headers), reqBuf, span, isHearbeat)</span><br><span class="line">      <span class="number">30</span>ms       <span class="number">60</span>ms    <span class="number">191</span>:buffer.Drain(requestLen)</span><br><span class="line">         .          .    <span class="number">192</span>:&#125;</span><br><span class="line">         .          .    <span class="number">193</span>:&#125;</span><br></pre></td></tr></table></figure><p>通过上面 <code>list Dispatch</code> 命令，性能卡点主要分布在 <code>159</code> 、 <code>171</code> 、<code>172</code> 、 <code>181</code> 、和 <code>190</code> 等行，主要卡点在解码dubbo参数、重复解参数、tracer、发序列化和log等。</p><h4 id="1-优化dubbo解码GetMetas"><a href="#1-优化dubbo解码GetMetas" class="headerlink" title="1. 优化dubbo解码GetMetas"></a>1. 优化dubbo解码GetMetas</h4><p>我们通过解码dubbo的body可以获得以下信息，调用的目标接口(interface)和调用方法的服务分组(group)等信息，但是需要跳过所有业务方法参数，目前使用开源的hessian-go库，解析string和map性能较差, 提升hessian库解码性能，会在本文后面讲解。</p><p><strong>优化思路：</strong></p><p>在mosn的ingress端(mosn直接转发请求给本地java server进程), 我们根据请求的path和version去窥探用户使用的interface和group, 构建正确的dataId可以进行无脑转发，无需解码body，榨取性能提升。</p><p>我们可以在服务注册时，构建服务发布的path、version和group到interface、group映射。在mosn转发dubbo请求时可以通过读锁查cache+跳过解码body，加速mosn性能。</p><p>因此我们构建以下cache实现(数组+链表数据结构), 可参见<a href="https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-f5ff30debd68b8318c8236a0b5ccde07R6" target="_blank" rel="noopener">优化代码diff</a> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// metadata.go</span></span><br><span class="line"><span class="comment">// DubboPubMetadata dubbo pub cache metadata</span></span><br><span class="line"><span class="keyword">var</span> DubboPubMetadata = &amp;Metadata&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DubboSubMetadata dubbo sub cache metadata</span></span><br><span class="line"><span class="keyword">var</span> DubboSubMetadata = &amp;Metadata&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Metadata cache service pub or sub metadata.</span></span><br><span class="line"><span class="comment">// speed up for decode or encode dubbo peformance.</span></span><br><span class="line"><span class="comment">// please do not use outside of the dubbo framwork.</span></span><br><span class="line"><span class="keyword">type</span> Metadata <span class="keyword">struct</span> &#123;</span><br><span class="line">data <span class="keyword">map</span>[<span class="keyword">string</span>]*Node</span><br><span class="line">mu   sync.RWMutex <span class="comment">// protect data internal</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find cached pub or sub metatada.</span></span><br><span class="line"><span class="comment">// caller should be check match is true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Metadata)</span> <span class="title">Find</span><span class="params">(path, version <span class="keyword">string</span>)</span> <span class="params">(node *Node, matched <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// we found nothing</span></span><br><span class="line"><span class="keyword">if</span> m.data == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.mu.RLocker().Lock()</span><br><span class="line"><span class="comment">// for performance</span></span><br><span class="line"><span class="comment">// m.mu.RLocker().Unlock() should be called.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// we check head node first</span></span><br><span class="line">head := m.data[path]</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.count &lt;= <span class="number">0</span> &#123;</span><br><span class="line">m.mu.RLocker().Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node = head.Next</span><br><span class="line"><span class="comment">// just only once, just return</span></span><br><span class="line"><span class="comment">// for dubbo framwork, that's what we're expected.</span></span><br><span class="line"><span class="keyword">if</span> head.count == <span class="number">1</span> &#123;</span><br><span class="line">m.mu.RLocker().Unlock()</span><br><span class="line"><span class="keyword">return</span> node, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> found *Node</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ; node != <span class="literal">nil</span>; node = node.Next &#123;</span><br><span class="line"><span class="keyword">if</span> node.Version == version &#123;</span><br><span class="line"><span class="keyword">if</span> found == <span class="literal">nil</span> &#123;</span><br><span class="line">found = node</span><br><span class="line">&#125;</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.mu.RLocker().Unlock()</span><br><span class="line"><span class="keyword">return</span> found, count == <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register pub or sub metadata</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Metadata)</span> <span class="title">Register</span><span class="params">(path <span class="keyword">string</span>, node *Node)</span></span> &#123;</span><br><span class="line">m.mu.Lock()</span><br><span class="line"><span class="comment">// for performance</span></span><br><span class="line"><span class="comment">// m.mu.Unlock() should be called.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m.data == <span class="literal">nil</span> &#123;</span><br><span class="line">m.data = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Node, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we check head node first</span></span><br><span class="line">head := m.data[path]</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">head = &amp;Node&#123;</span><br><span class="line">count: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// update head</span></span><br><span class="line">m.data[path] = head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert := &amp;Node&#123;</span><br><span class="line">Service: node.Service,</span><br><span class="line">Version: node.Version,</span><br><span class="line">Group:   node.Group,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next := head.Next</span><br><span class="line"><span class="keyword">if</span> next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// fist insert, just insert to head</span></span><br><span class="line">head.Next = insert</span><br><span class="line"><span class="comment">// record last element</span></span><br><span class="line">head.last = insert</span><br><span class="line">m.mu.Unlock()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we check already exist first</span></span><br><span class="line"><span class="keyword">for</span> ; next != <span class="literal">nil</span>; next = next.Next &#123;</span><br><span class="line"><span class="comment">// we found it</span></span><br><span class="line"><span class="keyword">if</span> next.Version == node.Version &amp;&amp; next.Group == node.Group &#123;</span><br><span class="line"><span class="comment">// release lock and no nothing</span></span><br><span class="line">m.mu.Unlock()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">head.count++</span><br><span class="line"><span class="comment">// append node to the end of the list</span></span><br><span class="line">head.last.Next = insert</span><br><span class="line"><span class="comment">// update last element</span></span><br><span class="line">head.last = insert</span><br><span class="line">m.mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过服务注册时构建好的cache，可以在mosn的stream做解码时命中cache, 无需解码参数获取接口和group信息，可参见<a href="https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-73d1153005841c788c91116915f460a5R188" target="_blank" rel="noopener">优化代码diff</a> :</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// decoder.go</span></span><br><span class="line"><span class="comment">// for better performance.</span></span><br><span class="line"><span class="comment">// If the ingress scenario is not using group,</span></span><br><span class="line"><span class="comment">// we can skip parsing attachment to improve performance</span></span><br><span class="line"><span class="keyword">if</span> listener == IngressDubbo &#123;</span><br><span class="line"><span class="keyword">if</span> node, matched = DubboPubMetadata.Find(path, version); matched &#123;</span><br><span class="line">meta[ServiceNameHeader] = node.Service</span><br><span class="line">meta[GroupNameHeader] = node.Group</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> listener == EgressDubbo &#123;</span><br><span class="line"><span class="comment">// for better performance.</span></span><br><span class="line"><span class="comment">// If the egress scenario is not using group,</span></span><br><span class="line"><span class="comment">// we can skip parsing attachment to improve performance</span></span><br><span class="line"><span class="keyword">if</span> node, matched = DubboSubMetadata.Find(path, version); matched &#123;</span><br><span class="line">meta[ServiceNameHeader] = node.Service</span><br><span class="line">meta[GroupNameHeader] = node.Group</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mosn的egress端(mosn直接转发请求给本地java client进程),  我们采用类似的思路, 我们根据请求的path和version去窥探用户使用的interface和group, 构建正确的dataId可以进行无脑转发，无需解码body，榨取性能提升。</p><h4 id="2-优化dubbo解码参数"><a href="#2-优化dubbo解码参数" class="headerlink" title="2. 优化dubbo解码参数"></a>2. 优化dubbo解码参数</h4><p>在dubbo解码参数值的时候 ，mosn采用的是hessian的正则表达式查找，非常耗费性能。我们先看下优化前后benchmark对比, 性能提升50倍!!! </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test -bench=BenchmarkCountArgCount -run=^$ -benchmem</span><br><span class="line">BenchmarkCountArgCountByRegex<span class="number">-12</span><span class="number">200000</span><span class="number">6236</span> ns/op<span class="number">1472</span> B/op<span class="number">24</span> allocs/op</span><br><span class="line">BenchmarkCountArgCountOptimized<span class="number">-12</span><span class="number">10000000</span><span class="number">124</span> ns/op<span class="number">0</span> B/op<span class="number">0</span> allocs/op</span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><p>可以消除正则表达式，采用简单字符串解析识别参数类型个数， <a href="https://github.com/zonghaishang/dubbo/blob/e0fd702825a274379fb609229bdb06ca0586122e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java#L370" target="_blank" rel="noopener">dubbo编码参数个数字符串实现</a> 并不复杂, 主要给对象加L前缀、数组加[、primitive类型有单字符代替。采用go可以实现同等解析, 可以参考<a href="https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-73d1153005841c788c91116915f460a5R245" target="_blank" rel="noopener">优化代码diff</a> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArgumentCount</span><span class="params">(desc <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(desc)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> args, next = <span class="number">0</span>, <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> _, ch := <span class="keyword">range</span> desc &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// is array ?</span></span><br><span class="line"><span class="keyword">if</span> ch == <span class="string">'['</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// is object ?</span></span><br><span class="line"><span class="keyword">if</span> next &amp;&amp; ch != <span class="string">';'</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ch &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'V'</span>, <span class="comment">// void</span></span><br><span class="line"><span class="string">'Z'</span>, <span class="comment">// boolean</span></span><br><span class="line"><span class="string">'B'</span>, <span class="comment">// byte</span></span><br><span class="line"><span class="string">'C'</span>, <span class="comment">// char</span></span><br><span class="line"><span class="string">'D'</span>, <span class="comment">// double</span></span><br><span class="line"><span class="string">'F'</span>, <span class="comment">// float</span></span><br><span class="line"><span class="string">'I'</span>, <span class="comment">// int</span></span><br><span class="line"><span class="string">'J'</span>, <span class="comment">// long</span></span><br><span class="line"><span class="string">'S'</span>: <span class="comment">// short</span></span><br><span class="line">args++</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// we found object</span></span><br><span class="line"><span class="keyword">if</span> ch == <span class="string">'L'</span> &#123;</span><br><span class="line">args++</span><br><span class="line">next = <span class="literal">true</span></span><br><span class="line"><span class="comment">// end of object ?</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ch == <span class="string">';'</span> &#123;</span><br><span class="line">next = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-优化hessian-go解码string性能"><a href="#3-优化hessian-go解码string性能" class="headerlink" title="3. 优化hessian go解码string性能"></a>3. 优化hessian go解码string性能</h4><p>在图1-2中可以看到hessian go在解码string占比cpu采样较高，我们在解码dubbo请求时，会解析dubbo框架版本、调用path、接口版本和方法名，这些都是string类型，hessian go解析string会影响rpc性能。</p><p>我们首先跑一下benchmark前后解码string性能对比，性能提升56.11%!!!  对应到rpc中有5%左右提升。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkDecodeStringOriginal-12     1967202     613 ns/op     272 B/op     6 allocs/op</span><br><span class="line">BenchmarkDecodeStringOptimized-12     4477216     269 ns/op     224 B/op     5 allocs/op</span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><p>直接使用utf-8 byte解码，性能最高，之前先解码byte成rune, 对rune解码成string，及其耗费性能。增加批量string chunk copy, 降低read调用，并且使用unsafe转换string(避免一些校验)，因为代码优化diff较多，这里给出<a href="https://github.com/apache/dubbo-go-hessian2/pull/188" target="_blank" rel="noopener">优化代码pr</a> 。</p><p>go sdk代码<code>runtime/string.go#slicerunetostring</code>(rune转换成string)， 同样是把rune转成byte数组，这里给了我优化思路启发。</p><h4 id="4-优化hessian库编解码对象"><a href="#4-优化hessian库编解码对象" class="headerlink" title="4. 优化hessian库编解码对象"></a>4. 优化hessian库编解码对象</h4><p>虽然消除了dubbo的body解码部分，但是mosn在处理dubbo请求时，必须要借助hessian去decode请求头部的框架版本、请求path和接口版本值。但是每次在解码的时候都会创建序列化对象，开销非常高，因为hessian每次在创建reader的时候会allocate 4k数据并reset。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      10ms       10ms     75:func unSerialize(serializeId int, data []byte, parseCtl unserializeCtl) *dubboAttr &#123;</span><br><span class="line">      10ms      140ms     82:attr := &amp;dubboAttr&#123;&#125;</span><br><span class="line">      80ms      2.56s     83:decoder := hessian.NewDecoderWithSkip(data[:])</span><br><span class="line">ROUTINE ======================== bufio.NewReaderSize in /usr/local/go/src/bufio/bufio.go</span><br><span class="line">      50ms      2.44s (flat, cum)  2.33% of Total</span><br><span class="line">         .      220ms     55:r := new(Reader)</span><br><span class="line">      50ms      2.22s     56:r.reset(make([]byte, size), rd)</span><br><span class="line">         .          .     57:return r</span><br><span class="line">         .          .     58:&#125;</span><br></pre></td></tr></table></figure><p>我们可以写个池化内存前后性能对比, 性能提升85.4%!!! , <a href="https://github.com/zonghaishang/dubbo-go-hessian2/blob/9b418c4e2700964f244e6b982855b4e89b45990d/string_test.go#L161" target="_blank" rel="noopener">benchmark用例</a> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkNewDecoder<span class="number">-12</span><span class="number">1487685</span><span class="number">803</span> ns/op<span class="number">4528</span> B/op<span class="number">9</span> allocs/op</span><br><span class="line">BenchmarkNewDecoderOptimized<span class="number">-12</span><span class="number">10564024</span><span class="number">117</span> ns/op<span class="number">128</span> B/op<span class="number">3</span> allocs/op</span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><p>在每次编解码时，池化hessian的decoder对象，新增NewCheapDecoderWithSkip并支持reset复用decoder。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var decodePool = &amp;sync.Pool&#123;</span><br><span class="line">    New: func() interface&#123;&#125; &#123;</span><br><span class="line">        return hessian.NewCheapDecoderWithSkip([]byte&#123;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在解码时按照如下方法调用</span><br><span class="line">decoder := decodePool.Get().(*hessian.Decoder)</span><br><span class="line">// fill decode data</span><br><span class="line">decoder.Reset(data[:])</span><br><span class="line">hessianPool.Put(decoder)</span><br></pre></td></tr></table></figure><h4 id="5-优化重复解码service和methodName值"><a href="#5-优化重复解码service和methodName值" class="headerlink" title="5. 优化重复解码service和methodName值"></a>5. 优化重复解码service和methodName值</h4><p>xprotocol在实现xprotocol.Tracing获取服务名称和方法时，会触发调用并解析2次，调用开销比较大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10ms      1.91s    171:serviceName := tracingCodec.GetServiceName(request)</span><br><span class="line">   .      2.17s    172:methodName := tracingCodec.GetMethodName(request)</span><br></pre></td></tr></table></figure><p><strong>优化思路：</strong></p><p>因为在GetMetas里面已经解析过一次了，可以把解析过的headers传进去，如果headers有了就不用再去解析了，并且重构接口名称为一个，返回值为二元组，消除一次调用。</p><h4 id="6-优化streamId类型转换"><a href="#6-优化streamId类型转换" class="headerlink" title="6. 优化streamId类型转换"></a>6. 优化streamId类型转换</h4><p>在go中将byte数组和streamId进行互转的时候，比较费性能。</p><p><strong>优化思路：</strong></p><p>生产代码中, 尽量不要使用fmt.Sprintf和fmt.Printf去做类型转换和打印信息。可以使用strconv去转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   .      430ms    147: reqIDStr := fmt.Sprintf(&quot;%d&quot;, reqID)</span><br><span class="line">60ms      4.10s    168: fmt.Printf(&quot;src=%s, len=%d, reqid:%v\n&quot;, streamID, reqIDStrLen, reqIDStr)</span><br></pre></td></tr></table></figure><h4 id="7-优化昂贵的系统调用"><a href="#7-优化昂贵的系统调用" class="headerlink" title="7. 优化昂贵的系统调用"></a>7. 优化昂贵的系统调用</h4><p>mosn在解码dubbo的请求时，会在header中塞一份远程host的地址，并且在for循环中获取remoteIp，系统调用开销比较高。</p><p><strong>优化思路：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50ms      920ms    136:headers[strings.ToLower(protocol.MosnHeaderHostKey)] = conn.connection.RemoteAddr().String()</span><br></pre></td></tr></table></figure><p>在获取远程地址时，尽可能在streamConnection中cache远程ip值，不要每次都去调用RemoteAddr。</p><h4 id="8-优化slice和map触发扩容和rehash"><a href="#8-优化slice和map触发扩容和rehash" class="headerlink" title="8. 优化slice和map触发扩容和rehash"></a>8. 优化slice和map触发扩容和rehash</h4><p>在mosn处理dubbo请求时，会根据接口、版本和分组去构建dataId，然后匹配cluster, 会创建默认slice和map对象，经过性能诊断，导致不断allocate slice和grow map容量比较费性能。</p><p><strong>优化思路：</strong></p><p>使用slice和map时，尽可能预估容量大小，使用make(type, capacity)去指定初始大小。</p><h4 id="9-优化trace日志级别输出"><a href="#9-优化trace日志级别输出" class="headerlink" title="9. 优化trace日志级别输出"></a>9. 优化trace日志级别输出</h4><p>mosn中不少代码在处理逻辑时，会打很多trace级别的日志，并且会传递不少参数值。</p><p><strong>优化思路：</strong></p><p>调用trace输出前，尽量判断一下日志级别，如果有多个trace调用，尽可能把所有字符串写到buf中，然后把buf内容写到日志中，并且尽可能少的调用trace日志方法。</p><h4 id="10-优化tracer、log和metrics"><a href="#10-优化tracer、log和metrics" class="headerlink" title="10. 优化tracer、log和metrics"></a>10. 优化tracer、log和metrics</h4><p>在大促期间，对机器的性能要求较高，经过性能诊断，tracer、mosn log和cloud metrics写日志(io操作)非常耗费性能。</p><p><strong>优化思路：</strong></p><p>通过配置中心下发配置或者增加大促开关，允许api调用这些feature的开关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/api/v1/downgrade/on</span><br><span class="line">/api/v1/downgrade/off</span><br></pre></td></tr></table></figure><h4 id="11-优化route-header解析"><a href="#11-优化route-header解析" class="headerlink" title="11. 优化route header解析"></a>11. 优化route header解析</h4><p>mosn中在做路由前，需要做大量的header的map访问，比如ldc、antvip等逻辑判断，商业版或者开源mosn不需要这些逻辑，这些也会占用一些开销。</p><p><strong>优化思路：</strong></p><p>如果是云上逻辑，主站的逻辑都不走。</p><h4 id="12-优化featuregate调用"><a href="#12-优化featuregate调用" class="headerlink" title="12.  优化featuregate调用"></a>12.  优化featuregate调用</h4><p>在mosn中处理请求时，为了区分主站和商业版路由逻辑，会通过featuregate判断逻辑走哪部分。通过featuregate调用开销较大，需要频繁的做类型转换和多层map去获取。</p><p><strong>优化思路：</strong></p><p>通过一个bool变量记录featuregate对应开关，如果没有初始化过，就主动调用一下featuregate。</p><h3 id="未来性能优化思考"><a href="#未来性能优化思考" class="headerlink" title="未来性能优化思考"></a>未来性能优化思考</h3><p>经过几轮性能优化 ，目前看火焰图，卡点都在connection的read和write，可以优化的空间比较小了。但是可能从以下场景中获得收益：</p><ul><li>减少connection的read和write次数(syscall)</li><li>优化io线程模型，减少携程和上下文切换等</li></ul><p>作为结束，给出了最终优化后的火焰图 ，大部分卡点都在系统调用和网络读写,  请参考图1-4。</p><p><img src="/images/1-4.png" alt="mosn优化后火焰图"></p><center>图1-4 优化版本mosn+dubbo火线图</center><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>花名诣极，开源Apache Dubbo PMC。目前就职于蚂蚁金服中间件团队，主攻rpc和Service mesh方向。 ‘’深入理解Apache Dubbo与实战’’图书作者。github: <a href="https://github.com/zonghaishang" target="_blank" rel="noopener">https://github.com/zonghaishang</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>pprof工具异常强大，可以诊断cpu、memory、go协程、tracer和死锁等，该工具可以参考<a href="https://blog.golang.org/pprof" target="_blank" rel="noopener">godoc</a>，性能优化参考：</p><ul><li><p><a href="https://blog.golang.org/pprof" target="_blank" rel="noopener">https://blog.golang.org/pprof</a></p></li><li><p><a href="https://www.cnblogs.com/Dr-wei/p/11742414.html" target="_blank" rel="noopener">https://www.cnblogs.com/Dr-wei/p/11742414.html</a></p></li><li><p><a href="https://www.youtube.com/watch?v=N3PWzBeLX2M" target="_blank" rel="noopener">https://www.youtube.com/watch?v=N3PWzBeLX2M</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> mosn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mosn </tag>
            
            <tag> go </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu18.0.4.1编译openjdk8</title>
      <link href="/2018/10/26/Ubuntu18.0.4.1%E7%BC%96%E8%AF%91openjdk8/"/>
      <url>/2018/10/26/Ubuntu18.0.4.1%E7%BC%96%E8%AF%91openjdk8/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu18-0-4-1-编译openjdk-8"><a href="#Ubuntu18-0-4-1-编译openjdk-8" class="headerlink" title="Ubuntu18.0.4.1 编译openjdk 8"></a>Ubuntu18.0.4.1 编译openjdk 8</h2><p>之前写过在<code>mac os</code>中编译<code>openjdk 8</code>,但是因为使用不是官网的代码，编译过中遇到错误也会修改源代码，可能会导致jvm莫名其妙的crash非常痛苦。实践证明，要研究jvm最好还是在linux中编译和实践。</p><p>这里要非常感谢<code>Debian</code>系统开发者(<code>John Paul Adrian Glaubitz</code>)提供的帮助。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这次安装采用最新的Ubuntu18.0.4.1LTS版本，直接百度下载对应的操作系统，然后在虚拟机安装即可，我采用的是<code>VMware Fusion</code>作为虚拟机，比<code>Virtualbox</code>稳定一些。</p><p>在上面虚拟机安装完成的基础上，先更新国内源(用于加速ubuntu软件下载速度)。</p><p>在替换操作系统默认源前，建议先备份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mv  /etc/apt/sources.list  /etc/apt/sources.list.bak</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 如果没有安装vim, 执行`sudo apt-get install vim`</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在新创建的文件<code>sources.list</code>加入下面地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 中科大</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 阿里</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>最后在终端执行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>根据<code>Debian</code>系统开发者(<code>John Paul Adrian Glaubitz</code>)的建议，使用如下命令安装jdk环境所有依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt build-dep openjdk-8</span><br></pre></td></tr></table></figure><p>这个会自动下载需要的依赖，也会安装openjdk。</p><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>这次采用官方源码安装，官网地址：<code>http://openjdk.java.net/projects/jdk8u/</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hg clone http://hg.openjdk.java.net/jdk8u/jdk8u</span><br><span class="line">cd jdk8u</span><br><span class="line">bash get_source.sh</span><br></pre></td></tr></table></figure><p>可以反复执行<code>bash get_source.sh</code>知道下载所有子模块的源代码。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>boot 启动jdk</li></ul><p>我在线尝试各种安装openjdk7作为引导都失败，所以执行手动安装，可以下载这里面的附件：</p><ul><li><a href="https://zonghaishang.github.io/attachments/openjdk-7-jdk_7u161-2.6.12-1_amd64.deb">openjdk-7-jdk_7u161-2.6.12-1_amd64.deb</a></li><li><a href="https://zonghaishang.github.io/attachments/openjdk-7-jre_7u161-2.6.12-1_amd64.deb">openjdk-7-jre_7u161-2.6.12-1_amd64.deb</a></li><li><a href="https://zonghaishang.github.io/attachments/openjdk-7-jre-headless_7u161-2.6.12-1_amd64.deb">openjdk-7-jre-headless_7u161-2.6.12-1_amd64.deb</a></li><li><a href="https://zonghaishang.github.io/attachments/libjpeg62-turbo_1.5.2-2+b1_amd64.deb">libjpeg62-turbo_1.5.2-2+b1_amd64.deb</a></li></ul><p>上面4个文件下载后，在包含这个目录下面执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i openjdk-7-* libjpeg62-turbo*</span><br></pre></td></tr></table></figure><p>如果报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Errors were encountered while processing:</span><br><span class="line">openjdk-7-jre:amd64</span><br><span class="line">openjdk-7-jre-headless:amd64</span><br><span class="line">openjdk-7-jdk:amd64</span><br></pre></td></tr></table></figure><p>再执行下面命令安装缺少的依赖即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -f</span><br></pre></td></tr></table></figure><p>这个时候可以切换到jdk7的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-java-alternatives -s java-1.7.0-openjdk-amd64</span><br></pre></td></tr></table></figure><p>我手动安装openjdk7的执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yiji@ubuntu:~$ java -version</span><br><span class="line">java version &quot;1.7.0_161&quot;</span><br><span class="line">OpenJDK Runtime Environment (IcedTea 2.6.12) (7u161-2.6.12-1)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 24.161-b01, mixed mode)</span><br></pre></td></tr></table></figure><p>ubuntu中可以使用如下指令快速切换不同版本的jdk:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> yiji@ubuntu:~$ sudo update-alternatives --config java</span><br><span class="line">[sudo] password for yiji: </span><br><span class="line">There are 3 choices for the alternative java (providing /usr/bin/java).</span><br><span class="line"></span><br><span class="line">  Selection    Path                                            Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1101      auto mode</span><br><span class="line">  1            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      1101      manual mode</span><br><span class="line">* 2            /usr/lib/jvm/java-7-openjdk-amd64/jre/bin/java   1071      manual mode</span><br><span class="line">  3            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   1081      manual mode</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number:</span><br></pre></td></tr></table></figure><ul><li>设置环境变量</li></ul><p>在<code>~/.bashrc</code>文件最后一行添加<code>export LANG=C</code>， 然后执行<code>source ~/.bashrc</code>生效。</p><h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>因为在linux环境中编译，唯一改动的文件（<code>~/jdk8u/hotsport/make/linux/makefiles/gcc.make</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Compiler warnings are treated as errors</span><br><span class="line"># WARNINGS_ARE_ERRORS = -Werror</span><br></pre></td></tr></table></figure><p>注释了这个脚本，主要处理忽略警告，否则警告会当做错误处理导致无法编译。</p><p>注意，我代码迁出在自己的<code>home</code>目录, 改动文件要进入自己clone代码的位置。</p><h3 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h3><p>为了方便调试jvm，我开启了<code>--enable-debug</code>会生成<code>fastdebug</code>版本的jdk:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAKE_VERBOSE=y QUIETLY= LOG=debug sh ./configure --enable-debug --with-jvm-variants=server --with-boot-jdk=/usr/lib/jvm/java-7-openjdk-amd64/ --disable-precompiled-headers --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu</span><br></pre></td></tr></table></figure><p> 执行命令后我电脑输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">====================================================</span><br><span class="line">A new configuration has been successfully created in</span><br><span class="line">/home/yiji/jdk8u/build/linux-x86_64-normal-server-fastdebug</span><br><span class="line">using configure arguments &apos;--enable-debug --with-jvm-variants=server --with-boot-jdk=/usr/lib/jvm/java-7-openjdk-amd64/ --disable-precompiled-headers --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu&apos;.</span><br><span class="line"></span><br><span class="line">Configuration summary:</span><br><span class="line">* Debug level:    fastdebug</span><br><span class="line">* JDK variant:    normal</span><br><span class="line">* JVM variants:   server</span><br><span class="line">* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span><br><span class="line"></span><br><span class="line">Tools summary:</span><br><span class="line">* Boot JDK:       java version &quot;1.7.0_161&quot; OpenJDK Runtime Environment (IcedTea 2.6.12) (7u161-2.6.12-1) OpenJDK 64-Bit Server VM (build 24.161-b01, mixed mode)  (at /usr/lib/jvm/java-7-openjdk-amd64)</span><br><span class="line">* Toolchain:      gcc (GNU Compiler Collection)</span><br><span class="line">* C Compiler:     Version 7.3.0 (at /usr/bin/gcc)</span><br><span class="line">* C++ Compiler:   Version 7.3.0 (at /usr/bin/g++)</span><br><span class="line"></span><br><span class="line">Build performance summary:</span><br><span class="line">* Cores to use:   3</span><br><span class="line">* Memory limit:   3921 MB</span><br><span class="line"></span><br><span class="line">WARNING: The result of this configuration has overridden an older</span><br><span class="line">configuration. You *should* run &apos;make clean&apos; to make sure you get a</span><br><span class="line">proper build. Failure to do so might result in strange build problems.</span><br></pre></td></tr></table></figure><h3 id="生成jdk8"><a href="#生成jdk8" class="headerlink" title="生成jdk8"></a>生成jdk8</h3><p>执行下面命令进行构建jdk:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make JOBS=8 MAKE_VERBOSE=y QUIETLY= LOG=debug all</span><br></pre></td></tr></table></figure><p>生成openjdk8成功会输出耗时信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## Finished docs (build time 00:02:17)</span><br><span class="line"></span><br><span class="line">----- Build times -------</span><br><span class="line">Start 2018-10-26 13:36:24</span><br><span class="line">End   2018-10-26 13:51:32</span><br><span class="line">00:00:24 corba</span><br><span class="line">00:00:19 demos</span><br><span class="line">00:02:17 docs</span><br><span class="line">00:07:56 hotspot</span><br><span class="line">00:00:23 images</span><br><span class="line">00:00:14 jaxp</span><br><span class="line">00:00:20 jaxws</span><br><span class="line">00:02:32 jdk</span><br><span class="line">00:00:29 langtools</span><br><span class="line">00:00:14 nashorn</span><br><span class="line">00:15:08 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK for target &apos;all&apos;</span><br></pre></td></tr></table></figure><h2 id="使用openjdk8"><a href="#使用openjdk8" class="headerlink" title="使用openjdk8"></a>使用openjdk8</h2><ol><li>生成的jdk Home 在源码目录build ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/jdk8u/build/linux-x86_64-normal-server-fastdebug/images/j2sdk-image</span><br></pre></td></tr></table></figure><p>直接在intellij idea 或者 eclipse 中指定上面的Home即可。</p><ol start="2"><li>验证jdk版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yiji@ubuntu:~/jdk8u/build/linux-x86_64-normal-server-fastdebug/jdk/bin$ ./java -version</span><br><span class="line">openjdk version &quot;1.8.0-internal-fastdebug&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0-internal-fastdebug-yiji_2018_10_26_13_36-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.71-b00-fastdebug, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="为什么要编译JDK源码"><a href="#为什么要编译JDK源码" class="headerlink" title="为什么要编译JDK源码"></a>为什么要编译JDK源码</h3><ol><li><p>已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码</p></li><li><p>深入jvm细节，自己动手编译为深入学习打基础</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://openjdk.java.net/projects/jdk8u/" target="_blank" rel="noopener">http://openjdk.java.net/projects/jdk8u/</a></li><li><a href="https://askubuntu.com/questions/761127/how-do-i-install-openjdk-7-on-ubuntu-16-04-or-higher" target="_blank" rel="noopener">https://askubuntu.com/questions/761127/how-do-i-install-openjdk-7-on-ubuntu-16-04-or-higher</a></li><li><a href="https://bugs.openjdk.java.net/browse/JDK-8144695" target="_blank" rel="noopener">https://bugs.openjdk.java.net/browse/JDK-8144695</a></li><li><a href="https://marcin-chwedczuk.github.io/debugging-openjdk8-with-netbeans-on-ubuntu" target="_blank" rel="noopener">https://marcin-chwedczuk.github.io/debugging-openjdk8-with-netbeans-on-ubuntu</a></li><li><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/tip/README-builds.html#linux" target="_blank" rel="noopener">http://hg.openjdk.java.net/jdk8u/jdk8u/raw-file/tip/README-builds.html#linux</a></li><li><a href="https://blog.csdn.net/xiangxianghehe/article/details/80112149" target="_blank" rel="noopener">https://blog.csdn.net/xiangxianghehe/article/details/80112149</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> openjdk </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解arthas原理</title>
      <link href="/2018/10/26/%E7%90%86%E8%A7%A3arthas%E5%8E%9F%E7%90%86/"/>
      <url>/2018/10/26/%E7%90%86%E8%A7%A3arthas%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本章不会讲解arthas全部细节，会围绕arthas功能介绍和核心原理进行展开。</p><p>通过本章的分析，主要涵盖以下几个内容：</p><ul><li>arthas功能介绍</li><li>动手调试arthas</li><li>arthas原理解析</li></ul><p><code>arthas</code>属于线上问题诊断工具，主要解决如下几个场景问题：</p><ul><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到JVM的实时运行状态？</li></ul><p>说明: <code>arthas</code>功能介绍参考自开源官网，关键原理点是自己挖代码分析，不当之处欢迎拍砖。</p><h3 id="arthas常用命令"><a href="#arthas常用命令" class="headerlink" title="arthas常用命令"></a>arthas常用命令</h3><h4 id="watch实时监控"><a href="#watch实时监控" class="headerlink" title="watch实时监控"></a>watch实时监控</h4><p>观察方法 test.arthas.TestWatch#doGet 执行的入参，仅当方法抛出异常时才输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> watch test.arthas.TestWatch doGet &#123;params[0], throwExp&#125; -e</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 65 ms.</span><br><span class="line">ts=2018-09-18 10:26:28;result=@ArrayList[</span><br><span class="line">    @RequestFacade[org.apache.catalina.connector.RequestFacade@79f922b2],</span><br><span class="line">    @NullPointerException[java.lang.NullPointerException],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="trace跟踪方法调用耗时"><a href="#trace跟踪方法调用耗时" class="headerlink" title="trace跟踪方法调用耗时"></a>trace跟踪方法调用耗时</h3><p>观察方法执行的时哪个方法调用比较慢:</p><p><img src="https://zonghaishang.github.io/images/trace.png" class="pretty"></p><h3 id="stack跟踪方法调用堆栈"><a href="#stack跟踪方法调用堆栈" class="headerlink" title="stack跟踪方法调用堆栈"></a>stack跟踪方法调用堆栈</h3><p>查看方法 test.arthas.TestStack#doGet 的调用堆栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ stack test.arthas.TestStack doGet</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 286 ms.</span><br><span class="line">ts=<span class="number">2018</span>-<span class="number">09</span>-<span class="number">18</span> <span class="number">10</span>:<span class="number">11</span>:<span class="number">45</span>;thread_name=http-bio-<span class="number">8080</span>-exec-<span class="number">10</span>;id=d9;is_daemon=<span class="keyword">true</span>;priority=<span class="number">5</span>;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@<span class="number">25131501</span></span><br><span class="line">    <span class="meta">@test</span>.arthas.TestStack.doGet()</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">624</span>)</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">731</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">303</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">208</span>)</span><br><span class="line">        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">52</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">241</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">208</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">241</span>)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">208</span>)</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">220</span>)</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">110</span>)</span><br><span class="line">        ...</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">169</span>)</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">103</span>)</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">116</span>)</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">451</span>)</span><br><span class="line">        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:<span class="number">1121</span>)</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:<span class="number">637</span>)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:<span class="number">316</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br></pre></td></tr></table></figure><h3 id="sc查看类加载信息"><a href="#sc查看类加载信息" class="headerlink" title="sc查看类加载信息"></a>sc查看类加载信息</h3><p>查找JVM中已经加载的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ sc -d org.springframework.web.context.support.XmlWebApplicationContext</span><br><span class="line"> <span class="class"><span class="keyword">class</span>-<span class="title">info</span>        <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">XmlWebApplicationContext</span></span></span><br><span class="line"><span class="class"> <span class="title">code</span>-<span class="title">source</span>       /<span class="title">Users</span>/<span class="title">xxx</span>/<span class="title">work</span>/<span class="title">test</span>/<span class="title">WEB</span>-<span class="title">INF</span>/<span class="title">lib</span>/<span class="title">spring</span>-<span class="title">web</span>-3.2.11.<span class="title">RELEASE</span>.<span class="title">jar</span></span></span><br><span class="line"><span class="class"> <span class="title">name</span>              <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">XmlWebApplicationContext</span></span></span><br><span class="line"><span class="class"> <span class="title">isInterface</span>       <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isAnnotation</span>      <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isEnum</span>            <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isAnonymousClass</span>  <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isArray</span>           <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isLocalClass</span>      <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isMemberClass</span>     <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isPrimitive</span>       <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">isSynthetic</span>       <span class="title">false</span></span></span><br><span class="line"><span class="class"> <span class="title">simple</span>-<span class="title">name</span>       <span class="title">XmlWebApplicationContext</span></span></span><br><span class="line"><span class="class"> <span class="title">modifier</span>          <span class="title">public</span></span></span><br><span class="line"><span class="class"> <span class="title">annotation</span></span></span><br><span class="line"><span class="class"> <span class="title">interfaces</span></span></span><br><span class="line"><span class="class"> <span class="title">super</span>-<span class="title">class</span>       +-<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">AbstractRefreshableWebApplicationContext</span></span></span><br><span class="line"><span class="class">                     +-<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">AbstractRefreshableConfigApplicationContext</span></span></span><br><span class="line"><span class="class">                       +-<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">AbstractRefreshableApplicationContext</span></span></span><br><span class="line"><span class="class">                         +-<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">support</span>.<span class="title">AbstractApplicationContext</span></span></span><br><span class="line"><span class="class">                           +-<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">core</span>.<span class="title">io</span>.<span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">                             +-<span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"> <span class="title">class</span>-<span class="title">loader</span>      +-<span class="title">org</span>.<span class="title">apache</span>.<span class="title">catalina</span>.<span class="title">loader</span>.<span class="title">ParallelWebappClassLoader</span></span></span><br><span class="line"><span class="class">                     +-<span class="title">java</span>.<span class="title">net</span>.<span class="title">URLClassLoader</span>@6108<span class="title">b2d7</span></span></span><br><span class="line"><span class="class">                       +-<span class="title">sun</span>.<span class="title">misc</span>.<span class="title">Launcher</span>$<span class="title">AppClassLoader</span>@18<span class="title">b4aac2</span></span></span><br><span class="line"><span class="class">                         +-<span class="title">sun</span>.<span class="title">misc</span>.<span class="title">Launcher</span>$<span class="title">ExtClassLoader</span>@1<span class="title">ddf84b8</span></span></span><br><span class="line"><span class="class"> <span class="title">classLoaderHash</span>   25131501</span></span><br></pre></td></tr></table></figure><h3 id="thread查看哪些线程比较占cpu？他们到底在做什么？"><a href="#thread查看哪些线程比较占cpu？他们到底在做什么？" class="headerlink" title="thread查看哪些线程比较占cpu？他们到底在做什么？"></a>thread查看哪些线程比较占cpu？他们到底在做什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ thread -n <span class="number">3</span></span><br><span class="line"><span class="string">"as-command-execute-daemon"</span> Id=<span class="number">29</span> cpuUsage=<span class="number">75</span>% RUNNABLE</span><br><span class="line">    at sun.management.ThreadImpl.dumpThreads0(Native Method)</span><br><span class="line">    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:<span class="number">440</span>)</span><br><span class="line">    at com.taobao.arthas.core.command.monitor200.ThreadCommand$<span class="number">1</span>.action(ThreadCommand.java:<span class="number">58</span>)</span><br><span class="line">    at com.taobao.arthas.core.command.handler.AbstractCommandHandler.execute(AbstractCommandHandler.java:<span class="number">238</span>)</span><br><span class="line">    at com.taobao.arthas.core.command.handler.DefaultCommandHandler.handleCommand(DefaultCommandHandler.java:<span class="number">67</span>)</span><br><span class="line">    at com.taobao.arthas.core.server.ArthasServer$<span class="number">4</span>.run(ArthasServer.java:<span class="number">276</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</span><br><span class="line"></span><br><span class="line">    Number of locked synchronizers = <span class="number">1</span></span><br><span class="line">    - java.util.concurrent.ThreadPoolExecutor$Worker@<span class="number">6</span>cd0b6f8</span><br><span class="line"></span><br><span class="line"><span class="string">"as-session-expire-daemon"</span> Id=<span class="number">25</span> cpuUsage=<span class="number">24</span>% TIMED_WAITING</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at com.taobao.arthas.core.server.DefaultSessionManager$<span class="number">2</span>.run(DefaultSessionManager.java:<span class="number">85</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"Reference Handler"</span> Id=<span class="number">2</span> cpuUsage=<span class="number">0</span>% WAITING on java.lang.ref.Reference$Lock@<span class="number">69</span>ba0f27</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    -  waiting on java.lang.ref.Reference$Lock@<span class="number">69</span>ba0f27</span><br><span class="line">    at java.lang.Object.wait(Object.java:<span class="number">503</span>)</span><br><span class="line">    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class="number">133</span>)</span><br></pre></td></tr></table></figure><h3 id="动手调试arthas"><a href="#动手调试arthas" class="headerlink" title="动手调试arthas"></a>动手调试arthas</h3><p>参考<a href="https://alibaba.github.io/arthas/quick-start.html" target="_blank" rel="noopener">开源arthas文档</a>编写一个<code>Demo</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Counter.increment();</span><br><span class="line">            debug();</span><br><span class="line">            System.out.println(<span class="string">"counter: "</span> + Counter.value());</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"debug"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译Demo代码， <code>javac Demo.java</code>，然后执行下面指令运行调试模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=<span class="number">8000</span> Demo</span><br></pre></td></tr></table></figure><p>然后在<code>intellij idea</code>中开一个远程调试挂到<code>Demo</code>程序：</p><p><img src="https://zonghaishang.github.io/images/1540484931736.png" class="pretty"></p><p>接下来准备arthas可执行安装包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arthas git:(master) ✗ ./as-<span class="keyword">package</span>.sh</span><br></pre></td></tr></table></figure><p>执行完上面脚本时，会在用户目录创建.arthas目录，里面包含可执行agent代码。</p><p>最后可在<code>./bin</code>里面执行<code>as.sh</code>，会自动列出进程的<code>pid</code>, 手动输出对应的序号，然后在<code>com.taobao.arthas.agent.AgentBootstrap#main</code>中打断点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./as.sh</span><br><span class="line">Arthas script version: <span class="number">3.0</span>.2</span><br><span class="line">Found existing java process, please choose one and hit RETURN.</span><br><span class="line">* [<span class="number">1</span>]: <span class="number">95428</span> </span><br><span class="line">  [<span class="number">2</span>]: <span class="number">22647</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">  [<span class="number">3</span>]: <span class="number">21736</span></span><br><span class="line">  [<span class="number">4</span>]: <span class="number">13560</span> Demo</span><br></pre></td></tr></table></figure><h3 id="arthas原理分析"><a href="#arthas原理分析" class="headerlink" title="arthas原理分析"></a>arthas原理分析</h3>]]></content>
      
      
      <categories>
          
          <category> arthas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arthas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解Java字节码原理</title>
      <link href="/2018/10/22/%E7%90%86%E8%A7%A3%E5%AD%97%E8%8A%82%E7%A0%81%E5%8E%9F%E7%90%86/"/>
      <url>/2018/10/22/%E7%90%86%E8%A7%A3%E5%AD%97%E8%8A%82%E7%A0%81%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为什么要学习字节码技术？无论是Java程序员还是架构师，在我们平常使用的中间件，dubbo、fastjson和arthas等框架或者组件时，我们已经在接触字节码技术了，更重要的是，Java字节码恰恰是JVM的基础。</p><p>什么是字节码？Java字节码是Java代码（即类文件）的中间表示，它在JVM中执行, 没有Java字节码就无法运行整个Java开发生态系统，特别是如何处理和定义Java开发人员正在编写的代码。</p><p>通过本章的分析，主要涵盖以下几个内容：</p><ul><li>获取字节码</li><li>读取字节码</li><li>字节码处理：局部变量，指令跳转，方法调用</li><li>字节码在arthas中的使用</li><li>ASM学习</li></ul><p>让我们正式开始学习字节码技术吧！</p><h2 id="字节码简要介绍"><a href="#字节码简要介绍" class="headerlink" title="字节码简要介绍"></a>字节码简要介绍</h2><p>Java字节码是JVM执行的指令形式。通常，Java程序员不需要知道Java字节码的工作原理。但是，了解平台的低级细节是什么让你成为一个更好的程序员, 我也是其中一员 :-)</p><p>理解字节码对于工具和程序分析领域至关重要，应用程序可以修改字节码以根据应用程序的需求调整行为。分析器，模拟框架，AOP - 要创建这些工具，开发人员必须彻底了解Java字节码。</p><h3 id="先看一个简单的例子"><a href="#先看一个简单的例子" class="headerlink" title="先看一个简单的例子"></a>先看一个简单的例子</h3><p>在开始字节码之前，我们先看一个<code>1 + 1</code>的问题，因为栈很容易评估反向表达式<code>1 1 +</code>，所以可以先把2个1压入堆栈，然后执行加法操作：</p><p><img src="https://zonghaishang.github.io/images/1540196728576.png" class="pretty"></p><p>Java字节码的计算模型是面向堆栈的模型。上面的例子用Java字节码指令表示是相同的，唯一的区别是操作码附加了一些特定的语义：</p><p><img src="https://zonghaishang.github.io/images/1540197154845.png" class="pretty"></p><p>操作码iconst_1将常量1放入堆栈。指令iadd对两个整数执行加法运算，并将结果保留在堆栈的顶部。</p><p>字节码是单字节指令组成，因此有256种可能的操作码。实际指令使用大约200个操作码，其中一些操作码保留用于调试器操作。</p><p>根据指令的性质，我们可以将这些分组分为几个类别：</p><ul><li>堆栈操作指令，包括与局部变量的交互。</li><li>控制流程</li><li>对象操作，包括 方法调用</li><li>算术和类型转换</li></ul><h3 id="javap反编译代码"><a href="#javap反编译代码" class="headerlink" title="javap反编译代码"></a>javap反编译代码</h3><p>要获取反编译后的字节码，我们只需要对<code>.class</code>文件执行<code>javap -c</code>命令即可，作为演示开始编写源代码并编译，我们将从这个类开始，该类将作为我们的示例应用程序的入口点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译类文件后，要获取上述示例的字节码列表，需要执行以下命令：<code>javap -c HelloWorld</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"HelloWorld.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: ldc           #3                  // String Hello world!</span><br><span class="line">       5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的主体应该是空的，为什么仍然会生成一些指令？每个构造函数都会调用super()，编译器在背后帮我做的这件事情。</p><p>您可能已经注意到指令指后面＃1，＃2，＃3的某些编号参数，这是对常量池的引用。如何才能找出常量是什么以及如何在列表中看到常量池？我们可以在反汇编类时将<code>-verbose</code>参数应用于<code>javap</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#15         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #18            // Hello world!</span><br><span class="line">   #4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Class              #21            // HelloWorld</span><br><span class="line">   #6 = Class              #22            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #15 = NameAndType       #7:#8          // "&lt;init&gt;":()V</span><br></pre></td></tr></table></figure><p>在反编译结果中包含有关类文件的大量技术信息：版本，MD5校验和，访问修饰符和常量池等。</p><p>我们还可以看到那里的访问控制标志：ACC_PUBLIC和ACC_SUPER。该ACC_PUBLIC标志通俗易懂。但是是ACC_SUPER代表什么意思？ACC_SUPER纠正invokespecial指令调用超级方法的问题。可以将其视为Java 1.0的错误修复，以便它可以正确地发现超类方法。从Java 1.1开始，编译器总是ACC_SUPER为字节码生成访问者标志。</p><p>可以在常量池中找到表示的常量定义：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#1 = Methodref          #6.#15         // java/lang/Object."&lt;init&gt;":()V</span><br></pre></td></tr></table></figure><p>常量定义是可组合的，这意味着常量可以由从同一个常量池引用的其他常量组成。当使用<code>javap -verbose</code>参数时，还有一些其他的东西可以揭示出来。例如，有关方法的更多信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String Hello world!</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">8</span></span><br></pre></td></tr></table></figure><p>访问器标志也是为方法生成的，我们也可以看到执行该方法需要多深的堆栈，它需要多少参数，以及需要在局部变量表中保留多少局部变量槽。</p><h3 id="理解JVM字节码执行模型"><a href="#理解JVM字节码执行模型" class="headerlink" title="理解JVM字节码执行模型"></a>理解JVM字节码执行模型</h3><p>要理解字节码的细节，我们需要了解字节码的执行模型。JVM是基于堆栈的模型执行，每个线程都有一个存储帧的JVM堆栈。每次调用方法时都会创建一个栈帧。一个栈帧由一个操作数堆栈、一个局部变量数组和一个对当前方法类的运行时常量池的引用组成。我们在最初的例子中看到了所有这些信息。</p><p><img src="https://zonghaishang.github.io/images/1540203209160.png" class="pretty"></p><blockquote><p>局部变量表</p><blockquote><p>包含方法的参数，还用于保存局部变量的值。局部变量数组的大小在编译时确定，并且取决于局部变量和方法参数的数量和大小。</p></blockquote></blockquote><blockquote><p>操作数堆栈</p><blockquote><p>用于推送和弹出值的后进先出(LIFO)堆栈, 它的大小也在编译时确定。某些操作码指令将值推送到操作数栈; 其他一些操作指令，从操作数栈中获取操作数，并保存在局部变量表中。操作数堆栈还用于从方法接收返回值。</p></blockquote></blockquote><p>在调试过程中我们可以丢弃当前方法栈帧回到上次方法调用：</p><p><img src="https://zonghaishang.github.io/images/1540207525392.png" class="pretty"></p><p>每条指令都有自己的十六进制表示：</p><p><img src="https://zonghaishang.github.io/images/1540209698096.png" class="pretty"></p><p>下面是指令替换成字节码十六进制的标识：</p><p><img src="https://zonghaishang.github.io/images/1540210069875.png" class="pretty"></p><h3 id="更多的字节码指令展示"><a href="#更多的字节码指令展示" class="headerlink" title="更多的字节码指令展示"></a>更多的字节码指令展示</h3><p>前面已经提到了与堆栈一起使用的基本指令：将值推送到堆栈或从堆栈中获取值。但还有更多， 交换指令可以交换堆栈顶部的两个值。</p><p>下面是一些处理堆栈周围值的指令，首先是一些基本指令：dup和pop。dup指令复制堆栈顶部的值，pop指令从堆栈顶部弹出数据。</p><p>还有一些更复杂的指令：例如swap，dup_x1和dup2_x1。交换指令在堆栈顶部交换两个值，例如A和B交换位置; dup_x1将顶部值的副本从顶部插入堆栈中的第3个值; dup2_x1复制两个顶部值并插入第3个值之后。下面的例子详细描述每条指令执行的状态。</p><p><img src="https://zonghaishang.github.io/images/1540211921006.png" class="pretty"></p><p>dup_x1和dup2_x1指令似乎有点绕，为什么需要这样的行为，举个实际的例子，如何交换双重类型的2个值？</p><p>double在堆栈中占用两个插槽，这意味着如果我们在堆栈上有两个double值，它们将占用四个插槽。要交换两个double值，我们想使用swap指令，但问题是它只适用于单字指令。</p><p>解决方法是使用dup2_x2复制顶部双精度值的指令，然后我们可以使用pop2指令弹出顶部值。</p><p><img src="https://zonghaishang.github.io/images/1540212418154.png" class="pretty"></p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>当堆栈执行时，局部变量表用于保存中间结果并与堆栈直接交互。现在我们添加一下代码进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Average average = <span class="keyword">new</span> Average();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        average.execute(n1);</span><br><span class="line">        average.execute(n2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> avg = average.getAverage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过类<code>Average</code>计算数字的平均值，每次执行<code>average.execute(...)</code>会进行计算。通过反编译代码得到字节码指令如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">6</span>, args_size=<span class="number">1</span></span><br><span class="line">       0: new           #2                  // class Average</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #3                  // Method Average."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: iconst_1</span><br><span class="line">       <span class="number">9</span>: istore_2</span><br><span class="line">      <span class="number">10</span>: iconst_2</span><br><span class="line">      <span class="number">11</span>: istore_3</span><br><span class="line">      <span class="number">12</span>: aload_1</span><br><span class="line">      <span class="number">13</span>: iload_2</span><br><span class="line">      14: invokevirtual #4                  // Method Average.execute:(I)V</span><br><span class="line">      <span class="number">17</span>: aload_1</span><br><span class="line">      <span class="number">18</span>: iload_3</span><br><span class="line">      19: invokevirtual #4                  // Method Average.execute:(I)V</span><br><span class="line">      <span class="number">22</span>: aload_1</span><br><span class="line">      23: invokevirtual #5                  // Method Average.getAverage:()D</span><br><span class="line">      <span class="number">26</span>: dstore        <span class="number">4</span></span><br><span class="line">      <span class="number">28</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">9</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">10</span>: <span class="number">10</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">12</span></span><br><span class="line">      line <span class="number">13</span>: <span class="number">17</span></span><br><span class="line">      line <span class="number">15</span>: <span class="number">22</span></span><br><span class="line">      line <span class="number">16</span>: <span class="number">28</span></span><br><span class="line">   LocalVariableTable:</span><br><span class="line">    Start  Length  Slot  Name   Signature</span><br><span class="line">        <span class="number">0</span>      <span class="number">29</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">        <span class="number">8</span>      <span class="number">21</span>     <span class="number">1</span> average   LAverage;</span><br><span class="line">       <span class="number">10</span>      <span class="number">19</span>     <span class="number">2</span>    n1   I</span><br><span class="line">       <span class="number">12</span>      <span class="number">17</span>     <span class="number">3</span>    n2   I</span><br><span class="line">       <span class="number">28</span>       <span class="number">1</span>     <span class="number">4</span>   avg   D</span><br></pre></td></tr></table></figure><p>字节码偏移量<code>0</code>,<code>3</code>,<code>4</code>主要用于创建<code>Average</code>对象并初始化，<code>new</code>会创建类型对象标识符引用并压入操作数栈顶，<code>dup</code>会复制栈顶元素副本，<code>invokespecial</code>会调用对象初始化方法<code>&lt;init&gt;</code>，对象会从栈顶弹出。</p><p><code>7: astore_1</code>  会将操作数栈顶元素弹出存放在局部变量表第一个元素，也就是<code>average</code>。</p><p><code>iconst_1</code>和<code>iconst_2</code>将常量1和2加载到操作数栈，LocalVariableTable并通过指令istore_2和istore_3分别将它们存储在插槽2和3中，这里分别对应到<code>n1</code>和<code>n2</code>。</p><p>需要注意调用类似存储的指令实际上会从操作数栈顶部删除值。为了再次使用变量值，我们必须将其加载回堆栈。例如，在上面的字节码列表中，在调用<code>execute</code>方法之前，我们必须再次将参数的值加载到堆栈：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>: aload_1</span><br><span class="line"><span class="number">13</span>: iload_2</span><br><span class="line">14: invokevirtual #4                  // Method Average.execute:(I)V</span><br></pre></td></tr></table></figure><p>在调用<code>getAverage()</code>方法之后，执行结果会存储到操作数栈顶并再次将其存储到局部变量，<code>avg</code>变量的类型为double，所以使用<code>dstore</code>指令将结果写会到第4个局部变量中。</p><p>值得注意的事情局部变量表第一个插槽被方法的参数占用（静态方法）。在我们当前的示例中，它是静态方法，并且没有将此引用(this)分配给表中的插槽0。但是，对于非静态方法，这将分配给插槽0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果看不到反编译局部变量，可以用javac -g 指令生成调试信息，在用javap -c -l 就会生效。</span><br></pre></td></tr></table></figure><h3 id="指令跳转"><a href="#指令跳转" class="headerlink" title="指令跳转"></a>指令跳转</h3><p>跳转指令用于根据条件判定执行流程。比如<code>If-else</code>，三元运算符，各种循环甚至异常处理操作码都属于Java字节码的跳转控制。现在开始跳转指令分析，先添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Average average = <span class="keyword">new</span> Average();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> number : numbers) &#123;</span><br><span class="line">            average.execute(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，先执行<code>javac -g HelloWorld</code>， 然后反编译执行<code>javap -c -l HelloWorld</code>得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  Code:</span><br><span class="line">     0: new           #2                  // class Average</span><br><span class="line">     <span class="number">3</span>: dup</span><br><span class="line">     4: invokespecial #3                  // Method Average."&lt;init&gt;":()V</span><br><span class="line">     <span class="number">7</span>: astore_1</span><br><span class="line">     8: getstatic     #4                  // Field numbers:[I</span><br><span class="line">    <span class="number">11</span>: astore_2</span><br><span class="line">    <span class="number">12</span>: aload_2</span><br><span class="line">    <span class="number">13</span>: arraylength</span><br><span class="line">    <span class="number">14</span>: istore_3</span><br><span class="line">    <span class="number">15</span>: iconst_0</span><br><span class="line">    <span class="number">16</span>: istore        <span class="number">4</span></span><br><span class="line">    <span class="number">18</span>: iload         <span class="number">4</span></span><br><span class="line">    <span class="number">20</span>: iload_3</span><br><span class="line">    <span class="number">21</span>: if_icmpge     <span class="number">42</span></span><br><span class="line">    <span class="number">24</span>: aload_2</span><br><span class="line">    <span class="number">25</span>: iload         <span class="number">4</span></span><br><span class="line">    <span class="number">27</span>: iaload</span><br><span class="line">    <span class="number">28</span>: istore        <span class="number">5</span></span><br><span class="line">    <span class="number">30</span>: aload_1</span><br><span class="line">    <span class="number">31</span>: iload         <span class="number">5</span></span><br><span class="line">    33: invokevirtual #5                  // Method Average.execute:(I)V</span><br><span class="line">    <span class="number">36</span>: iinc          <span class="number">4</span>, <span class="number">1</span></span><br><span class="line">    <span class="number">39</span>: goto          <span class="number">18</span></span><br><span class="line">    <span class="number">42</span>: <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">    line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">    line <span class="number">14</span>: <span class="number">8</span></span><br><span class="line">    line <span class="number">15</span>: <span class="number">30</span></span><br><span class="line">    line <span class="number">14</span>: <span class="number">36</span></span><br><span class="line">    line <span class="number">18</span>: <span class="number">42</span></span><br><span class="line">  LocalVariableTable:</span><br><span class="line">    Start  Length  Slot  Name   Signature</span><br><span class="line">       <span class="number">30</span>       <span class="number">6</span>     <span class="number">5</span> number   I</span><br><span class="line">        -         -     <span class="number">4</span> $index</span><br><span class="line">        -         -     <span class="number">3</span> $length</span><br><span class="line">        -         -     <span class="number">2</span> $array</span><br><span class="line">        <span class="number">0</span>      <span class="number">43</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">        <span class="number">8</span>      <span class="number">35</span>     <span class="number">1</span> average   LAverage;</span><br></pre></td></tr></table></figure><p>字节码位置<code>8</code>到<code>16</code>的指令用于组织循环控制。你可以看到有三个变量，源代码中不会显示：<code>$array</code>，<code>$length</code>，<code>$index</code>-这些都是循环变量。该变量<code>$array</code>存储数组引用，<code>$length</code>使用该<code>arraylength</code>指令从该字段导出循环的长度。循环计数器<code>$index</code>在每次迭代后使用<code>iinc</code>指令递增。</p><p>这几个局部变量是分别通过字节码指令推演出来的，<code>11: astore_2</code> 会将操作数栈顶存到局部变量表<code>2</code>的位置，此时的栈顶是数组。<code>13: arraylength</code> 对数组长度计算放到栈顶，<code>14: istore_3</code>会将栈顶存放到局部变量<code>3</code>的位置。<code>15: iconst_0</code>和<code>16: istore  4</code>将数组索引存储到局部变量表<code>4</code>的位置。</p><p>循环体的第一条指令用于执行循环计数器与数组长度的比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">18: iload         4</span><br><span class="line">20: iload_3</span><br><span class="line">21: if_icmpge     42</span><br></pre></td></tr></table></figure><p><code>if_icmpge</code>指令会比较操作数栈顶部2个元素。该if_ icmpge指令的意思是，如果一个值大于等于其他值，跳转到紧跟的字节码偏移，如果$index大于或等于$length，则执行应标有43位置的字节码指令(直接返回)，如果条件不成立，然后循环继续下一次迭代(执行<code>if_icmpge</code>下一行指令)。</p><p>在执行完获取数组值，然后调用方法<code>execute</code>之后，会执行如下跳转指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">36</span>: iinc          <span class="number">4</span>, <span class="number">1</span></span><br><span class="line"><span class="number">39</span>: goto          <span class="number">18</span></span><br></pre></td></tr></table></figure><p><code>iinc</code>会对第<code>4</code>个局部变量执行自增1，然后<code>goto</code>指令跳转到字节偏移<code>18</code>的位置开始下一次循环。</p><h3 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h3><p>Java中有一个关键字<code>new</code>，也有一个名为<code>new</code>的字节码指令。当我们创建<code>Average</code>类的实例时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Average average = <span class="keyword">new</span> Average();</span><br></pre></td></tr></table></figure><p>编译器会帮我生成一系列字节码指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0: new           #2                  // class Average</span><br><span class="line"><span class="number">3</span>: dup</span><br><span class="line">4: invokespecial #3                  // Method Average."&lt;init&gt;":()V</span><br><span class="line"><span class="number">7</span>: astore_1</span><br></pre></td></tr></table></figure><p>为什么要三个指令而不是一个？</p><p>新指令创建对象，但它不会调用构造函数。由于构造函数调用不会返回值，因此在调用对象上的方法之后，对象将被初始化但操作数栈也会弹出对象，因此在初始化对象后我们将无法对该对象执行任何操作。dup指令用于复制堆栈顶部的值，这就是为什么我们需要提前复制引用，以便在构造函数返回后，我们可以将对象实例分配给局部变量或字段。下一条指令可以将对象引用存储：</p><ul><li>astore {N}或astore_{N} - 分配给局部变量，其中{N}是局部变量表中变量的位置。</li><li>putfield - 将值分配给实例字段</li><li>putstatic - 将值赋给静态字段</li></ul><p>虽然是一个构造函数调用，可能更早就会发起调用。比如类的静态初始化，而是由以下指令之一触发：<code>new</code>，<code>getstatic</code>，<code>putstatic</code>或<code>invokestatic</code>。也就是说，如果您创建类的新实例，访问静态字段或调用静态方法，则会触发静态初始化。</p><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>我们在类实例化时调用了初始化方法，该方法是通过invokespecial指令调用的。但是，还有一些用于方法调用的指令：</p><ul><li>invokestatic，这是对类的静态方法的调用。这是最快的方法调用指令。</li><li>invokespecial，指令用于调用构造函数。但它也用于调用同类的私有方法和超类的可访问的方法（比如父类构造器）。</li><li>invokevirtual, 用于调用public，protected和package私有方法（具体类型的实例对象）。</li><li>invokeinterface，当要调用的方法属于接口方法。</li></ul><p><code>invokevirtual</code>和<code>invokeinterface</code>之间有什么区别？为什么不使用<code>invokevirtual</code>搞定一切调用？毕竟接口方法是公开方法。</p><p>这主要更高效的方法调用。例如，<code>invokestatic</code>我们确切地知道要调用哪个方法：它是静态的，它只属于一个类。由于<code>invokespecial</code>有一个有限的选项列表 ，这意味着运行时将更快地找到所需的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"><span class="title">method</span> <span class="title">method</span>()</span></span><br><span class="line"><span class="class">   </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">  <span class="title">method</span> <span class="title">method</span>()</span></span><br><span class="line"><span class="class">  <span class="title">method</span> <span class="title">methodB</span>()</span></span><br><span class="line"><span class="class">  <span class="title">method</span> <span class="title">methodX</span>()</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class"><span class="title">interface</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">  <span class="title">method</span> <span class="title">public</span>()</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">  <span class="title">method</span> <span class="title">methodX</span>()</span></span><br></pre></td></tr></table></figure><p>看起来在这种情况<code>B</code>中<code>methodX</code>方法和类<code>C</code>没有任何不同。如果还有另一个类C，它也实现了接口但不属于与B相同的层次结构, 这意味着它在方法解析过程中可以做的事情少于<code>invokevirtual</code>。</p><h3 id="字节码在arthas中的使用"><a href="#字节码在arthas中的使用" class="headerlink" title="字节码在arthas中的使用"></a>字节码在arthas中的使用</h3><p>前面已经讲解足够多的字节码知识，下面我们学习下<code>arthas</code>诊断工具是如何使用字节码技术的。</p><h3 id="装载参数到操作数栈"><a href="#装载参数到操作数栈" class="headerlink" title="装载参数到操作数栈"></a>装载参数到操作数栈</h3><p>在实际方法调用前，会将方法参数装载操作数栈中，<code>AdviceWeaver</code>中提供了方法进入前的钩子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMethodEnter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    codeLockForTracing.lock(<span class="keyword">new</span> CodeLock.Block() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> StringBuilder append = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            _debug(append, <span class="string">"debug:onMethodEnter()"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加载before方法</span></span><br><span class="line">            loadAdviceMethod(KEY_ARTHAS_ADVICE_BEFORE_METHOD);</span><br><span class="line"></span><br><span class="line">            _debug(append, <span class="string">"debug:onMethodEnter() &gt; loadAdviceMethod()"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 推入Method.invoke()的第一个参数</span></span><br><span class="line">            pushNull();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 方法参数</span></span><br><span class="line">            loadArrayForBefore();</span><br><span class="line"></span><br><span class="line">            _debug(append, <span class="string">"debug:onMethodEnter() &gt; loadAdviceMethod() &gt; loadArrayForBefore()"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用方法</span></span><br><span class="line">            invokeVirtual(ASM_TYPE_METHOD, ASM_METHOD_METHOD_INVOKE);</span><br><span class="line">            pop();</span><br><span class="line"></span><br><span class="line">            _debug(append, <span class="string">"debug:onMethodEnter() &gt; loadAdviceMethod() &gt; loadArrayForBefore() &gt; invokeVirtual()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mark(beginLabel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们主要分析<code>loadArrayForBefore()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadArrayForBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// bipush指令加载7到操作数栈顶</span></span><br><span class="line">    push(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">// anewarray指令从栈顶弹出7，创建长度为7的数组</span></span><br><span class="line">    newArray(ASM_TYPE_OBJECT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载0到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 加载adviceId到栈顶</span></span><br><span class="line">    push(adviceId);</span><br><span class="line">    <span class="comment">// 对栈顶整数值装箱(因为是创建Object[])</span></span><br><span class="line">    box(ASM_TYPE_INT);</span><br><span class="line">    <span class="comment">// 将栈顶adviceId存储到数组0位置，Object[0]=adviceId</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_INTEGER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载1到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 加载classloader到栈顶</span></span><br><span class="line">    loadClassLoader();</span><br><span class="line">    <span class="comment">// 将栈顶classloader存储到数组1位置，Object[1]=classloader</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_CLASS_LOADER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载2到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 加载className到栈顶</span></span><br><span class="line">    push(className);</span><br><span class="line">    <span class="comment">// 将栈顶className存储到数组1位置，Object[2]=className</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_STRING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载3到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 加载name到栈顶</span></span><br><span class="line">    push(name);</span><br><span class="line">    <span class="comment">// 将栈顶name存储到数组1位置，Object[3]=name</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_STRING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载4到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 加载方法类型描述符到栈顶</span></span><br><span class="line">    push(desc);</span><br><span class="line">    <span class="comment">// 将栈顶name存储到数组4位置，Object[4]=desc</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_STRING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载5到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 加载this(aload_0)或者null到栈顶</span></span><br><span class="line">    loadThisOrPushNullIfIsStatic();</span><br><span class="line">    <span class="comment">// 将栈顶this或者null存储到数组5位置，Object[5]=this|null</span></span><br><span class="line">    <span class="comment">// 当前指令会弹出array, index, value</span></span><br><span class="line">    arrayStore(ASM_TYPE_OBJECT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dup指令复制栈顶引用, 数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// 加载6到栈顶，作为数组索引</span></span><br><span class="line">    push(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 加载参数值作为数组放到索引6的位置</span></span><br><span class="line">    loadArgArray();</span><br><span class="line">    arrayStore(ASM_TYPE_OBJECT_ARRAY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以看到方法调用拦截前<code>arthas</code>会把当前<code>command</code>的<code>adviceId</code>、类、方法、类型描述符和参数值全部保存在数组中。<code>GeneratorAdapter.loadArgArray</code>直接调用的是asm字节码库方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadArgArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取参数个数，压入操作数栈顶</span></span><br><span class="line">    push(argumentTypes.length);</span><br><span class="line">    <span class="comment">// anewarray创建和参数个数等长的对象数组</span></span><br><span class="line">    newArray(OBJECT_TYPE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argumentTypes.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 复制栈顶数组对象引用</span></span><br><span class="line">        dup();</span><br><span class="line">        <span class="comment">// 压入数组当前索引i</span></span><br><span class="line">        push(i);</span><br><span class="line">        <span class="comment">// 使用`&#123;prefix&#125;load`指令加载参数到栈顶</span></span><br><span class="line">        <span class="comment">// 比如整数就会用`iload`指令</span></span><br><span class="line">        loadArg(i);</span><br><span class="line">        <span class="comment">// 对参数装箱</span></span><br><span class="line">        box(argumentTypes[i]);</span><br><span class="line">        <span class="comment">// 存储参数值到当前数组索引i中</span></span><br><span class="line">        arrayStore(OBJECT_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装载方法调用结果到操作数栈"><a href="#装载方法调用结果到操作数栈" class="headerlink" title="装载方法调用结果到操作数栈"></a>装载方法调用结果到操作数栈</h3><p>和方法调用前一样，我们可以在方法退出时进行字节码拦截，这段代码我们可以在<code>AdviceWeaver</code>中找到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMethodExit</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> opcode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isThrow(opcode)) &#123;</span><br><span class="line">        codeLockForTracing.lock(<span class="keyword">new</span> CodeLock.Block() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> StringBuilder append = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                _debug(append, <span class="string">"debug:onMethodExit()"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 加载返回对象</span></span><br><span class="line">                loadReturn(opcode);</span><br><span class="line">                _debug(append, <span class="string">"debug:onMethodExit() &gt; loadReturn()"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 加载returning方法</span></span><br><span class="line">                loadAdviceMethod(KEY_ARTHAS_ADVICE_RETURN_METHOD);</span><br><span class="line">                _debug(append, <span class="string">"debug:onMethodExit() &gt; loadReturn() &gt; loadAdviceMethod()"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 推入Method.invoke()的第一个参数</span></span><br><span class="line">                pushNull();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 加载return通知参数数组</span></span><br><span class="line">                loadReturnArgs();</span><br><span class="line">                _debug(append, <span class="string">"debug:onMethodExit() &gt; loadReturn() &gt; loadAdviceMethod() &gt; loadReturnArgs()"</span>);</span><br><span class="line"></span><br><span class="line">                invokeVirtual(ASM_TYPE_METHOD, ASM_METHOD_METHOD_INVOKE);</span><br><span class="line">                pop();</span><br><span class="line"></span><br><span class="line">                _debug(append, <span class="string">"debug:onMethodExit() &gt; loadReturn() &gt; loadAdviceMethod() &gt; loadReturnArgs() &gt; invokeVirtual()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点我们看下<code>loadReturnArgs</code>中如何使用通过字节码装载参数的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadReturnArgs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 假设字母分别代码以下值：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * r -&gt; return value</span></span><br><span class="line"><span class="comment">     * f -&gt; advice static method  field</span></span><br><span class="line"><span class="comment">     * n -&gt; null</span></span><br><span class="line"><span class="comment">     * a -&gt; array</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当前栈顶的状态： rrfn , rrfn的右方是栈顶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们要构造的最终结果是：rfna, 代表的含义会回调通知拦截方法f,</span></span><br><span class="line"><span class="comment">     * 传递给方法的2个参数分别为null和array, array中已经保存了</span></span><br><span class="line"><span class="comment">     * 结果r的引用，即array[0]=r</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rrfn  -&gt; rfnrfn</span></span><br><span class="line">    <span class="comment">// 复制栈顶fn并且插入到栈顶第3个元素之后</span></span><br><span class="line">    dup2X1();</span><br><span class="line">    <span class="comment">// rfnrfn -&gt; rfnr</span></span><br><span class="line">    <span class="comment">// 弹出栈顶2个元素</span></span><br><span class="line">    pop2();</span><br><span class="line">    <span class="comment">// rfnr   -&gt; rfnr1</span></span><br><span class="line">    <span class="comment">// 压入1到操作数栈顶</span></span><br><span class="line">    push(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// rfnr1 -&gt; rfnra</span></span><br><span class="line">    <span class="comment">// 弹出栈顶1并创建数组压入栈顶</span></span><br><span class="line">    newArray(ASM_TYPE_OBJECT);</span><br><span class="line">    <span class="comment">// rfnra  -&gt; rfnraa</span></span><br><span class="line">    <span class="comment">// 复制栈顶数组引用</span></span><br><span class="line">    dup();</span><br><span class="line">    <span class="comment">// rfnraa -&gt; rfnaaraa</span></span><br><span class="line">    <span class="comment">// 复制栈顶aa并且插入到栈顶第3个元素之后</span></span><br><span class="line">    dup2X1();</span><br><span class="line">    <span class="comment">// rfnaaraa -&gt; rfnaar</span></span><br><span class="line">    <span class="comment">// 弹出栈顶的2个元素值</span></span><br><span class="line">    pop2();</span><br><span class="line">    <span class="comment">// rfnaar   -&gt; rfnaar0</span></span><br><span class="line">    <span class="comment">// 压入数组索引0到栈顶</span></span><br><span class="line">    push(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// rfnaar0  -&gt; rfnaa0r</span></span><br><span class="line">    <span class="comment">// 交换栈顶2个元素值</span></span><br><span class="line">    swap();</span><br><span class="line">    <span class="comment">// rfnaa0r -&gt; rfna</span></span><br><span class="line">    <span class="comment">// 将r值保存在数组索引0位置，array[0]=r，并弹出数组</span></span><br><span class="line">    arrayStore(ASM_TYPE_OBJECT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面给出了详细的字节码推演，可以看到字节码在<code>arthas</code>中核心的应用场景点。当然解析<code>arthas</code>超过这个小节的重点，后面有时间我会另外章节讲解<code>arthas</code>原理。</p><h3 id="ASM介绍和学习"><a href="#ASM介绍和学习" class="headerlink" title="ASM介绍和学习"></a>ASM介绍和学习</h3><p>这里主要简单介绍<code>asm</code>库的简单使用并会给出有用的插件帮助深入研究字节码的技巧，授人以鱼不如授人以渔，哈哈。</p><p>时间倒转，再回到经典的<code>Hello World</code>程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成与<code>HelloWorld</code>相对应的字节码的最常见方案是创建ClassWriter，访问类似字段，方法等，并在生成类描述后写出最终字节。</p><p>首先，先构造ClassWriter实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassWriter cw = <span class="keyword">new</span> ClassWriter（</span><br><span class="line">    ClassWriter.COMPUTE_MAXS | </span><br><span class="line">    ClassWriter.COMPUTE_FRAMES）;</span><br></pre></td></tr></table></figure><p><code>COMPUTE_MAXS</code>告诉<code>ASM</code>自动计算最大堆栈大小和方法的最大局部变量数。<code>COMPUTE_FRAMES</code>告诉ASM从头开始自动计算方法的堆栈映射帧。</p><p>定义一个类我们必须调用<code>ClassWriter.visit()</code> 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, <span class="string">"HelloWorld"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>接下来，我们生成默认构造函数和main方法。如果跳过生成默认构造函数，则不会发生任何错误，但生成手动生成一个更完备一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv = cw.visitMethod(ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">mv.visitCode();</span><br><span class="line">mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">mv.visitMethodInsn(INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">false</span>);</span><br><span class="line">mv.visitInsn(RETURN);</span><br><span class="line">mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">mv.visitEnd();</span><br></pre></td></tr></table></figure><p>我们首先使用该<code>visitMethod()</code> 方法创建了构造函数。接下来，要通过调用<code>visitCode()</code>方法开始生成构造函数的代码体。最后我们调用<code>visitMaxs()</code>- 这是要求ASM重新计算最大堆栈大小。<code>ASM</code>可以自动完成计算，我们可以将随机参数传递给<code>visitMaxs()</code>方法。最后，调用<code>visitEnd()</code>结束构造函数方法体。</p><p>以下是main方法的<code>ASM</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">mv.visitCode();</span><br><span class="line">mv.visitFieldInsn(GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>, <span class="string">"Ljava/io/PrintStream;"</span>);</span><br><span class="line">mv.visitLdcInsn(<span class="string">"Hello world, I'm asm !"</span>);</span><br><span class="line">mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>, <span class="string">"println"</span>, <span class="string">"(Ljava/lang/String;)V"</span>, <span class="keyword">false</span>);</span><br><span class="line">mv.visitInsn(RETURN);</span><br><span class="line">mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">mv.visitEnd();</span><br></pre></td></tr></table></figure><p>通过<code>visitMethod()</code>再次调用，给出方法修饰符、方法名称、方法类型描述符、签名和异常生成新方法定义。然后调用<code>visitCode()</code>，<code>visitMaxs()</code>和<code>visitEnd()</code>方法完成代码的编写。<code>visitFieldInsn</code>会最终转换成<code>getstatic</code>指令，<code>visitLdcInsn</code>会最终转换<code>ldc</code>加载常量池引用。</p><p>最终给出可出可运行的字节码应用程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yiji@apache.org</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldDump</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> <span class="keyword">implements</span> <span class="title">Opcodes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorldDump</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bytes = bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] ba = <span class="keyword">this</span>.bytes;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, ba, <span class="number">0</span>, ba.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloWorldDump loader = <span class="keyword">new</span> HelloWorldDump(dump());</span><br><span class="line">        Class clazz = loader.findClass(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line">        Method main = clazz.getMethod(<span class="string">"main"</span>, <span class="keyword">new</span> Class[]&#123;String[].class&#125;);</span><br><span class="line">        main.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[<span class="number">0</span>]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] dump() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(ClassWriter.COMPUTE_MAXS |</span><br><span class="line">                ClassWriter.COMPUTE_FRAMES);</span><br><span class="line">        MethodVisitor mv;</span><br><span class="line"></span><br><span class="line">        cw.visit(V1_8, ACC_PUBLIC + ACC_SUPER, <span class="string">"HelloWorld"</span>, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            mv.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKESPECIAL, <span class="string">"java/lang/Object"</span>, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            mv.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, <span class="string">"main"</span>, <span class="string">"([Ljava/lang/String;)V"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            mv.visitCode();</span><br><span class="line">            mv.visitFieldInsn(GETSTATIC, <span class="string">"java/lang/System"</span>, <span class="string">"out"</span>, <span class="string">"Ljava/io/PrintStream;"</span>);</span><br><span class="line">            mv.visitLdcInsn(<span class="string">"Hello world, I'm asm !"</span>);</span><br><span class="line">            mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">"java/io/PrintStream"</span>, <span class="string">"println"</span>, <span class="string">"(Ljava/lang/String;)V"</span>, <span class="keyword">false</span>);</span><br><span class="line">            mv.visitInsn(RETURN);</span><br><span class="line">            mv.visitMaxs(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            mv.visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line">        cw.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析字节码工具"><a href="#分析字节码工具" class="headerlink" title="分析字节码工具"></a>分析字节码工具</h3><p>想写好完备的字节码程序对程序员能力要求非常高，幸好<code>asm</code>提供了自动生成字节码代码工具，我们熟悉的<code>intellij idea</code>也有对应的插件。学习使用ASM的最佳方法是编写一个等同于想要生成的Java源文件，然后使用<code>ASM Bytecode Viewer</code>插件（或ASMifier工具）的ASMifier模式来查看等效的ASM代码。如果要实现类转换器，请编写两个Java源文件（转换前），并在ASMifier模式下使用插件的比较视图来比较等效的ASM代码。</p><p><img src="https://zonghaishang.github.io/images/1540374041117.png" class="pretty"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>研究字节码的动机主要来源于<code>greys</code>，当时想研究它的原理写一套更好用的诊断工具，但是后来发现<code>arthas</code>用起来满足需要，就放弃了重新开发的想法，刚好把精力再投回<code>Dubbo</code>。</p><p>这里主要记录字节码学习过程，希望能帮助更多对这块感兴趣的同学，同时也能加深对jvm字节码的理解，为后续深入研究JVM也有帮助。</p>]]></content>
      
      
      <categories>
          
          <category> asm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> arthas </tag>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dubbo无法处理Spring代理对象</title>
      <link href="/2018/10/01/Spring%E6%9D%82%E8%B0%88-%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4Dubbo%E6%9C%8D%E5%8A%A1%E6%97%A0%E6%B3%95%E8%A2%AB%E6%AD%A3%E7%A1%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2018/10/01/Spring%E6%9D%82%E8%B0%88-%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4Dubbo%E6%9C%8D%E5%8A%A1%E6%97%A0%E6%B3%95%E8%A2%AB%E6%AD%A3%E7%A1%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在阿里重启开源之前，基于<code>dubbo</code>注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个<code>dubbo</code>服务使用<code>aop</code>不生效的问题，最后分析发现是在使用aop场景下如果接口包含循环依赖，<code>dubbo</code>服务暴露是拿不到代理，所以就导致不生效了。</p><p>为了简化背景，业务方同学对外暴露<code>controller</code>接收<code>http</code>请求, 依赖关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Controller </span><br><span class="line">-&gt; DeliveryOperateService </span><br><span class="line">-&gt; CancelDistOrderProcessor </span><br><span class="line">-&gt; DeliveryOperateService</span><br></pre></td></tr></table></figure><p>这里大家应该发现循环依赖了, <code>DeliveryOperateService</code>是应用了aop拦截，这种场景在开源版本<code>dubbo 2.5.8</code>之前是无法正确处理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/trade-dc/operate"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryOperateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DeliveryOperateService</span></span><br><span class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(protocol = &#123;<span class="string">"dubbo"</span>&#125;, registry = &#123;<span class="string">"haunt"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryOperateServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeliveryOperateService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> CancelDistOrderProcessor cancelDistOrderProcessor;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CancelDistOrderProcessor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CancelDistOrderProcessor</span> <span class="keyword">implements</span> <span class="title">IComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在正常情况下，如果使用aop在dubbo暴露服务时会传递正确的spring动态代理后的对象:</p><p><img src="https://zonghaishang.github.io/images/1538291854892.png" class="pretty"></p><p><code>Dubbo</code>服务暴露实际持有的对象是代理后的对象。但是因为循环依赖Dubbo提前拿到<code>DeliveryOperateService</code>非代理的实例。</p><h3 id="我们来看下为什么这种场景Dubbo无法处理？"><a href="#我们来看下为什么这种场景Dubbo无法处理？" class="headerlink" title="我们来看下为什么这种场景Dubbo无法处理？"></a>我们来看下为什么这种场景<code>Dubbo</code>无法处理？</h3><p><img src="https://zonghaishang.github.io/images/1538293549011.png" class="pretty"></p><h3 id="Step1-Spring启动初始化Controller-对属性进行注入"><a href="#Step1-Spring启动初始化Controller-对属性进行注入" class="headerlink" title="Step1, Spring启动初始化Controller, 对属性进行注入"></a>Step1, <code>Spring</code>启动初始化<code>Controller</code>, 对属性进行注入</h3><h3 id="Step2-Controller触发DeliveryOperateService创建实例"><a href="#Step2-Controller触发DeliveryOperateService创建实例" class="headerlink" title="Step2, Controller触发DeliveryOperateService创建实例"></a>Step2, <code>Controller</code>触发<code>DeliveryOperateService</code>创建实例</h3><p><img src="https://zonghaishang.github.io/images/1538296119277.png" class="pretty"></p><p>第一次依赖注入就会触发bean的实例化并且保存在<code>exposedObject</code>中，，注意，这里是非代理对象。</p><h3 id="Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化"><a href="#Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化" class="headerlink" title="Step3, DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化"></a>Step3, <code>DeliveryOperateService</code>依赖<code>CancelDistOrderProcessor</code>并触发它初始化</h3><p><img src="https://zonghaishang.github.io/images/1538296756913.png" class="pretty"></p><p>这里也没什么特殊的，在<code>populateBean</code>会触发循环依赖<code>DeliveryOperateService</code>加载，这时候<code>earlySingletonExposure</code>值为true, 代表bean提前暴露。</p><h3 id="Step4-在前一步触发，DeliveryOperateService其实会创建动态代理"><a href="#Step4-在前一步触发，DeliveryOperateService其实会创建动态代理" class="headerlink" title="Step4, 在前一步触发，DeliveryOperateService其实会创建动态代理"></a>Step4, 在前一步触发，<code>DeliveryOperateService</code>其实会创建动态代理</h3><p><img src="https://zonghaishang.github.io/images/1538297025076.png" class="pretty"></p><p>循环引用会导致提前暴露<code>earlySingletonExposure=true</code>，这个时候加载的是<code>getEarlyBeanReference</code>，在里面创建spring动态代理：</p><p><img src="https://zonghaishang.github.io/images/1538297199420.png" class="pretty"></p><p>在创建完动态代理后，<code>DeliveryOperateService</code>会加入<code>earlyProxyReferences</code>，后面再获取这个<code>bean</code>就不会再重复创建代理了。</p><p><img src="https://zonghaishang.github.io/images/1538297380747.png" class="pretty"></p><p>到此，<code>DeliveryOperateService</code>确实会创建，并且会用在<code>CancelDistOrderProcessor</code>对应注入的字段中。</p><h3 id="Step6-触发Dubbo服务暴露的实例不是代理"><a href="#Step6-触发Dubbo服务暴露的实例不是代理" class="headerlink" title="Step6, 触发Dubbo服务暴露的实例不是代理"></a>Step6, 触发Dubbo服务暴露的实例不是代理</h3><p>因为在<code>CancelDistOrderProcessor</code>中已经触发了代理生成，所以第<code>Step1</code>中的实例不会再创建代理了。</p><p><img src="https://zonghaishang.github.io/images/1538297678652.png" class="pretty"></p><p>在代码<code>555</code>会触发<code>dubbo AnnotationBean</code>进行服务暴露，但是这个不是代理实例了，但是为什么spring还是正确返回代理后的实例呢？</p><p><img src="https://zonghaishang.github.io/images/1538297855578.png" class="pretty"></p><p>因为循环引用触发<code>earlySingletonExposure=true</code>, 并且在前面已经生成过动态代理了，可以直接在<code>getSingleton</code>拿到动态代理的返回了。</p><p>好了，基本原因已经分析的够清楚了，我觉的有2点注意事项：</p><ul><li><code>dubbo</code>原来注解实现声明周期没搞清楚</li><li><code>spring</code>如果能提前判断循环引用获取<code>exposedObject</code>也没问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">    Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">exposedObject = earlySingletonReference;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如把循环引用逻辑提前到<code>populateBean</code>之前判断一下。</p><h3 id="为什么在开源dubbo-2-5-8版本之后没有这个问题？"><a href="#为什么在开源dubbo-2-5-8版本之后没有这个问题？" class="headerlink" title="为什么在开源dubbo 2.5.8版本之后没有这个问题？"></a>为什么在开源<code>dubbo 2.5.8</code>版本之后没有这个问题？</h3><p>重写后的注解实现，我深入研究过，新版本实现不会提前使用没有代理的bean，关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// ServiceAnnotationBeanPostProcessor</span><br><span class="line">@Override</span><br><span class="line">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException &#123;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);</span><br><span class="line"></span><br><span class="line">if (!CollectionUtils.isEmpty(resolvedPackagesToScan)) &#123;</span><br><span class="line">registerServiceBeans(resolvedPackagesToScan, registry);</span><br><span class="line">&#125; else &#123;</span><br><span class="line"> if (logger.isWarnEnabled()) &#123;</span><br><span class="line"> logger.warn(&quot;packagesToScan is empty , ServiceBean registry will be ignored!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ServiceAnnotationBeanPostProcessor</code> 实现<code>BeanDefinitionRegistryPostProcessor</code>接口，会在所有<code>spring bean</code>真正初始化前完成<code>dubbo</code>服务的注册，整个生命周期中不会触碰到代理前的对象。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我其实平时不太习惯写文章，但是发现分析后的问题记录下来可以让更多同学收益。</p>]]></content>
      
      
      <categories>
          
          <category> Spring杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring杂谈 </tag>
            
            <tag> Dubbo框架问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工作经历</title>
      <link href="/2018/10/01/%E8%AF%A3%E6%9E%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86/"/>
      <url>/2018/10/01/%E8%AF%A3%E6%9E%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org"><a href="#商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org" class="headerlink" title="商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | yiji@apache.org"></a>商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | <a href="mailto:yiji@apache.org" target="_blank" rel="noopener">yiji@apache.org</a></h2><p>花名诣极，资深开发工程师，开源Apache Dubbo PMC。1991年11月出生，居住在浙江省杭州市，曾就职于阿里巴巴集团、有赞科技，担任dubbo框架技术负责人，参与中间件研发，目前就职于蚂蚁金服中间件团队，主攻sofa rpc和云原生(Service mesh)方向, &lt;&lt;深入理解Apache Dubbo原理与实战&gt;&gt;图书作者。</p><p><code>E-mail</code>：<a href="mailto:yiji@apache.org" target="_blank" rel="noopener">yiji@apache.org</a><br><code>Github</code>:  <a href="https://github.com/zonghaishang/" target="_blank" rel="noopener">https://github.com/zonghaishang/</a><br><code>Website</code>: <a href="https://zonghaishang.github.io/">https://zonghaishang.github.io/</a></p><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><p>服务端:熟悉 Java &amp; Go; 熟悉网络编程、在 RPC 和 Service Mesh 领域有落地经验;熟读主流开源框架 Dubbo/SofaRPC/Hessian/Fastjson/Spring/Arthas 源码并理解原理; 有 pprof 性能优化经验; 担任开源 Apache Dubbo PPMC; 热销书&lt;&lt;深入理解 Apache Dubbo 与实战&gt;&gt;图书作者; github: <a href="https://github.com/zonghaishang" target="_blank" rel="noopener">https://github.com/zonghaishang</a></p><h2 id="项目及工作经历"><a href="#项目及工作经历" class="headerlink" title="项目及工作经历"></a>项目及工作经历</h2><h3 id="2019年4月—至今-蚂蚁金服-中间件团队"><a href="#2019年4月—至今-蚂蚁金服-中间件团队" class="headerlink" title="2019年4月—至今(蚂蚁金服-中间件团队)"></a>2019年4月—至今(蚂蚁金服-中间件团队)</h3><p>主要负责 Sofa RPC 和 Mosn(owner)，推动 Mosn 迭代和演进。负责轻量 SDK(支持 Dubbo、Sofa RPC<br>和 Spring Cloud 技术栈)研发、Mosn 多协议、稳定性和性能方面建设，有成功推动商业化落地经验。 </p><ul><li>项目职责和工作成果:</li></ul><ol><li>负责 Mosn 容器和虚拟机场景多协议、稳定性和性能建设, 性能优化(性能提升50%+), 得到商户认可。 </li><li>负责轻量全栈 SDK 研发，易接入、低侵入。负责 RPC 性能压测框架研发，助力多个重点项目。</li><li>负责 Sofa 元数据上报、Mosn 容器优雅下线、支持云上商户接入 Mesh、解决疑难问题以及方案沉淀</li></ol><h3 id="2018年1月—2019年4月（有赞-云框架）"><a href="#2018年1月—2019年4月（有赞-云框架）" class="headerlink" title="2018年1月—2019年4月（有赞-云框架）"></a>2018年1月—2019年4月（有赞-云框架）</h3><p>Dubbo 框架技术负责人，负责内部框架迭代演进和规划，推动 Service mesh 落地和技术招聘等工作等。 </p><ul><li>项目职责和工作成果:</li></ul><ol><li>负责 Dubbo-http2协议、Etcd3注册中心、同机房优先、服务注解、Maven 插件等特性的设计和开发。 </li><li>负责服务治理中台方案设计和开发，制定开发计划并推动落地。</li><li>解决线上优雅停机、平滑升级、Hessian2序列化优化和注册中心优化等。</li></ol><h3 id="2017年5月—2018年1月-阿里巴巴-财税技术"><a href="#2017年5月—2018年1月-阿里巴巴-财税技术" class="headerlink" title="2017年5月—2018年1月 (阿里巴巴-财税技术)"></a>2017年5月—2018年1月 (阿里巴巴-财税技术)</h3><p>税务平台是阿里内部使用的系统，支持线上开具电子发票，支持海外发票(俄罗斯)业务进军国际化领 域。TP 计算平台业务是阿里集团内部合理降低税务开支开发的系统，用来调节公司利润率和定价转移。</p><ul><li>项目职责和工作成果:<br>1.完成海外电子发票接入详细设计、编码、项目进度推进和1c 系统部署落地。<br>2.完成 TP 详细设计和开发，外包管理和线上问题分析处理。<br>3.完成双十一限流方案的设计和开发，税务系统、协同、财务首页等系统维护工作。</li></ul><h3 id="2014年12月—2017年3月-金蝶-架构组"><a href="#2014年12月—2017年3月-金蝶-架构组" class="headerlink" title="2014年12月—2017年3月 (金蝶-架构组)"></a>2014年12月—2017年3月 (金蝶-架构组)</h3><p>金蝶下一代云 ERP 是基于金蝶统一云平台的 Saas 化企业管理服务。系统后台采用微服务架构，提供脚 本引擎、配置服务、缓存、容器和 SDK 等服务，采用开源 RPC 框架 Dubbo，Docker 容器等一系列技术保证 服务可以弹性二级扩容。</p><ul><li>项目职责和工作成果:<br>1.Dubbo框架扩展，提供 JSON 上下文解析器和配置中心开发。<br>2.采用 Netty开发图片服务器，支持金蝶云图片上传和预览。<br>3.开发云平台脚本调试功能, 提供单步调试、方法返回、查看变量、调用堆栈和控制台。<br>4.开发邮件服务组件，支持金蝶邮件服务器和腾讯邮箱发送服务，目前用于扩容通知。<br>5.开发监控组件，提供小部件实时监控图、柱状图和折线图等等，支持自适应。<br>6.优化 ERP 会计审计接口导出问题，修复引发金蝶集群实例宕机严重问题。<br>7.开发附件支持高拍仪设备上传，附件上传安全验证拦截校验功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作经历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作经历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>注册反序列化解析（十一）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%8C)-%E5%86%85%E9%83%A8%E6%B3%A8%E5%86%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%8C)-%E5%86%85%E9%83%A8%E6%B3%A8%E5%86%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="反序列化回调接口实现分析"><a href="#反序列化回调接口实现分析" class="headerlink" title="反序列化回调接口实现分析"></a>反序列化回调接口实现分析</h2><h3 id="内部注册的反序列化"><a href="#内部注册的反序列化" class="headerlink" title="内部注册的反序列化"></a>内部注册的反序列化</h3><p>fastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册<code>com.alibaba.fastjson.parser.ParserConfig#initDeserializers</code>可以得到列表：</p><table><thead><tr><th style="text-align:left">注册的类型</th><th style="text-align:left">反序列化实例</th><th style="text-align:center">是否支持序列化</th><th style="text-align:center">是否支持反序列化</th></tr></thead><tbody><tr><td style="text-align:left">SimpleDateFormat</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Timestamp</td><td style="text-align:left">SqlDateDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">SqlDateDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Time</td><td style="text-align:left">TimeDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">DateCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Calendar</td><td style="text-align:left">CalendarCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">XMLGregorianCalendar</td><td style="text-align:left">CalendarCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">JSONObject</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">JSONArray</td><td style="text-align:left">CollectionCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Map</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">HashMap</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">LinkedHashMap</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">TreeMap</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">ConcurrentMap</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">ConcurrentHashMap</td><td style="text-align:left">MapDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Collection</td><td style="text-align:left">CollectionCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">List</td><td style="text-align:left">CollectionCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">ArrayList</td><td style="text-align:left">CollectionCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">JavaObjectDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">StringCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">StringBuffer</td><td style="text-align:left">StringCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">StringBuilder</td><td style="text-align:left">StringCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">CharacterCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Character</td><td style="text-align:left">CharacterCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Byte</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Integer</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">LongCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">LongCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">BigInteger</td><td style="text-align:left">BigIntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">BigDecimal</td><td style="text-align:left">BigDecimalCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">FloatCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">FloatCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Double</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">BooleanCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">BooleanCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Class</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">char[]</td><td style="text-align:left">CharArrayCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicBoolean</td><td style="text-align:left">BooleanCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicBoolean</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicLong</td><td style="text-align:left">LongCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">WeakReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">SoftReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">UUID</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">TimeZone</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Locale</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Currency</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">InetAddress</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Inet4Address</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Inet6Address</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">InetSocketAddress</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">File</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">URI</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">URL</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Pattern</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Charset</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">JSONPath</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">NumberDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicIntegerArray</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicLongArray</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">StackTraceElement</td><td style="text-align:left">StackTraceElementDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Serializable</td><td style="text-align:left">JavaObjectDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Cloneable</td><td style="text-align:left">JavaObjectDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Comparable</td><td style="text-align:left">JavaObjectDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Closeable</td><td style="text-align:left">JavaObjectDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">JSONPObject</td><td style="text-align:left">JSONPDeserializer</td><td style="text-align:center">-</td><td style="text-align:center">是</td></tr></tbody></table><p>通过上面表格发现几乎把所有JDK常用的类型都注册了一遍，目的是在运行时能够查找到特定的反序列化实例而不需要使用默认Java的反序列化实例。</p><p>我们先从常见的类型开始分析反序列化实现。</p><h3 id="BooleanCodec反序列化"><a href="#BooleanCodec反序列化" class="headerlink" title="BooleanCodec反序列化"></a>BooleanCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line"></span><br><span class="line">    Boolean boolObj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 遇到true类型的token，预读下一个token */</span></span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.TRUE) &#123;</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            boolObj = Boolean.TRUE;</span><br><span class="line">            <span class="comment">/** 遇到false类型的token，预读下一个token */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.token() == JSONToken.FALSE) &#123;</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            boolObj = Boolean.FALSE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">            <span class="comment">/** 遇到整数类型的token，预读下一个token */</span></span><br><span class="line">            <span class="keyword">int</span> intValue = lexer.intValue();</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 1代表true，其他情况false */</span></span><br><span class="line">            <span class="keyword">if</span> (intValue == <span class="number">1</span>) &#123;</span><br><span class="line">                boolObj = Boolean.TRUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                boolObj = Boolean.FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object value = parser.parse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 处理其他情况，比如Y,T代表true */</span></span><br><span class="line">            boolObj = TypeUtils.castToBoolean(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"parseBoolean error, field : "</span> + fieldName, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果是原子类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == AtomicBoolean.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> AtomicBoolean(boolObj.booleanValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) boolObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次反序列化拿到token是，当前记录的字符<code>ch</code>变量实际是token结尾的下一个字符，<code>boolean</code>类型字段会触发该接口。</p><h3 id="CharacterCodec反序列化"><a href="#CharacterCodec反序列化" class="headerlink" title="CharacterCodec反序列化"></a>CharacterCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 根据token解析类型 */</span></span><br><span class="line">    Object value = parser.parse();</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span></span><br><span class="line">        ? <span class="keyword">null</span></span><br><span class="line">        <span class="comment">/** 转换成char类型，如果是string取字符串第一个char */</span></span><br><span class="line">        : (T) TypeUtils.castToChar(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着反序列化应该挺简单，但是内部解析值委托给了<code>DefaultJSONParser#parse(java.lang.Object)</code>, 会把字符串解析取第一个字符处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parse</span><span class="params">(Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = <span class="keyword">this</span>.lexer;</span><br><span class="line">    <span class="keyword">switch</span> (lexer.token()) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class="line"><span class="comment">         * /</span></span><br><span class="line"><span class="comment">        case LITERAL_STRING:</span></span><br><span class="line"><span class="comment">            /** 探测到是字符串类型，解析值 */</span></span><br><span class="line">            String stringLiteral = lexer.stringVal();</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowISO8601DateFormat)) &#123;</span><br><span class="line">                JSONScanner iso8601Lexer = <span class="keyword">new</span> JSONScanner(stringLiteral);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (iso8601Lexer.scanISO8601DateIfMatch()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> iso8601Lexer.getCalendar().getTime();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    iso8601Lexer.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stringLiteral;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class="line"><span class="comment">         * /</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="IntegerCodec反序列化"><a href="#IntegerCodec反序列化" class="headerlink" title="IntegerCodec反序列化"></a>IntegerCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> token = lexer.token();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果解析到null值，返回null */</span></span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.NULL) &#123;</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Integer intObj;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">            <span class="comment">/** 整型字面量，预读下一个token */</span></span><br><span class="line">            <span class="keyword">int</span> val = lexer.intValue();</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            intObj = Integer.valueOf(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class="line">            <span class="comment">/** 浮点数字面量，预读下一个token */</span></span><br><span class="line">            BigDecimal decimalValue = lexer.decimalValue();</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            intObj = Integer.valueOf(decimalValue.intValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (token == JSONToken.LBRACE) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 处理历史原因反序列化AtomicInteger成map */</span></span><br><span class="line">                JSONObject jsonObject = <span class="keyword">new</span> JSONObject(<span class="keyword">true</span>);</span><br><span class="line">                parser.parseObject(jsonObject);</span><br><span class="line">                intObj = TypeUtils.castToInt(jsonObject);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 处理其他情况 */</span></span><br><span class="line">                Object value = parser.parse();</span><br><span class="line">                intObj = TypeUtils.castToInt(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"parseInt error, field : "</span> + fieldName, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (clazz == AtomicInteger.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> AtomicInteger(intObj.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (T) intObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对特殊场景AutomicInteger类型，可以通过单元测试<code>com.alibaba.json.bvt.parser.AtomicIntegerComptableAndroidTest#test_for_compatible_zero</code>进行动手实践调试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_for_compatible_zero</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String text = <span class="string">"&#123;\"andIncrement\":-1,\"andDecrement\":0&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">0</span>, JSON.parseObject(text, AtomicInteger.class).intValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续对<code>parseObject(jsonObject)</code>进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parseObject</span><span class="params">(<span class="keyword">final</span> Map object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parseObject(object, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LongCodec反序列化"><a href="#LongCodec反序列化" class="headerlink" title="LongCodec反序列化"></a>LongCodec反序列化</h3><p>因为和整数反序列化极其类似，请参考<code>IntegerCodec</code>不进行冗余分析。</p><h3 id="FloatCodec反序列化"><a href="#FloatCodec反序列化" class="headerlink" title="FloatCodec反序列化"></a>FloatCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">        <span class="comment">/** 整型字面量，预读下一个token */</span></span><br><span class="line">        String val = lexer.numberString();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) Float.valueOf(Float.parseFloat(val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class="line">        <span class="comment">/** 浮点数字面量，预读下一个token */</span></span><br><span class="line">        <span class="keyword">float</span> val = lexer.floatValue();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) Float.valueOf(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理其他情况 */</span></span><br><span class="line">    Object value = parser.parse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) TypeUtils.castToFloat(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BigDecimalCodec反序列化"><a href="#BigDecimalCodec反序列化" class="headerlink" title="BigDecimalCodec反序列化"></a>BigDecimalCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">        <span class="comment">/** 整型字面量，预读下一个token */</span></span><br><span class="line">        BigDecimal decimalValue = lexer.decimalValue();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) decimalValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class="line">        <span class="comment">/** 浮点数字面量，预读下一个token */</span></span><br><span class="line">        BigDecimal val = lexer.decimalValue();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object value = parser.parse();</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> <span class="comment">//</span></span><br><span class="line">        ? <span class="keyword">null</span> <span class="comment">//</span></span><br><span class="line">        : (T) TypeUtils.castToBigDecimal(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringCodec反序列化"><a href="#StringCodec反序列化" class="headerlink" title="StringCodec反序列化"></a>StringCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clazz == StringBuffer.class) &#123;</span><br><span class="line">        <span class="comment">/** 将解析的字符序列转换成StringBuffer */</span></span><br><span class="line">        <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">            <span class="comment">/** 字符串字面量，预读下一个token */</span></span><br><span class="line">            String val = lexer.stringVal();</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> StringBuffer(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object value = parser.parse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> StringBuffer(value.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == StringBuilder.class) &#123;</span><br><span class="line">        <span class="comment">/** 将解析的字符序列转换成StringBuilder */</span></span><br><span class="line">        <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">            String val = lexer.stringVal();</span><br><span class="line">            <span class="comment">/** 字符串字面量，预读下一个token */</span></span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">new</span> StringBuilder(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object value = parser.parse();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">new</span> StringBuilder(value.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) deserialze(parser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.getLexer();</span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">        <span class="comment">/** 字符串字面量，预读下一个token */</span></span><br><span class="line">        String val = lexer.stringVal();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">        <span class="comment">/** 整型字面量，预读下一个token */</span></span><br><span class="line">        String val = lexer.numberString();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> (T) val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object value = parser.parse();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) value.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectArrayCodec反序列化"><a href="#ObjectArrayCodec反序列化" class="headerlink" title="ObjectArrayCodec反序列化"></a>ObjectArrayCodec反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> JSONLexer lexer = parser.lexer;</span><br><span class="line">    <span class="keyword">int</span> token = lexer.token();</span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.NULL) &#123;</span><br><span class="line">        <span class="comment">/** 解析到Null，预读下一个token */</span></span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.LITERAL_STRING || token == JSONToken.HEX) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = lexer.bytesValue();</span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes.length == <span class="number">0</span> &amp;&amp; type != <span class="keyword">byte</span>[].class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T) bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class componentClass;</span><br><span class="line">    Type componentType;</span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> GenericArrayType) &#123;</span><br><span class="line">        GenericArrayType clazz = (GenericArrayType) type;</span><br><span class="line">        <span class="comment">/** 获取泛型数组真实参数类型 */</span></span><br><span class="line">        componentType = clazz.getGenericComponentType();</span><br><span class="line">        <span class="keyword">if</span> (componentType <span class="keyword">instanceof</span> TypeVariable) &#123;</span><br><span class="line">            TypeVariable typeVar = (TypeVariable) componentType;</span><br><span class="line">            Type objType = parser.getContext().type;</span><br><span class="line">            <span class="keyword">if</span> (objType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                <span class="comment">/** 获取泛型参数化类型，eg: Collection&lt;String&gt; */</span></span><br><span class="line">                ParameterizedType objParamType = (ParameterizedType) objType;</span><br><span class="line">                Type objRawType = objParamType.getRawType();</span><br><span class="line">                Type actualType = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (objRawType <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                    <span class="comment">/** 遍历Class包含的参数化类型，查找与泛型数组类型名字一致的作为真实类型 */</span></span><br><span class="line">                    TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objTypeParams.length; ++i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (objTypeParams[i].getName().equals(typeVar.getName())) &#123;</span><br><span class="line">                            actualType = objParamType.getActualTypeArguments()[i];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (actualType <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                    componentClass = (Class) actualType;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    componentClass = Object.class;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取数组类型上界</span></span><br><span class="line">                componentClass = TypeUtils.getClass(typeVar.getBounds()[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            componentClass = TypeUtils.getClass(componentType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 非泛型数组，普通对象数组 */</span></span><br><span class="line">        Class clazz = (Class) type;</span><br><span class="line">        componentType = componentClass = clazz.getComponentType();</span><br><span class="line">    &#125;</span><br><span class="line">    JSONArray array = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="comment">/** 根据token解析数组元素放到array中 */</span></span><br><span class="line">    parser.parseArray(componentType, array, fieldName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) toObjectArray(parser, componentClass, array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaBeanDeserializer反序列化"><a href="#JavaBeanDeserializer反序列化" class="headerlink" title="JavaBeanDeserializer反序列化"></a>JavaBeanDeserializer反序列化</h3><p>为了节省冗余的分析，我们主要分析最复杂的默认<code>JavaBeanDeserializer</code>反序列化实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JavaBeanDeserializer</span><span class="params">(ParserConfig config, JavaBeanInfo beanInfo)</span></span>&#123;</span><br><span class="line">     <span class="comment">/** java对象类名称 */</span></span><br><span class="line">     <span class="keyword">this</span>.clazz = beanInfo.clazz;</span><br><span class="line">     <span class="keyword">this</span>.beanInfo = beanInfo;</span><br><span class="line"></span><br><span class="line">     Map&lt;String, FieldDeserializer&gt; alterNameFieldDeserializers = <span class="keyword">null</span>;</span><br><span class="line">     sortedFieldDeserializers = <span class="keyword">new</span> FieldDeserializer[beanInfo.sortedFields.length];</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  给已排序的字段创建反序列化实例，如果字段有别名，</span></span><br><span class="line"><span class="comment">      *  关联别名到反序列化的映射</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = beanInfo.sortedFields.length; i &lt; size; ++i) &#123;</span><br><span class="line">         FieldInfo fieldInfo = beanInfo.sortedFields[i];</span><br><span class="line">         FieldDeserializer fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);</span><br><span class="line"></span><br><span class="line">         sortedFieldDeserializers[i] = fieldDeserializer;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (String name : fieldInfo.alternateNames) &#123;</span><br><span class="line">             <span class="keyword">if</span> (alterNameFieldDeserializers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 alterNameFieldDeserializers = <span class="keyword">new</span> HashMap&lt;String, FieldDeserializer&gt;();</span><br><span class="line">             &#125;</span><br><span class="line">             alterNameFieldDeserializers.put(name, fieldDeserializer);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">this</span>.alterNameFieldDeserializers = alterNameFieldDeserializers;</span><br><span class="line"></span><br><span class="line">     fieldDeserializers = <span class="keyword">new</span> FieldDeserializer[beanInfo.fields.length];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = beanInfo.fields.length; i &lt; size; ++i) &#123;</span><br><span class="line">         FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class="line">         <span class="comment">/** 采用二分法在sortedFieldDeserializers中查找已创建的反序列化类型 */</span></span><br><span class="line">         FieldDeserializer fieldDeserializer = getFieldDeserializer(fieldInfo.name);</span><br><span class="line">         fieldDeserializers[i] = fieldDeserializer;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>构造函数就是简单构造类字段对应的反序列化实例而已，接下来看下关键实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">deserialze</span><span class="params">(DefaultJSONParser parser,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Type type,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object fieldName,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span> features,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">int</span>[] setFlags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == JSON.class || type == JSONObject.class) &#123;</span><br><span class="line">        <span class="comment">/** 根据当前token类型判断解析对象 */</span></span><br><span class="line">        <span class="keyword">return</span> (T) parser.parse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> JSONLexerBase lexer = (JSONLexerBase) parser.lexer;</span><br><span class="line">    <span class="keyword">final</span> ParserConfig config = parser.getConfig();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> token = lexer.token();</span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.NULL) &#123;</span><br><span class="line">        <span class="comment">/** 解析null，预读下一个token并返回 */</span></span><br><span class="line">        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ParseContext context = parser.getContext();</span><br><span class="line">    <span class="keyword">if</span> (object != <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">        context = context.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    ParseContext childContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; fieldValues = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class="line">            lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">            <span class="comment">/** 遇到&#125;认为遇到对象结束，尝试创建实例对象 */</span></span><br><span class="line">            <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                object = createInstance(parser, type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (T) object;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token == JSONToken.LBRACKET) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> mask = Feature.SupportArrayToBean.mask;</span><br><span class="line">            <span class="keyword">boolean</span> isSupportArrayToBean = (beanInfo.parserFeatures &amp; mask) != <span class="number">0</span></span><br><span class="line">                                           || lexer.isEnabled(Feature.SupportArrayToBean)</span><br><span class="line">                                           || (features &amp; mask) != <span class="number">0</span></span><br><span class="line">                                           ;</span><br><span class="line">            <span class="keyword">if</span> (isSupportArrayToBean) &#123;</span><br><span class="line">                <span class="comment">/** 将数组值反序列化为对象，根据sortedFieldDeserializers依次写字段值 */</span></span><br><span class="line">                <span class="keyword">return</span> deserialzeArrayMapping(parser, type, fieldName, object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token != JSONToken.LBRACE &amp;&amp; token != JSONToken.COMMA) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lexer.isBlankInput()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">                String strVal = lexer.stringVal();</span><br><span class="line">                <span class="comment">/** 读到空值字符串，返回null */</span></span><br><span class="line">                <span class="keyword">if</span> (strVal.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    lexer.nextToken();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (beanInfo.jsonType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 探测是否是枚举类型 */</span></span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; seeAlsoClass : beanInfo.jsonType.seeAlso()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Enum.class.isAssignableFrom(seeAlsoClass)) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Enum&lt;?&gt; e = Enum.valueOf((Class&lt;Enum&gt;) seeAlsoClass, strVal);</span><br><span class="line">                                <span class="keyword">return</span> (T) e;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                                <span class="comment">// skip</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token == JSONToken.LITERAL_ISO8601_DATE) &#123;</span><br><span class="line">                Calendar calendar = lexer.getCalendar();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (token == JSONToken.LBRACKET &amp;&amp; lexer.getCurrent() == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 包含零元素的数组 */</span></span><br><span class="line">                lexer.next();</span><br><span class="line">                lexer.nextToken();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            StringBuffer buf = (<span class="keyword">new</span> StringBuffer()) <span class="comment">//</span></span><br><span class="line">                                                    .append(<span class="string">"syntax error, expect &#123;, actual "</span>) <span class="comment">//</span></span><br><span class="line">                                                    .append(lexer.tokenName()) <span class="comment">//</span></span><br><span class="line">                                                    .append(<span class="string">", pos "</span>) <span class="comment">//</span></span><br><span class="line">                                                    .append(lexer.pos());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldName <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                buf <span class="comment">//</span></span><br><span class="line">                    .append(<span class="string">", fieldName "</span>) <span class="comment">//</span></span><br><span class="line">                    .append(fieldName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            buf.append(<span class="string">", fastjson-version "</span>).append(JSON.VERSION);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(buf.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">            parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String typeKey = beanInfo.typeKey;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fieldIndex = <span class="number">0</span>;; fieldIndex++) &#123;</span><br><span class="line">            String key = <span class="keyword">null</span>;</span><br><span class="line">            FieldDeserializer fieldDeser = <span class="keyword">null</span>;</span><br><span class="line">            FieldInfo fieldInfo = <span class="keyword">null</span>;</span><br><span class="line">            Class&lt;?&gt; fieldClass = <span class="keyword">null</span>;</span><br><span class="line">            JSONField feildAnnotation = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">/** 检查是否所有字段都已经处理 */</span></span><br><span class="line">            <span class="keyword">if</span> (fieldIndex &lt; sortedFieldDeserializers.length) &#123;</span><br><span class="line">                fieldDeser = sortedFieldDeserializers[fieldIndex];</span><br><span class="line">                fieldInfo = fieldDeser.fieldInfo;</span><br><span class="line">                fieldClass = fieldInfo.fieldClass;</span><br><span class="line">                feildAnnotation = fieldInfo.getAnnotation();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> matchField = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">boolean</span> valueParsed = <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">            Object fieldValue = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (fieldDeser != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] name_chars = fieldInfo.name_chars;</span><br><span class="line">                <span class="keyword">if</span> (fieldClass == <span class="keyword">int</span>.class || fieldClass == Integer.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描整数值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldInt(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">long</span>.class || fieldClass == Long.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描长整型值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldLong(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == String.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描字符串值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldString(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == java.util.Date.class &amp;&amp; fieldInfo.format == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描日期值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldDate(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == BigDecimal.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描高精度值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldDecimal(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == BigInteger.class) &#123;</span><br><span class="line">                    fieldValue = lexer.scanFieldBigInteger(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">boolean</span>.class || fieldClass == Boolean.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描boolean值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldBoolean(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">float</span>.class || fieldClass == Float.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描浮点值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldFloat(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">double</span>.class || fieldClass == Double.class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描double值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldDouble(name_chars);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;  </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass.isEnum()</span><br><span class="line">                        &amp;&amp; parser.getConfig().getDeserializer(fieldClass) <span class="keyword">instanceof</span> EnumDeserializer</span><br><span class="line">                        &amp;&amp; (feildAnnotation == <span class="keyword">null</span> || feildAnnotation.deserializeUsing() == Void.class)</span><br><span class="line">                        ) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fieldDeser <span class="keyword">instanceof</span> DefaultFieldDeserializer) &#123;</span><br><span class="line">                        ObjectDeserializer fieldValueDeserilizer = ((DefaultFieldDeserializer) fieldDeser).fieldValueDeserilizer;</span><br><span class="line">                        fieldValue = <span class="keyword">this</span>.scanEnum(lexer, name_chars, fieldValueDeserilizer);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            matchField = <span class="keyword">true</span>;</span><br><span class="line">                            valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">int</span>[].class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描整型数组值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldIntArray(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">float</span>[].class) &#123;</span><br><span class="line">                    fieldValue = lexer.scanFieldFloatArray(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == <span class="keyword">float</span>[][].class) &#123;</span><br><span class="line">                    <span class="comment">/** 扫描浮点数组值 */</span></span><br><span class="line">                    fieldValue = lexer.scanFieldFloatArray2(name_chars);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        matchField = <span class="keyword">true</span>;</span><br><span class="line">                        valueParsed = <span class="keyword">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.matchField(name_chars)) &#123;</span><br><span class="line">                    matchField = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 如果当前字符串的json不匹配当前字段名称 */</span></span><br><span class="line">            <span class="keyword">if</span> (!matchField) &#123;</span><br><span class="line">                <span class="comment">/** 将当前的字段名称加入符号表 */</span></span><br><span class="line">                key = lexer.scanSymbol(parser.symbolTable);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 当前是无效的字段标识符，比如是,等符号 */</span></span><br><span class="line">                <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    token = lexer.token();</span><br><span class="line">                    <span class="keyword">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class="line">                        <span class="comment">/** 结束花括号, 预读下一个token */</span></span><br><span class="line">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (token == JSONToken.COMMA) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"$ref"</span> == key &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class="line">                    token = lexer.token();</span><br><span class="line">                    <span class="keyword">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">                        String ref = lexer.stringVal();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"@"</span>.equals(ref)) &#123;</span><br><span class="line">                            object = context.object;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">".."</span>.equals(ref)) &#123;</span><br><span class="line">                            ParseContext parentContext = context.parent;</span><br><span class="line">                            <span class="keyword">if</span> (parentContext.object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                object = parentContext.object;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                parser.addResolveTask(<span class="keyword">new</span> ResolveTask(parentContext, ref));</span><br><span class="line">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"$"</span>.equals(ref)) &#123;</span><br><span class="line">                            ParseContext rootContext = context;</span><br><span class="line">                            <span class="keyword">while</span> (rootContext.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                rootContext = rootContext.parent;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (rootContext.object != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                object = rootContext.object;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                parser.addResolveTask(<span class="keyword">new</span> ResolveTask(rootContext, ref));</span><br><span class="line">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Object refObj = parser.resolveReference(ref);</span><br><span class="line">                            <span class="keyword">if</span> (refObj != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                object = refObj;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                parser.addResolveTask(<span class="keyword">new</span> ResolveTask(context, ref));</span><br><span class="line">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"illegal ref, "</span> + JSONToken.name(token));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    lexer.nextToken(JSONToken.RBRACE);</span><br><span class="line">                    <span class="keyword">if</span> (lexer.token() != JSONToken.RBRACE) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"illegal ref"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">                    parser.setContext(context, object, fieldName);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> (T) object;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((typeKey != <span class="keyword">null</span> &amp;&amp; typeKey.equals(key))</span><br><span class="line">                        || JSON.DEFAULT_TYPE_KEY == key) &#123;</span><br><span class="line">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class="line">                    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">                        String typeName = lexer.stringVal();</span><br><span class="line">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/** 忽略字符串中包含<span class="doctag">@type</span>解析 */</span></span><br><span class="line">                        <span class="keyword">if</span> (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class="line">                                lexer.nextToken();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line"></span><br><span class="line">                        <span class="comment">/** 根据枚举seeAlso查找反序列化实例 */</span></span><br><span class="line">                        ObjectDeserializer deserializer = getSeeAlso(config, <span class="keyword">this</span>.beanInfo, typeName);</span><br><span class="line">                        Class&lt;?&gt; userType = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (deserializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">/** 无法匹配，查找类对应的泛型或者参数化类型关联的反序列化实例 */</span></span><br><span class="line">                            Class&lt;?&gt; expectClass = TypeUtils.getClass(type);</span><br><span class="line">                            userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());</span><br><span class="line">                            deserializer = parser.getConfig().getDeserializer(userType);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Object typedObject = deserializer.deserialze(parser, userType, fieldName);</span><br><span class="line">                        <span class="keyword">if</span> (deserializer <span class="keyword">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class="line">                            JavaBeanDeserializer javaBeanDeserializer = (JavaBeanDeserializer) deserializer;</span><br><span class="line">                            <span class="keyword">if</span> (typeKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                FieldDeserializer typeKeyFieldDeser = javaBeanDeserializer.getFieldDeserializer(typeKey);</span><br><span class="line">                                typeKeyFieldDeser.setValue(typedObject, typeName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> (T) typedObject;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 第一次创建并初始化对象实例 */</span></span><br><span class="line">            <span class="keyword">if</span> (object == <span class="keyword">null</span> &amp;&amp; fieldValues == <span class="keyword">null</span>) &#123;</span><br><span class="line">                object = createInstance(parser, type);</span><br><span class="line">                <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fieldValues = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="keyword">this</span>.fieldDeserializers.length);</span><br><span class="line">                &#125;</span><br><span class="line">                childContext = parser.setContext(context, object, fieldName);</span><br><span class="line">                <span class="keyword">if</span> (setFlags == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    setFlags = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">this</span>.fieldDeserializers.length / <span class="number">32</span>) + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (matchField) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!valueParsed) &#123;</span><br><span class="line">                    <span class="comment">/** json串当前满足字段名称，并且没有解析过值 ，</span></span><br><span class="line"><span class="comment">                     *  直接使用当前字段关联的反序列化实例解析</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    fieldDeser.parseField(parser, object, type, fieldValues);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">/** 值已经解析过了，存储到map中 */</span></span><br><span class="line">                        fieldValues.put(fieldInfo.name, fieldValue);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">/** 字段值是null，排除int,long,float,double,boolean */</span></span><br><span class="line">                        <span class="keyword">if</span> (fieldClass != <span class="keyword">int</span>.class</span><br><span class="line">                                &amp;&amp; fieldClass != <span class="keyword">long</span>.class</span><br><span class="line">                                &amp;&amp; fieldClass != <span class="keyword">float</span>.class</span><br><span class="line">                                &amp;&amp; fieldClass != <span class="keyword">double</span>.class</span><br><span class="line">                                &amp;&amp; fieldClass != <span class="keyword">boolean</span>.class</span><br><span class="line">                                ) &#123;</span><br><span class="line">                            fieldDeser.setValue(object, fieldValue);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        fieldDeser.setValue(object, fieldValue);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (setFlags != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> flagIndex = fieldIndex / <span class="number">32</span>;</span><br><span class="line">                        <span class="keyword">int</span> bitIndex = fieldIndex % <span class="number">32</span>;</span><br><span class="line">                        setFlags[flagIndex] |= (<span class="number">1</span> &gt;&gt; bitIndex);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (lexer.matchStat == JSONLexer.END) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 字段名称当前和json串不匹配，通常顺序或者字段增加或者缺少，</span></span><br><span class="line"><span class="comment">                 *  根据key查找反序列化实例解析</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">boolean</span> match = parseField(parser, key, object, type, fieldValues, setFlags);</span><br><span class="line">                <span class="keyword">if</span> (!match) &#123;</span><br><span class="line">                    <span class="comment">/** 遇到封闭花括号，与读下一个token，跳出循环 */</span></span><br><span class="line">                    <span class="keyword">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class="line">                        lexer.nextToken();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.token() == JSONToken.COLON) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error, unexpect token ':'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lexer.token() == JSONToken.COMMA) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class="line">                lexer.nextToken(JSONToken.COMMA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error, unexpect token "</span> + JSONToken.name(lexer.token()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldValues == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/** 第一次创建并初始化对象实例 */</span></span><br><span class="line">                object = createInstance(parser, type);</span><br><span class="line">                <span class="keyword">if</span> (childContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    childContext = parser.setContext(context, object, fieldName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> (T) object;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 提取构造函数参数名称 */</span></span><br><span class="line">            String[] paramNames = beanInfo.creatorConstructorParameters;</span><br><span class="line">            <span class="keyword">final</span> Object[] params;</span><br><span class="line">            <span class="keyword">if</span> (paramNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                params = <span class="keyword">new</span> Object[paramNames.length];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramNames.length; i++) &#123;</span><br><span class="line">                    String paramName = paramNames[i];</span><br><span class="line"></span><br><span class="line">                    Object param = fieldValues.remove(paramName);</span><br><span class="line">                    <span class="comment">/** 解析过的字段不包含当前参数名字 */</span></span><br><span class="line">                    <span class="keyword">if</span> (param == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Type fieldType = beanInfo.creatorConstructorParameterTypes[i];</span><br><span class="line">                        FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class="line">                        <span class="comment">/** 探测并设置类型默认值 */</span></span><br><span class="line">                        <span class="keyword">if</span> (fieldType == <span class="keyword">byte</span>.class) &#123;</span><br><span class="line">                            param = (<span class="keyword">byte</span>) <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">short</span>.class) &#123;</span><br><span class="line">                            param = (<span class="keyword">short</span>) <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">int</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">long</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0L</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">float</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0F</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">double</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0</span>D;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">boolean</span>.class) &#123;</span><br><span class="line">                            param = Boolean.FALSE;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == String.class</span><br><span class="line">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class="number">0</span>) &#123;</span><br><span class="line">                            param = <span class="string">""</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    params[i] = param;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 根据字段探测并初始化构造函数参数默认值 */</span></span><br><span class="line">                FieldInfo[] fieldInfoList = beanInfo.fields;</span><br><span class="line">                <span class="keyword">int</span> size = fieldInfoList.length;</span><br><span class="line">                params = <span class="keyword">new</span> Object[size];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                    FieldInfo fieldInfo = fieldInfoList[i];</span><br><span class="line">                    Object param = fieldValues.get(fieldInfo.name);</span><br><span class="line">                    <span class="keyword">if</span> (param == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Type fieldType = fieldInfo.fieldType;</span><br><span class="line">                        <span class="keyword">if</span> (fieldType == <span class="keyword">byte</span>.class) &#123;</span><br><span class="line">                            param = (<span class="keyword">byte</span>) <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">short</span>.class) &#123;</span><br><span class="line">                            param = (<span class="keyword">short</span>) <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">int</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">long</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0L</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">float</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0F</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">double</span>.class) &#123;</span><br><span class="line">                            param = <span class="number">0</span>D;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">boolean</span>.class) &#123;</span><br><span class="line">                            param = Boolean.FALSE;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == String.class</span><br><span class="line">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class="number">0</span>) &#123;</span><br><span class="line">                            param = <span class="string">""</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    params[i] = param;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object = beanInfo.creatorConstructor.newInstance(params);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"create instance error, "</span> + paramNames + <span class="string">", "</span></span><br><span class="line">                                            + beanInfo.creatorConstructor.toGenericString(), e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (paramNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 剩余字段查找反序列化器set值 */</span></span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : fieldValues.entrySet()) &#123;</span><br><span class="line">                        FieldDeserializer fieldDeserializer = getFieldDeserializer(entry.getKey());</span><br><span class="line">                        <span class="keyword">if</span> (fieldDeserializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            fieldDeserializer.setValue(object, entry.getValue());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beanInfo.factoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object = beanInfo.factoryMethod.invoke(<span class="keyword">null</span>, params);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"create factory method error, "</span> + beanInfo.factoryMethod.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            childContext.object = object;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 检查是否扩展后置方法buildMethod，如果有进行调用 */</span></span><br><span class="line">        Method buildMethod = beanInfo.buildMethod;</span><br><span class="line">        <span class="keyword">if</span> (buildMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) object;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Object builtObj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            builtObj = buildMethod.invoke(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"build object error"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (T) builtObj;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (childContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            childContext.object = object;</span><br><span class="line">        &#125;</span><br><span class="line">        parser.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码实在又臭又长，实际做的事情如下：</p><ol><li>根据类所有的字段，字段类型进行json串进行匹配，首先检查json串的值是否和当前字段名称相等，如果相等认为匹配成功，会创建实例对象并且把解析字段值set进去。</li><li>如果当前json串顺序和java对象字段不一致怎么办，这个时候我字段又全部遍历完了，fastjson会自动把当前解析的字段名称加入符号表中，然后查找字段名称对应的反序列化实例进行set值操作</li><li>当前实现提供了解析对象后buildMethod扩展点，如果提供了会进行回调然后返回</li></ol><p>值得一提的是构造函数处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createInstance</span><span class="params">(DefaultJSONParser parser, Type type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">            <span class="comment">/** 针对反序列化时接口类型的，通过jdk冬天代理拦截put和get等操作，</span></span><br><span class="line"><span class="comment">             *  进行set或者put值的操作值会存储在jsonobject内部的map结构</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class&lt;?&gt; clazz = (Class&lt;?&gt;) type;</span><br><span class="line">            ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="keyword">final</span> JSONObject obj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            Object proxy = Proxy.newProxyInstance(loader, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; clazz &#125;, obj);</span><br><span class="line">            <span class="keyword">return</span> proxy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 忽略没有默认构造函数和没有创建对象的工厂方法 */</span></span><br><span class="line">    <span class="keyword">if</span> (beanInfo.defaultConstructor == <span class="keyword">null</span> &amp;&amp; beanInfo.factoryMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 忽略同时存在显示构造函数和创建对象的工厂方法的场景 */</span></span><br><span class="line">    <span class="keyword">if</span> (beanInfo.factoryMethod != <span class="keyword">null</span> &amp;&amp; beanInfo.defaultConstructorParameterSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object object;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor = beanInfo.defaultConstructor;</span><br><span class="line">        <span class="comment">/** 存在默认无参构造函数 */</span></span><br><span class="line">        <span class="keyword">if</span> (beanInfo.defaultConstructorParameterSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (constructor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                object = constructor.newInstance();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 否则使用工厂方法生成对象 */</span></span><br><span class="line">                object = beanInfo.factoryMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ParseContext context = parser.getContext();</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="keyword">null</span> || context.object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"can't create non-static inner class instance."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String typeName;</span><br><span class="line">            <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                typeName = ((Class&lt;?&gt;) type).getName();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"can't create non-static inner class instance."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lastIndex = typeName.lastIndexOf(<span class="string">'$'</span>);</span><br><span class="line">            String parentClassName = typeName.substring(<span class="number">0</span>, lastIndex);</span><br><span class="line"></span><br><span class="line">            Object ctxObj = context.object;</span><br><span class="line">            String parentName = ctxObj.getClass().getName();</span><br><span class="line"></span><br><span class="line">            Object param = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!parentName.equals(parentClassName)) &#123;</span><br><span class="line">                <span class="comment">/** 处理继承过来的类 */</span></span><br><span class="line">                ParseContext parentContext = context.parent;</span><br><span class="line">                <span class="keyword">if</span> (parentContext != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; parentContext.object != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; (<span class="string">"java.util.ArrayList"</span>.equals(parentName)</span><br><span class="line">                        || <span class="string">"java.util.List"</span>.equals(parentName)</span><br><span class="line">                        || <span class="string">"java.util.Collection"</span>.equals(parentName)</span><br><span class="line">                        || <span class="string">"java.util.Map"</span>.equals(parentName)</span><br><span class="line">                        || <span class="string">"java.util.HashMap"</span>.equals(parentName))) &#123;</span><br><span class="line">                    parentName = parentContext.object.getClass().getName();</span><br><span class="line">                    <span class="keyword">if</span> (parentName.equals(parentClassName)) &#123;</span><br><span class="line">                        param = parentContext.object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 处理非静态内部类场景，</span></span><br><span class="line"><span class="comment">                 *  编译器会自动修改内部类构造函数，添加外层类实例对象作为参数，</span></span><br><span class="line"><span class="comment">                 *  ctxObj就是外层实例对象</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                param = ctxObj;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (param == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"can't create non-static inner class instance."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            object = constructor.newInstance(param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"create instance error, class "</span> + clazz.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 开启InitStringFieldAsEmpty特性，会把字符串字段初始化为空串 */</span></span><br><span class="line">    <span class="keyword">if</span> (parser != <span class="keyword">null</span></span><br><span class="line">            &amp;&amp; parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (FieldInfo fieldInfo : beanInfo.fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.fieldClass == String.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fieldInfo.set(object, <span class="string">""</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"create instance error, class "</span> + clazz.getName(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会为非静态内部类构造函数添加外层的实例对象作为第一个参数，所以在生成实例化对象的时候会从上下文中获取外层对象进行反射创建对象<code>constructor.newInstance(param)</code>。</p><p>为了更容易理解这段逻辑，提供一下单元测试可以调试：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.json.bvt.parser.deser.InnerClassDeser2#test_for_inner_class</span><br><span class="line"></span><br><span class="line">com.alibaba.json.bvt.parser.deser.InnerClassDeser3#test_for_inner_class</span><br><span class="line"></span><br><span class="line">com.alibaba.json.bvt.parser.deser.InnerClassDeser4#test_for_inner_class</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>反序列化解析介绍（十）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%80)-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%80)-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。遇到到反序列化章节，这里假定你已经阅读并理解了词法分析章节的内容。</p><p>反序列化的章节比序列化复杂一些，我认为通过调试小单元代码片段的方式有助于理解，我在适当的地方会给出单元测试入口，集中精力理解具体类型的实现。</p><p>现在，我们正式开始理解反序列化实现吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 根据指定text，返回期望的java对象类型class */</span></span><br><span class="line">    <span class="keyword">return</span> parseObject(text, clazz, <span class="keyword">new</span> Feature[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个反序列化接口可以处理对象包含任意字段类型，但是自身不能是泛型类型，原因是java的运行时类型擦除。<code>fastjson</code>给出了替代方法解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">"[&#123;&#125;,...]"</span>;</span><br><span class="line">Type listType = <span class="keyword">new</span> TypeReference&lt;List&lt;Model&gt;&gt;() &#123;&#125;.getType();</span><br><span class="line">List&lt;Model&gt; modelList = JSON.parseObject(json, listType);</span><br></pre></td></tr></table></figure><p>我们把关注点收回来，继续分析内部调用<code>parseObject</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String json, Class&lt;T&gt; clazz, Feature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) parseObject(json, (Type) clazz, ParserConfig.global, <span class="keyword">null</span>, DEFAULT_PARSER_FEATURE, features);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(String input, Type clazz, ParserConfig config, ParseProcess processor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 配置反序列化时启用的特性，比如是否允许json字符串字段不包含双引号 */</span></span><br><span class="line">    <span class="keyword">if</span> (features != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Feature feature : features) &#123;</span><br><span class="line">            featureValues |= feature.mask;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  初始化DefaultJSONParser，反序列化类型由它</span></span><br><span class="line"><span class="comment">     *  委托config查找具体序列化处理器处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(input, config, featureValues);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加拦截器 */</span></span><br><span class="line">    <span class="keyword">if</span> (processor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processor <span class="keyword">instanceof</span> ExtraTypeProvider) &#123;</span><br><span class="line">            parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (processor <span class="keyword">instanceof</span> ExtraProcessor) &#123;</span><br><span class="line">            parser.getExtraProcessors().add((ExtraProcessor) processor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (processor <span class="keyword">instanceof</span> FieldTypeResolver) &#123;</span><br><span class="line">            parser.setFieldTypeResolver((FieldTypeResolver) processor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 使用反序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class="line">    T value = (T) parser.parseObject(clazz, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 处理json内部引用协议格式对象 */</span></span><br><span class="line">    parser.handleResovleTask(value);</span><br><span class="line"></span><br><span class="line">    parser.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T) value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终反序列化接口定义了执行的大框架：</p><ol><li>创建解析配置<code>ParserConfig</code>对象，包括初始化内部反序列化实例和特性配置等。</li><li>添加反序列化拦截器</li><li>根据具体类型查找反序列化实例，执行反序列化转换</li><li>解析对象内部引用</li></ol><p>我们继续查看<code>parser.parseObject(clazz, null)</code>逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(Type type, Object fieldName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 获取json串第一个有效token */</span></span><br><span class="line">    <span class="keyword">int</span> token = lexer.token();</span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.NULL) &#123;</span><br><span class="line">        <span class="comment">/** 如果返回时null，自动预读下一个token */</span></span><br><span class="line">        lexer.nextToken();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判定token属于字符串 */</span></span><br><span class="line">    <span class="keyword">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">        <span class="comment">/** 获取byte字节数据，分为十六进制和base64编码 */</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">byte</span>[].class) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = lexer.bytesValue();</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> (T) bytes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 获取字符数组, 特殊处理String内存占用 */</span></span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">char</span>[].class) &#123;</span><br><span class="line">            String strVal = lexer.stringVal();</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">            <span class="keyword">return</span> (T) strVal.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 委托config进行特定类型查找反序列化实例 */</span></span><br><span class="line">    ObjectDeserializer derializer = config.getDeserializer(type);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 执行反序列化 */</span></span><br><span class="line">        <span class="keyword">return</span> (T) derializer.deserialze(<span class="keyword">this</span>, type, fieldName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化核心逻辑还是在委托配置查找反序列化实例，我们具体看看是如何查找反序列化实例的， 进入<code>ParserConfig#getDeserializer(java.lang.reflect.Type)</code>自己查看逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">getDeserializer</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 首先从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class="line">    ObjectDeserializer derializer = <span class="keyword">this</span>.deserializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class="line">        <span class="comment">/** 引用类型，根据特定类型再次匹配 */</span></span><br><span class="line">        <span class="keyword">return</span> getDeserializer((Class&lt;?&gt;) type, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        <span class="comment">/** 获取泛型类型原始类型 */</span></span><br><span class="line">        Type rawType = ((ParameterizedType) type).getRawType();</span><br><span class="line">        <span class="comment">/** 泛型原始类型是引用类型，根据特定类型再次匹配 */</span></span><br><span class="line">        <span class="keyword">if</span> (rawType <span class="keyword">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDeserializer((Class&lt;?&gt;) rawType, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 递归调用反序列化查找 */</span></span><br><span class="line">            <span class="keyword">return</span> getDeserializer(rawType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> WildcardType) &#123;</span><br><span class="line">        <span class="comment">/** 类型是通配符或者限定类型 */</span></span><br><span class="line">        WildcardType wildcardType = (WildcardType) type;</span><br><span class="line">        Type[] upperBounds = wildcardType.getUpperBounds();</span><br><span class="line">        <span class="keyword">if</span> (upperBounds.length == <span class="number">1</span>) &#123;</span><br><span class="line">            Type upperBoundType = upperBounds[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">/** 获取泛型上界(? extends T)，根据特定类型再次匹配 */</span></span><br><span class="line">            <span class="keyword">return</span> getDeserializer(upperBoundType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果无法匹配到，使用默认JavaObjectDeserializer反序列化 */</span></span><br><span class="line">    <span class="keyword">return</span> JavaObjectDeserializer.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>反序列化匹配<code>getDeserializer(Type)</code>主要特定处理了泛型类型，取出泛型类型真实类型还是委托内部<code>ParserConfig#getDeserializer(java.lang.Class&lt;?&gt;, java.lang.reflect.Type)</code>进行精确类型查找：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 首先从内部已经注册查找特定type的反序列化实例 */</span></span><br><span class="line">    ObjectDeserializer derializer = deserializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">        type = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 再次从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class="line">    derializer = deserializers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; mappingTo = annotation.mappingTo();</span><br><span class="line">            <span class="comment">/** 根据类型注解指定的反序列化类型 */</span></span><br><span class="line">            <span class="keyword">if</span> (mappingTo != Void.class) &#123;</span><br><span class="line">                <span class="keyword">return</span> getDeserializer(mappingTo, mappingTo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type <span class="keyword">instanceof</span> WildcardType || type <span class="keyword">instanceof</span> TypeVariable || type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">        <span class="comment">/** 根据泛型真实类型查找反序列化实例 */</span></span><br><span class="line">        derializer = deserializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 获取class名称，进行类型匹配(可以支持高版本jdk和三方库) */</span></span><br><span class="line">    String className = clazz.getName();</span><br><span class="line">    className = className.replace(<span class="string">'$'</span>, <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">"java.awt."</span>)</span><br><span class="line">        &amp;&amp; AwtCodec.support(clazz)) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  如果class的name是"java.awt."开头 并且</span></span><br><span class="line"><span class="comment">         *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!awtError) &#123;</span><br><span class="line">            String[] names = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                    <span class="string">"java.awt.Point"</span>,</span><br><span class="line">                    <span class="string">"java.awt.Font"</span>,</span><br><span class="line">                    <span class="string">"java.awt.Rectangle"</span>,</span><br><span class="line">                    <span class="string">"java.awt.Color"</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                        <span class="comment">/** 如果系统支持4中类型， 使用AwtCodec 反序列化 */</span></span><br><span class="line">                        deserializers.put(Class.forName(name), derializer = AwtCodec.instance);</span><br><span class="line">                        <span class="keyword">return</span> derializer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">                awtError = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            derializer = AwtCodec.instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!jdk8Error) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(<span class="string">"java.time."</span>)) &#123;</span><br><span class="line">                String[] names = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                        <span class="string">"java.time.LocalDateTime"</span>,</span><br><span class="line">                        <span class="string">"java.time.LocalDate"</span>,</span><br><span class="line">                        <span class="string">"java.time.LocalTime"</span>,</span><br><span class="line">                        <span class="string">"java.time.ZonedDateTime"</span>,</span><br><span class="line">                        <span class="string">"java.time.OffsetDateTime"</span>,</span><br><span class="line">                        <span class="string">"java.time.OffsetTime"</span>,</span><br><span class="line">                        <span class="string">"java.time.ZoneOffset"</span>,</span><br><span class="line">                        <span class="string">"java.time.ZoneRegion"</span>,</span><br><span class="line">                        <span class="string">"java.time.ZoneId"</span>,</span><br><span class="line">                        <span class="string">"java.time.Period"</span>,</span><br><span class="line">                        <span class="string">"java.time.Duration"</span>,</span><br><span class="line">                        <span class="string">"java.time.Instant"</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                        <span class="comment">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 反序列化 */</span></span><br><span class="line">                        deserializers.put(Class.forName(name), derializer = Jdk8DateCodec.instance);</span><br><span class="line">                        <span class="keyword">return</span> derializer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">"java.util.Optional"</span>)) &#123;</span><br><span class="line">                String[] names = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                        <span class="string">"java.util.Optional"</span>,</span><br><span class="line">                        <span class="string">"java.util.OptionalDouble"</span>,</span><br><span class="line">                        <span class="string">"java.util.OptionalInt"</span>,</span><br><span class="line">                        <span class="string">"java.util.OptionalLong"</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                        <span class="comment">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 反序列化 */</span></span><br><span class="line">                        deserializers.put(Class.forName(name), derializer = OptionalCodec.instance);</span><br><span class="line">                        <span class="keyword">return</span> derializer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">            jdk8Error = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (className.equals(<span class="string">"java.nio.file.Path"</span>)) &#123;</span><br><span class="line">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == Map.Entry.class) &#123;</span><br><span class="line">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类 */</span></span><br><span class="line">        <span class="keyword">for</span> (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,</span><br><span class="line">                                                                        classLoader)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                deserializers.put(forType, autowired);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        derializer = deserializers.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (derializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> derializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz.isEnum()) &#123;</span><br><span class="line">        Class&lt;?&gt; deserClass = <span class="keyword">null</span>;</span><br><span class="line">        JSONType jsonType = clazz.getAnnotation(JSONType.class);</span><br><span class="line">        <span class="keyword">if</span> (jsonType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deserClass = jsonType.deserializer();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/** 如果是枚举类型并使用了注解，使用注解指定的反序列化 */</span></span><br><span class="line">                derializer = (ObjectDeserializer) deserClass.newInstance();</span><br><span class="line">                deserializers.put(clazz, derializer);</span><br><span class="line">                <span class="keyword">return</span> derializer;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable error) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 如果是枚举类型，使用EnumSerializer反序列化 */</span></span><br><span class="line">        derializer = <span class="keyword">new</span> EnumDeserializer(clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">        <span class="comment">/** 如果是数组类型，使用数组对象反序列化实例 */</span></span><br><span class="line">        derializer = ObjectArrayCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class</span><br><span class="line">               || clazz == ArrayList.class) &#123;</span><br><span class="line">        <span class="comment">/** 如果class实现集合接口，使用CollectionCodec反序列化 */</span></span><br><span class="line">        derializer = CollectionCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="comment">/** 如果class实现类Collection接口，使用CollectionCodec反序列化 */</span></span><br><span class="line">        derializer = CollectionCodec.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="comment">/** 如果class实现Map接口，使用MapDeserializer反序列化 */</span></span><br><span class="line">        derializer = MapDeserializer.instance;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="comment">/** 如果class继承Throwable类，使用ThrowableDeserializer反序列化 */</span></span><br><span class="line">        derializer = <span class="keyword">new</span> ThrowableDeserializer(<span class="keyword">this</span>, clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PropertyProcessable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        derializer = <span class="keyword">new</span> PropertyProcessableDeserializer((Class&lt;PropertyProcessable&gt;)clazz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 默认使用JavaBeanDeserializer反序列化(没有开启asm情况下) */</span></span><br><span class="line">        derializer = createJavaBeanDeserializer(clazz, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 加入cache，避免同类型反复创建 */</span></span><br><span class="line">    putDeserializer(type, derializer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> derializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>其实查找反序列化和之前提到了序列化类似，根据特定类型匹配接口或者继承实现类查找的，这里指的关注一下创建通用反序列化实例 <code>createJavaBeanDeserializer(clazz, type)</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectDeserializer <span class="title">createJavaBeanDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> asmEnable = <span class="keyword">this</span>.asmEnable &amp; !<span class="keyword">this</span>.fieldBased;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  ... 省略判定是否开启asm逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 创建通用Java对象反序列化实例JavaBeanDeserializer */</span></span><br><span class="line">    <span class="keyword">if</span> (!asmEnable) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanDeserializer(<span class="keyword">this</span>, clazz, type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  ... 省略创建基于asm的反序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于自定义类反序列化，如果没有开启<code>asm</code>的情况下，会使用<code>JavaBeanDeserializer</code>进行反序列化转换，这里有意屏蔽基于<code>asm</code>直接操纵字节码实现，后面会单独列一个章节对该主题深入讲解。</p><p>接下来会进入反序列化实现细节深入理解。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>词法和语法解析（九）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90-(%E4%B8%89)-%E9%92%88%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90-(%E4%B8%89)-%E9%92%88%E5%AF%B9%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="JSON-Token解析"><a href="#JSON-Token解析" class="headerlink" title="JSON Token解析"></a>JSON Token解析</h3><p>这个章节主要讨论关于对象字段相关词法解析的api。</p><h3 id="JSONLexerBase成员函数"><a href="#JSONLexerBase成员函数" class="headerlink" title="JSONLexerBase成员函数"></a>JSONLexerBase成员函数</h3><p>这里讲解主要挑选具有代表性的api进行讲解，同时对于极其相似的api不冗余分析，可以参考代码阅读。</p><h4 id="Int类型字段解析"><a href="#Int类型字段解析" class="headerlink" title="Int类型字段解析"></a>Int类型字段解析</h4><p>当反序列化<code>java</code>对象遇到整型<code>int.class</code>字段会调用该方法解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scanInt</span><span class="params">(<span class="keyword">char</span> expectNext)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 取整数第一个字符判断是否是引号 */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quote = chLocal == <span class="string">'"'</span>;</span><br><span class="line">    <span class="keyword">if</span> (quote) &#123;</span><br><span class="line">        <span class="comment">/** 如果是双引号，取第一个数字字符 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> negative = chLocal == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        <span class="comment">/** 如果是负数，继续取下一个字符 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="comment">/** 是数字类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        value = chLocal - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/** 循环将字符转换成数字 */</span></span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'.'</span>) &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'n'</span> &amp;&amp; charAt(bp + offset) == <span class="string">'u'</span> &amp;&amp; charAt(bp + offset + <span class="number">1</span>) == <span class="string">'l'</span> &amp;&amp; charAt(bp + offset + <span class="number">2</span>) == <span class="string">'l'</span>) &#123;</span><br><span class="line">        <span class="comment">/** 匹配到null */</span></span><br><span class="line">        matchStat = VALUE_NULL;</span><br><span class="line">        value = <span class="number">0</span>;</span><br><span class="line">        offset += <span class="number">3</span>;</span><br><span class="line">        <span class="comment">/** 读取null后面的一个字符 */</span></span><br><span class="line">        chLocal = charAt(bp + offset++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (quote &amp;&amp; chLocal == <span class="string">'"'</span>) &#123;</span><br><span class="line">            chLocal = charAt(bp + offset++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/** 如果读取null后面有逗号，认为结束 */</span></span><br><span class="line">            <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.COMMA;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">']'</span>) &#123;</span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.RBRACKET;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">                <span class="comment">/** 忽略空白字符 */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">                chLocal = charAt(bp + offset++);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">/** 根据期望字符用于结束匹配 */</span></span><br><span class="line">        <span class="keyword">if</span> (chLocal == expectNext) &#123;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">            matchStat = VALUE;</span><br><span class="line">            token = JSONToken.COMMA;</span><br><span class="line">            <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 忽略空白字符 */</span></span><br><span class="line">            <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">                chLocal = charAt(bp + (offset++));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>com.alibaba.fastjson.parser.JSONLexerBase#scanInt(char)</code>方法考虑了数字加引号的情况，当遇到下列情况认为匹配失败：</p><ol><li>扫描遇到的数字遇到标点符号</li><li>扫描的数字范围溢出</li><li>扫描到的非数字并且不是null</li><li>忽略空白字符的情况下，读取数字后结束符和期望expectNext不一致</li></ol><p><code>fastjson</code> 还提供第二种接口，根据token识别数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Number <span class="title">integerValue</span><span class="params">()</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (np == -<span class="number">1</span>) &#123;</span><br><span class="line">        np = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** np是token开始索引, sp是buffer索引，也代表buffer字符个数 */</span></span><br><span class="line">    <span class="keyword">int</span> i = np, max = np + sp;</span><br><span class="line">    <span class="keyword">long</span> limit;</span><br><span class="line">    <span class="keyword">long</span> multmin;</span><br><span class="line">    <span class="keyword">int</span> digit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> type = <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 探测数字类型最后一位是否带类型 */</span></span><br><span class="line">    <span class="keyword">switch</span> (charAt(max - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">            max--;</span><br><span class="line">            type = <span class="string">'L'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">            max--;</span><br><span class="line">            type = <span class="string">'S'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">            max--;</span><br><span class="line">            type = <span class="string">'B'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 探测数字首字符是否是符号 */</span></span><br><span class="line">    <span class="keyword">if</span> (charAt(np) == <span class="string">'-'</span>) &#123;</span><br><span class="line">        negative = <span class="keyword">true</span>;</span><br><span class="line">        limit = Long.MIN_VALUE;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        limit = -Long.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">    multmin = MULTMIN_RADIX_TEN;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; max) &#123;</span><br><span class="line">        <span class="comment">/** 数字第一个字母转换成数字 */</span></span><br><span class="line">        digit = charAt(i++) - <span class="string">'0'</span>;</span><br><span class="line">        result = -digit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 快速处理高精度整数，因为整数最大是10^9次方 */</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; max) &#123;</span><br><span class="line">        <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class="line">        digit = charAt(i++) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="comment">/** multmin 大概10^17 */</span></span><br><span class="line">        <span class="keyword">if</span> (result &lt; multmin) &#123;</span><br><span class="line">            <span class="comment">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(numberString());</span><br><span class="line">        &#125;</span><br><span class="line">        result *= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; limit + digit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(numberString());</span><br><span class="line">        &#125;</span><br><span class="line">        result -= digit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        <span class="comment">/** 处理完数字 i 是指向数字最后一个字符的下一个字符,</span></span><br><span class="line"><span class="comment">         *  这里判断 i &gt; np + 1 , 代表在 有效数字字符范围</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; np + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class="line">            <span class="keyword">if</span> (result &gt;= Integer.MIN_VALUE &amp;&amp; type != <span class="string">'L'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="string">'S'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">short</span>) result;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (type == <span class="string">'B'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (<span class="keyword">byte</span>) result;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">int</span>) result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">/* Only got "-" */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(numberString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 这里是整数， 因为前面处理成负数，取反就可以了 */</span></span><br><span class="line">        result = -result;</span><br><span class="line">        <span class="comment">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class="line">        <span class="keyword">if</span> (result &lt;= Integer.MAX_VALUE &amp;&amp; type != <span class="string">'L'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'S'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">short</span>) result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'B'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">byte</span>) result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fastjson</code> 还提供第三种接口，这个接口严格根据字段名进行匹配<code>json</code>字符串，字段名会自动加上双引号和冒号，格式<code>&quot;key&quot;:</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scanFieldInt</span><span class="params">(<span class="keyword">char</span>[] fieldName)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 属性不匹配，忽略 */</span></span><br><span class="line">    <span class="keyword">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class="line">        matchStat = NOT_MATCH_NAME;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = fieldName.length;</span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> negative = chLocal == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        <span class="comment">/** 如果是负数，读取第一个数字字符 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="comment">/** 转换成数字 */</span></span><br><span class="line">        value = chLocal - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'.'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 数字后面有点，不符合整数，标记不匹配 */</span></span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** value &lt; 0 代表整数值溢出了,</span></span><br><span class="line"><span class="comment">         *  11 + 3 代表了最小负数加了引号(占用2), 剩余</span></span><br><span class="line"><span class="comment">         *  占用1 是因为读完最后一位数字，offset++ 递增了1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">0</span></span><br><span class="line">                || offset &gt; <span class="number">11</span> + <span class="number">3</span> + fieldName.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value != Integer.MIN_VALUE</span><br><span class="line">                    || offset != <span class="number">17</span></span><br><span class="line">                    || !negative) &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 非数字代表不匹配 */</span></span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果遇到逗号，认为结束 */</span></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">        bp += offset;</span><br><span class="line">        <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        matchStat = VALUE;</span><br><span class="line">        token = JSONToken.COMMA;</span><br><span class="line">        <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">        <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">            token = JSONToken.COMMA;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">']'</span>) &#123;</span><br><span class="line">            token = JSONToken.RBRACKET;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            token = JSONToken.RBRACE;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == EOI) &#123;</span><br><span class="line">            token = JSONToken.EOF;</span><br><span class="line">            bp += (offset - <span class="number">1</span>);</span><br><span class="line">            ch = EOI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matchStat = END;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Long类型字段解析"><a href="#Long类型字段解析" class="headerlink" title="Long类型字段解析"></a>Long类型字段解析</h4><p><code>Long</code>字段解析和<code>Int</code>一样提供3中接口，先看第一种基于字段类型解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">scanLong</span><span class="params">(<span class="keyword">char</span> expectNextChar)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quote = chLocal == <span class="string">'"'</span>;</span><br><span class="line">    <span class="keyword">if</span> (quote) &#123;</span><br><span class="line">        <span class="comment">/** 有引号，继续读下一个字符 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> negative = chLocal == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        <span class="comment">/** 有符号，标识是负数 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> value;</span><br><span class="line">    <span class="comment">/** 循环将字符转换成数字 */</span></span><br><span class="line">    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        value = chLocal - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'.'</span>) &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class="line">        <span class="keyword">boolean</span> valid = value &gt;= <span class="number">0</span> || (value == -<span class="number">9223372036854775808L</span> &amp;&amp; negative);</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            String val = subString(bp, offset - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'n'</span> &amp;&amp; charAt(bp + offset) == <span class="string">'u'</span> &amp;&amp; charAt(bp + offset + <span class="number">1</span>) == <span class="string">'l'</span> &amp;&amp; charAt(bp + offset + <span class="number">2</span>) == <span class="string">'l'</span>) &#123;</span><br><span class="line">        matchStat = VALUE_NULL;</span><br><span class="line">        value = <span class="number">0</span>;</span><br><span class="line">        offset += <span class="number">3</span>;</span><br><span class="line">        chLocal = charAt(bp + offset++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (quote &amp;&amp; chLocal == <span class="string">'"'</span>) &#123;</span><br><span class="line">            chLocal = charAt(bp + offset++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果是null, 紧跟着逗号，认为结束匹配 */</span></span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.COMMA;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">']'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果是null, 紧跟着逗号], 认为结束匹配 */</span></span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.RBRACKET;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">                chLocal = charAt(bp + offset++);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (quote) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chLocal != <span class="string">'"'</span>) &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  忽略和Int一致的根据期望字符判断逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为和<code>Int</code>比较相似，这里提供第三个基于字段名字匹配实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">scanFieldLong</span><span class="params">(<span class="keyword">char</span>[] fieldName)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  fieldName 格式是 "name":</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class="line">        matchStat = NOT_MATCH_NAME;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = fieldName.length;</span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">'-'</span>) &#123;</span><br><span class="line">        <span class="comment">/** 有符号，标识是负数 */</span></span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">        negative = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> value;</span><br><span class="line">    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        value = chLocal - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/** 循环将字符转换成数字 */</span></span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                value = value * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">                <span class="comment">/** 如果数字带标点符号，认为不是合法整数，匹配失败 */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'.'</span>) &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class="line">        <span class="keyword">boolean</span> valid = offset - fieldName.length &lt; <span class="number">21</span></span><br><span class="line">                &amp;&amp; (value &gt;= <span class="number">0</span> || (value == -<span class="number">9223372036854775808L</span> &amp;&amp; negative));</span><br><span class="line">        <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果数字后面跟着逗号，结束 并预读下一个字符 */</span></span><br><span class="line">        bp += offset;</span><br><span class="line">        <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        matchStat = VALUE;</span><br><span class="line">        token = JSONToken.COMMA;</span><br><span class="line">        <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  忽略和Int一致的判断数字后续的token逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> negative ? -value : value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Float类型字段解析"><a href="#Float类型字段解析" class="headerlink" title="Float类型字段解析"></a>Float类型字段解析</h4><p>跟<code>Int</code>一致的接口，现提供第二种获取<code>float</code>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class="line">    String strVal = numberString();</span><br><span class="line">    <span class="keyword">float</span> floatValue = Float.parseFloat(strVal);</span><br><span class="line">    <span class="comment">/** 如果是0或者正无穷大，首字母是0-9 代表溢出 */</span></span><br><span class="line">    <span class="keyword">if</span> (floatValue == <span class="number">0</span> || floatValue == Float.POSITIVE_INFINITY) &#123;</span><br><span class="line">        <span class="keyword">char</span> c0 = strVal.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (c0 &gt; <span class="string">'0'</span> &amp;&amp; c0 &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"float overflow : "</span> + strVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> floatValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供根据属性字段名字匹配的源码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">scanFieldFloat</span><span class="params">(<span class="keyword">char</span>[] fieldName)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class="line">        matchStat = NOT_MATCH_NAME;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = fieldName.length;</span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> quote = chLocal == <span class="string">'"'</span>;</span><br><span class="line">    <span class="keyword">if</span> (quote) &#123;</span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> negative = chLocal == <span class="string">'-'</span>;</span><br><span class="line">    <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> value;</span><br><span class="line">    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> intVal = chLocal - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                intVal = intVal * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 如果遇到非数字字符终止 */</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> power = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> small = (chLocal == <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (small) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 将小数点后面数字转换成int类型数字 */</span></span><br><span class="line">                intVal = intVal * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">                power = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    chLocal = charAt(bp + (offset++));</span><br><span class="line">                    <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                        <span class="comment">/** 依次读取数字并转化int，记录小数点的数量级 */</span></span><br><span class="line">                        intVal = intVal * <span class="number">10</span> + (chLocal - <span class="string">'0'</span>);</span><br><span class="line">                        power *= <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> exp = chLocal == <span class="string">'e'</span> || chLocal == <span class="string">'E'</span>;</span><br><span class="line">        <span class="keyword">if</span> (exp) &#123;</span><br><span class="line">            <span class="comment">/** 处理科学计数法 */</span></span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">if</span> (chLocal == <span class="string">'+'</span> || chLocal == <span class="string">'-'</span>) &#123;</span><br><span class="line">                chLocal = charAt(bp + (offset++));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chLocal &gt;= <span class="string">'0'</span> &amp;&amp; chLocal &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                    chLocal = charAt(bp + (offset++));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start, count;</span><br><span class="line">        <span class="keyword">if</span> (quote) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chLocal != <span class="string">'"'</span>) &#123;</span><br><span class="line">                matchStat = NOT_MATCH;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 遇到浮点数最后一个引号，预读下一个 */</span></span><br><span class="line">                chLocal = charAt(bp + (offset++));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  ----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  | &#123; | " | k | e | y | " | : | " | 7 | 0 | 0 | 8   |  .  |  5 |  5 |  5 |  5 |  " |  &#125;</span></span><br><span class="line"><span class="comment">             *  ----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |  18</span></span><br><span class="line"><span class="comment">             *  ----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  |  | bp |  |   |   |   |   | |start|   |    |    |    |    |    |    |    |    | offset</span></span><br><span class="line"><span class="comment">             *  ----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  fieldName = "key":</span></span><br><span class="line"><span class="comment">             *  fieldName.length == 6, bp == 0, offset == 17</span></span><br><span class="line"><span class="comment">             *  start代表指向浮点第一个数字或者-号,</span></span><br><span class="line"><span class="comment">             *  <span class="doctag">@see</span> com.alibaba.json.bvt.parser.deser.BooleanFieldDeserializerTest#test_2()</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            start = bp + fieldName.length + <span class="number">1</span>;</span><br><span class="line">            count = bp + offset - start - <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = bp + fieldName.length;</span><br><span class="line">            count = bp + offset - start - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!exp &amp;&amp; count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            value = ((<span class="keyword">float</span>) intVal) / power;</span><br><span class="line">            <span class="keyword">if</span> (negative) &#123;</span><br><span class="line">                value = -value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String text = <span class="keyword">this</span>.subString(start, count);</span><br><span class="line">            value = Float.parseFloat(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'n'</span> &amp;&amp; charAt(bp + offset) == <span class="string">'u'</span> &amp;&amp; charAt(bp + offset + <span class="number">1</span>) == <span class="string">'l'</span> &amp;&amp; charAt(bp + offset + <span class="number">2</span>) == <span class="string">'l'</span>) &#123;</span><br><span class="line">        matchStat = VALUE_NULL;</span><br><span class="line">        value = <span class="number">0</span>;</span><br><span class="line">        offset += <span class="number">3</span>;</span><br><span class="line">        chLocal = charAt(bp + offset++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (quote &amp;&amp; chLocal == <span class="string">'"'</span>) &#123;</span><br><span class="line">            chLocal = charAt(bp + offset++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.COMMA;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                bp += offset;</span><br><span class="line">                <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">                matchStat = VALUE_NULL;</span><br><span class="line">                token = JSONToken.RBRACE;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">                chLocal = charAt(bp + offset++);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">        bp += offset;</span><br><span class="line">        <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        matchStat = VALUE;</span><br><span class="line">        token = JSONToken.COMMA;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  省略读取数字后，剩余token匹配逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="String类型字段解析"><a href="#String类型字段解析" class="headerlink" title="String类型字段解析"></a>String类型字段解析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">scanString</span><span class="params">(<span class="keyword">char</span> expectNextChar)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 兼容处理null字符串 */</span></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">'n'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (charAt(bp + offset) == <span class="string">'u'</span> &amp;&amp; charAt(bp + offset + <span class="number">1</span>) == <span class="string">'l'</span> &amp;&amp; charAt(bp + offset + <span class="number">2</span>) == <span class="string">'l'</span>) &#123;</span><br><span class="line">            offset += <span class="number">3</span>;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (chLocal == expectNextChar) &#123;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">            matchStat = VALUE;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String strVal;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chLocal == <span class="string">'"'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> startIndex = bp + offset;</span><br><span class="line">            <span class="keyword">int</span> endIndex = indexOf(<span class="string">'"'</span>, startIndex);</span><br><span class="line">            <span class="keyword">if</span> (endIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"unclosed str"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String stringVal = subString(bp + offset, endIndex - startIndex);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  处理逻辑请参考详细注释：</span></span><br><span class="line"><span class="comment">             *  <span class="doctag">@see</span> ##scanFieldString(char[])</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (stringVal.indexOf(<span class="string">'\\'</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                    <span class="keyword">int</span> slashCount = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = endIndex - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (charAt(i) == <span class="string">'\\'</span>) &#123;</span><br><span class="line">                            slashCount++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (slashCount % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    endIndex = indexOf(<span class="string">'"'</span>, endIndex + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> chars_len = endIndex - startIndex;</span><br><span class="line">                <span class="keyword">char</span>[] chars = sub_chars(bp + <span class="number">1</span>, chars_len);</span><br><span class="line"></span><br><span class="line">                stringVal = readString(chars, chars_len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            offset += (endIndex - startIndex + <span class="number">1</span>);</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            strVal = stringVal;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> stringDefaultValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">/** 如果遇到和期望字符认为结束符 */</span></span><br><span class="line">        <span class="keyword">if</span> (chLocal == expectNextChar) &#123;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="comment">/** 预读下一个字符 */</span></span><br><span class="line">            <span class="keyword">this</span>.ch = charAt(bp);</span><br><span class="line">            matchStat = VALUE;</span><br><span class="line">            <span class="keyword">return</span> strVal;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class="line">            chLocal = charAt(bp + (offset++));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> strVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前已经分析足够多的此法分析代码，可以先自己分析或者参考下方更详细<code>scanFieldString</code>实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">stringVal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这里提供的<code>stringVal()</code>需要由子类实现，原因：</p><ol><li>在<code>android6.0</code>和<code>jdk6</code>版本 获取子字符串会共享外层<code>String</code>的<code>char[]</code> 会导致String占用内存无法释放（特别是打文本字符串）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">scanFieldString</span><span class="params">(<span class="keyword">char</span>[] fieldName)</span> </span>&#123;</span><br><span class="line">    matchStat = UNKNOWN;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  fieldName 格式是 "name":</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class="line">        matchStat = NOT_MATCH_NAME;</span><br><span class="line">        <span class="keyword">return</span> stringDefaultValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int index = bp + fieldName.length;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = fieldName.length;</span><br><span class="line">    <span class="comment">/** 读取字段下一个字符 */</span></span><br><span class="line">    <span class="keyword">char</span> chLocal = charAt(bp + (offset++));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** json 值类型字符串一定"，否则不符合规范 */</span></span><br><span class="line">    <span class="keyword">if</span> (chLocal != <span class="string">'"'</span>) &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringDefaultValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String strVal;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/** startIndex指向双引号下一个字符，</span></span><br><span class="line"><span class="comment">         *  eg : "name":"string", startIndex指向s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> startIndex = bp + fieldName.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> endIndex = indexOf(<span class="string">'"'</span>, startIndex);</span><br><span class="line">        <span class="keyword">if</span> (endIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"unclosed str"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> startIndex2 = bp + fieldName.length + <span class="number">1</span>; <span class="comment">// must re compute</span></span><br><span class="line">        String stringVal = subString(startIndex2, endIndex - startIndex2);</span><br><span class="line">        <span class="comment">/** 包含特殊转译字符 */</span></span><br><span class="line">        <span class="keyword">if</span> (stringVal.indexOf(<span class="string">'\\'</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 处理场景 "value\\\"" json串值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> slashCount = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = endIndex - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (charAt(i) == <span class="string">'\\'</span>) &#123;</span><br><span class="line">                        slashCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (slashCount % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 如果遇到奇数转译字符，遇到"不认为值结束，找下一个"才认为结束 */</span></span><br><span class="line">                endIndex = indexOf(<span class="string">'"'</span>, endIndex + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  ---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  | " | k | e | y | " | : | " | v | a | l | u |  e  |  \ |  \ |  \ |  " |  " |</span></span><br><span class="line"><span class="comment">             *  ---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |</span></span><br><span class="line"><span class="comment">             *  ---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  | bp | |   |   |   |   |   |   |   |   |    |    |    |    |    |    | endIndex |</span></span><br><span class="line"><span class="comment">             *  ---------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">             *  fieldName = "key":</span></span><br><span class="line"><span class="comment">             *  fieldName.length == 6, bp == 0, endIndex == 16</span></span><br><span class="line"><span class="comment">             *  chars_len = 16 - (0 + 6 + 1) = 9, == value\\\"</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">int</span> chars_len = endIndex - (bp + fieldName.length + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">char</span>[] chars = sub_chars( bp + fieldName.length + <span class="number">1</span>, chars_len);</span><br><span class="line"></span><br><span class="line">            stringVal = readString(chars, chars_len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 偏移到json串字段值" 下一个字符 */</span></span><br><span class="line">        offset += (endIndex - (bp + fieldName.length + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">        strVal = stringVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">        bp += offset;</span><br><span class="line">        <span class="comment">/** 读取下一个字符 */</span></span><br><span class="line">        <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">        matchStat = VALUE;</span><br><span class="line">        <span class="keyword">return</span> strVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chLocal == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">        chLocal = charAt(bp + (offset++));</span><br><span class="line">        <span class="comment">/** 如果字段值紧跟, 标记下次token为逗号 */</span></span><br><span class="line">        <span class="keyword">if</span> (chLocal == <span class="string">','</span>) &#123;</span><br><span class="line">            token = JSONToken.COMMA;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">            <span class="comment">/** 如果字段值紧跟] 标记下次token为右中括号 */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">']'</span>) &#123;</span><br><span class="line">            token = JSONToken.RBRACKET;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">            <span class="comment">/** 如果字段值紧跟&#125; 标记下次token为右花括号 */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">            token = JSONToken.RBRACE;</span><br><span class="line">            bp += offset;</span><br><span class="line">            <span class="keyword">this</span>.ch = <span class="keyword">this</span>.charAt(bp);</span><br><span class="line">            <span class="comment">/** 特殊标记结束 */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (chLocal == EOI) &#123;</span><br><span class="line">            token = JSONToken.EOF;</span><br><span class="line">            bp += (offset - <span class="number">1</span>);</span><br><span class="line">            ch = EOI;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matchStat = NOT_MATCH;</span><br><span class="line">            <span class="keyword">return</span> stringDefaultValue();</span><br><span class="line">        &#125;</span><br><span class="line">        matchStat = END;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        matchStat = NOT_MATCH;</span><br><span class="line">        <span class="keyword">return</span> stringDefaultValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前分析的代码其实包括大部分实现了，这里没有给出<code>Decimal</code>和<code>Double</code>的实现，它们实现是类似的并且相对简单，主要是提取字符串直接用对应类的构造函数生成对象而已，如果想详细了解可以参考代码中已经添加的详尽注释。</p><p>终于要结束词法分析相关<code>api</code>接口的分析了，这个是词法分析非常重要的基础实现，有继承这个类的两种实现<code>com.alibaba.fastjson.parser.JSONScanner</code>和<code>com.alibaba.fastjson.parser.JSONReaderScanner</code>, 这两个类继承主要增加一个优化的措施，后面讲解反序列化实现的时候会对相关重写的方法进行补充。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>词法和语法解析（八）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90-(%E4%BA%8C)-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90-(%E4%BA%8C)-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="JSON-Token解析"><a href="#JSON-Token解析" class="headerlink" title="JSON Token解析"></a>JSON Token解析</h3><p><code>JSONLexerBase</code>定义并实现了<code>json</code>串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 当前token含义 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            token;</span><br><span class="line"><span class="comment">/** 记录当前扫描字符位置 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            pos;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            features;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 当前有效字符 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">char</span>                           ch;</span><br><span class="line"><span class="comment">/** 流(或者json字符串)中当前的位置，每次读取字符会递增 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            bp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            eofPos;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 字符缓冲区 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">char</span>[]                         sbuf;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 字符缓冲区的索引，指向下一个可写</span></span><br><span class="line"><span class="comment"> *  字符的位置，也代表字符缓冲区字符数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            sp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * number start position</span></span><br><span class="line"><span class="comment"> * 可以理解为 找到token时 token的首字符位置</span></span><br><span class="line"><span class="comment"> * 和bp不一样，这个不会递增，会在开始token前记录一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            np;</span><br></pre></td></tr></table></figure><h3 id="JSONLexerBase成员函数"><a href="#JSONLexerBase成员函数" class="headerlink" title="JSONLexerBase成员函数"></a>JSONLexerBase成员函数</h3><p>在开始分析词法分析实现过程中，我发现中解析存在大量重复代码实现或极其类似实现，重复代码主要解决类似c++内联调用，极其相似代码实现我会挑选有代表性的来说明（一般实现较为复杂），没有说明的成员函数可以参考代码注释。</p><h3 id="推断token类型"><a href="#推断token类型" class="headerlink" title="推断token类型"></a>推断token类型</h3><p><code>fastjson</code> token类型推断当前<code>json</code>字符串是那种类型的token, 比如是字符串、花括号和逗号等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 将字符buffer pos设置为初始0 */</span></span><br><span class="line">    sp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">/** pos记录为流的当前位置 */</span></span><br><span class="line">        pos = bp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'/'</span>) &#123;</span><br><span class="line">            <span class="comment">/** 如果是注释// 或者 \/* *\/ 注释，跳过注释 */</span></span><br><span class="line">            skipComment();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'"'</span>) &#123;</span><br><span class="line">            <span class="comment">/** 读取引号内的字符串 */</span></span><br><span class="line">            scanString();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">','</span>) &#123;</span><br><span class="line">            <span class="comment">/** 跳过当前，读取下一个字符 */</span></span><br><span class="line">            next();</span><br><span class="line">            token = COMMA;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="comment">/** 读取整数 */</span></span><br><span class="line">            scanNumber();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">            <span class="comment">/** 读取负数 */</span></span><br><span class="line">            scanNumber();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="comment">/** 读取单引号后面的字符串，和scanString逻辑一致 */</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\''</span>:</span><br><span class="line">                <span class="keyword">if</span> (!isEnabled(Feature.AllowSingleQuotes)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"Feature.AllowSingleQuotes is false"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                scanStringSingleQuote();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\b'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\f'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">// true</span></span><br><span class="line">                <span class="comment">/** 读取字符true */</span></span><br><span class="line">                scanTrue();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'f'</span>: <span class="comment">// false</span></span><br><span class="line">                <span class="comment">/** 读取字符false */</span></span><br><span class="line">                scanFalse();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'n'</span>: <span class="comment">// new,null</span></span><br><span class="line">                <span class="comment">/** 读取为new或者null的token */</span></span><br><span class="line">                scanNullOrNew();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'T'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'N'</span>: <span class="comment">// NULL</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'u'</span>: <span class="comment">// undefined</span></span><br><span class="line">                <span class="comment">/** 读取标识符，已经自动预读了下一个字符 */</span></span><br><span class="line">                scanIdent();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                <span class="comment">/** 读取下一个字符 */</span></span><br><span class="line">                next();</span><br><span class="line">                token = LPAREN;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = RPAREN;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = LBRACKET;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = RBRACKET;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = LBRACE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = RBRACE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">':'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = COLON;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">';'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = SEMI;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'.'</span>:</span><br><span class="line">                next();</span><br><span class="line">                token = DOT;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">                next();</span><br><span class="line">                scanNumber();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'x'</span>:</span><br><span class="line">                scanHex();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">if</span> (isEOF()) &#123; <span class="comment">// JLS</span></span><br><span class="line">                    <span class="keyword">if</span> (token == EOF) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"EOF error"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    token = EOF;</span><br><span class="line">                    pos = bp = eofPos;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/** 忽略控制字符或者删除字符 */</span></span><br><span class="line">                    <span class="keyword">if</span> (ch &lt;= <span class="number">31</span> || ch == <span class="number">127</span>) &#123;</span><br><span class="line">                        next();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    lexError(<span class="string">"illegal.char"</span>, String.valueOf((<span class="keyword">int</span>) ch));</span><br><span class="line">                    next();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳过注释"><a href="#跳过注释" class="headerlink" title="跳过注释"></a>跳过注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skipComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 读下一个字符 */</span></span><br><span class="line">    next();</span><br><span class="line">    <span class="comment">/** 连续遇到左反斜杠/ */</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'/'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/** 读下一个字符 */</span></span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'\n'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果遇到换行符，继续读取下一个字符并返回 */</span></span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">/** 如果已经遇到流结束，返回 */</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 遇到`/*` 注释的格式 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'*'</span>) &#123;</span><br><span class="line">        <span class="comment">/** 读下一个字符 */</span></span><br><span class="line">        next();</span><br><span class="line">        <span class="keyword">for</span> (; ch != EOI;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'*'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果遇到*,继续尝试读取下一个字符，看看是否是/字符 */</span></span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'/'</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 如果确实是/字符，提前预读下一个有效字符后终止 */</span></span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/** 遇到非/ 继续跳过度下一个字符 */</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/** 如果没有遇到`*\` 注释格式, 继续读下一个字符 */</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 不符合// 或者 \/* *\/ 注释格式 */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"invalid comment"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析注释主要分为2中，支持<code>//</code> 或者 <code>/* */</code> 注释格式。</p><h3 id="扫描字符串"><a href="#扫描字符串" class="headerlink" title="扫描字符串"></a>扫描字符串</h3><p>当解析<code>json</code>字符串是<code>&quot;</code>时，会调用扫描字符串方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scanString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 记录当前流中token的开始位置, np指向引号的索引 */</span></span><br><span class="line">    np = bp;</span><br><span class="line">    hasSpecial = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 读取当前字符串的字符 */</span></span><br><span class="line">        ch = next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果遇到字符串结束符"， 则结束 */</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'\"'</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">            <span class="comment">/** 如果遇到了结束符EOI，但是没有遇到流的结尾，添加EOI结束符 */</span></span><br><span class="line">            <span class="keyword">if</span> (!isEOF()) &#123;</span><br><span class="line">                putChar((<span class="keyword">char</span>) EOI);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"unclosed string : "</span> + ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 处理转译字符逻辑 */</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'\\'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">                <span class="comment">/** 第一次遇到\认为是特殊符号 */</span></span><br><span class="line">                hasSpecial = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 如果buffer空间不够，执行2倍扩容 */</span></span><br><span class="line">                <span class="keyword">if</span> (sp &gt;= sbuf.length) &#123;</span><br><span class="line">                    <span class="keyword">int</span> newCapcity = sbuf.length * <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span> (sp &gt; newCapcity) &#123;</span><br><span class="line">                        newCapcity = sp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">char</span>[] newsbuf = <span class="keyword">new</span> <span class="keyword">char</span>[newCapcity];</span><br><span class="line">                    System.arraycopy(sbuf, <span class="number">0</span>, newsbuf, <span class="number">0</span>, sbuf.length);</span><br><span class="line">                    sbuf = newsbuf;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 复制有效字符串到buffer中，不包括引号 */</span></span><br><span class="line">                copyTo(np + <span class="number">1</span>, sp, sbuf);</span><br><span class="line">                <span class="comment">// text.getChars(np + 1, np + 1 + sp, sbuf, 0);</span></span><br><span class="line">                <span class="comment">// System.arraycopy(buf, np + 1, sbuf, 0, sp);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 读取转译字符\下一个字符 */</span></span><br><span class="line">            ch = next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 转换ascii字符，请参考：https://baike.baidu.com/item/ASCII/309296?fr=aladdin */</span></span><br><span class="line">            <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">                    <span class="comment">/** 空字符 */</span></span><br><span class="line">                    putChar(<span class="string">'\0'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                    <span class="comment">/** 标题开始 */</span></span><br><span class="line">                    putChar(<span class="string">'\1'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                    <span class="comment">/** 正文开始 */</span></span><br><span class="line">                    putChar(<span class="string">'\2'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                    <span class="comment">/** 正文结束 */</span></span><br><span class="line">                    putChar(<span class="string">'\3'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                    <span class="comment">/** 传输结束 */</span></span><br><span class="line">                    putChar(<span class="string">'\4'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">                    <span class="comment">/** 请求 */</span></span><br><span class="line">                    putChar(<span class="string">'\5'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">                    <span class="comment">/** 收到通知 */</span></span><br><span class="line">                    putChar(<span class="string">'\6'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">                    <span class="comment">/** 响铃 */</span></span><br><span class="line">                    putChar(<span class="string">'\7'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'b'</span>: <span class="comment">// 8</span></span><br><span class="line">                    <span class="comment">/** 退格 */</span></span><br><span class="line">                    putChar(<span class="string">'\b'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'t'</span>: <span class="comment">// 9</span></span><br><span class="line">                    <span class="comment">/** 水平制表符 */</span></span><br><span class="line">                    putChar(<span class="string">'\t'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'n'</span>: <span class="comment">// 10</span></span><br><span class="line">                    <span class="comment">/** 换行键 */</span></span><br><span class="line">                    putChar(<span class="string">'\n'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'v'</span>: <span class="comment">// 11</span></span><br><span class="line">                    <span class="comment">/** 垂直制表符 */</span></span><br><span class="line">                    putChar(<span class="string">'\u000B'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'f'</span>: <span class="comment">// 12</span></span><br><span class="line">                    <span class="comment">/** 换页键 */</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">                    <span class="comment">/** 换页键 */</span></span><br><span class="line">                    putChar(<span class="string">'\f'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'r'</span>: <span class="comment">// 13</span></span><br><span class="line">                    <span class="comment">/** 回车键 */</span></span><br><span class="line">                    putChar(<span class="string">'\r'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'"'</span>: <span class="comment">// 34</span></span><br><span class="line">                    <span class="comment">/** 双引号 */</span></span><br><span class="line">                    putChar(<span class="string">'"'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'\''</span>: <span class="comment">// 39</span></span><br><span class="line">                    <span class="comment">/** 闭单引号 */</span></span><br><span class="line">                    putChar(<span class="string">'\''</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'/'</span>: <span class="comment">// 47</span></span><br><span class="line">                    <span class="comment">/** 斜杠 */</span></span><br><span class="line">                    putChar(<span class="string">'/'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'\\'</span>: <span class="comment">// 92</span></span><br><span class="line">                    <span class="comment">/** 反斜杠 */</span></span><br><span class="line">                    putChar(<span class="string">'\\'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'x'</span>:</span><br><span class="line">                    <span class="comment">/** 小写字母x, 标识一个字符 */</span></span><br><span class="line">                    <span class="keyword">char</span> x1 = ch = next();</span><br><span class="line">                    <span class="keyword">char</span> x2 = ch = next();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/** x1 左移4位 + x2 */</span></span><br><span class="line">                    <span class="keyword">int</span> x_val = digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">                    <span class="keyword">char</span> x_char = (<span class="keyword">char</span>) x_val;</span><br><span class="line">                    putChar(x_char);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">                    <span class="comment">/** 小写字母u, 标识一个字符 */</span></span><br><span class="line">                    <span class="keyword">char</span> u1 = ch = next();</span><br><span class="line">                    <span class="keyword">char</span> u2 = ch = next();</span><br><span class="line">                    <span class="keyword">char</span> u3 = ch = next();</span><br><span class="line">                    <span class="keyword">char</span> u4 = ch = next();</span><br><span class="line">                    <span class="keyword">int</span> val = Integer.parseInt(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; u1, u2, u3, u4 &#125;), <span class="number">16</span>);</span><br><span class="line">                    putChar((<span class="keyword">char</span>) val);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">this</span>.ch = ch;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"unclosed string : "</span> + ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 没有转译字符，递增buffer字符位置 */</span></span><br><span class="line">        <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">            sp++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 继续读取转译字符后面的字符 */</span></span><br><span class="line">        <span class="keyword">if</span> (sp == sbuf.length) &#123;</span><br><span class="line">            putChar(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sbuf[sp++] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token = JSONToken.LITERAL_STRING;</span><br><span class="line">    <span class="comment">/** 自动预读下一个字符 */</span></span><br><span class="line">    <span class="keyword">this</span>.ch = next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析到字符串的时候会写入buffer。</p><h3 id="扫描数字类型"><a href="#扫描数字类型" class="headerlink" title="扫描数字类型"></a>扫描数字类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scanNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 记录当前流中token的开始位置, np指向数字字符索引 */</span></span><br><span class="line">    np = bp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 兼容处理负数 */</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            <span class="comment">/** 如果是数字字符，递增索引位置 */</span></span><br><span class="line">            sp++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isDouble = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果遇到小数点字符 */</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'.'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        <span class="comment">/** 继续读小数点后面字符 */</span></span><br><span class="line">        next();</span><br><span class="line">        isDouble = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                sp++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 继续读取数字后面的类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'L'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'S'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'B'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'F'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">        isDouble = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'D'</span>) &#123;</span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line">        isDouble = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'e'</span> || ch == <span class="string">'E'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 扫描科学计数法 */</span></span><br><span class="line">        sp++;</span><br><span class="line">        next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'+'</span> || ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">            sp++;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                sp++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'D'</span> || ch == <span class="string">'F'</span>) &#123;</span><br><span class="line">            sp++;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isDouble = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDouble) &#123;</span><br><span class="line">        token = JSONToken.LITERAL_FLOAT;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        token = JSONToken.LITERAL_INT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描Boolean"><a href="#扫描Boolean" class="headerlink" title="扫描Boolean"></a>扫描Boolean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scanTrue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'t'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"error parse true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'r'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"error parse true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'u'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"error parse true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'e'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"error parse true"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">' '</span> || ch == <span class="string">','</span> || ch == <span class="string">'&#125;'</span> || ch == <span class="string">']'</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span> || ch == EOI</span><br><span class="line">            || ch == <span class="string">'\f'</span> || ch == <span class="string">'\b'</span> || ch == <span class="string">':'</span> || ch == <span class="string">'/'</span>) &#123;</span><br><span class="line">        <span class="comment">/** 兼容性防御，标记是true的token */</span></span><br><span class="line">        token = JSONToken.TRUE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"scan true error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扫描标识符"><a href="#扫描标识符" class="headerlink" title="扫描标识符"></a>扫描标识符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scanIdent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 记录当前流中token的开始位置, np指向当前token前一个字符 */</span></span><br><span class="line">    np = bp - <span class="number">1</span>;</span><br><span class="line">    hasSpecial = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        sp++;</span><br><span class="line"></span><br><span class="line">        next();</span><br><span class="line">        <span class="comment">/** 如果是字母或数字，继续读取 */</span></span><br><span class="line">        <span class="keyword">if</span> (Character.isLetterOrDigit(ch)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 获取字符串值 */</span></span><br><span class="line">        String ident = stringVal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"null"</span>.equalsIgnoreCase(ident)) &#123;</span><br><span class="line">            token = JSONToken.NULL;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"new"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.NEW;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"true"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.TRUE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"false"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.FALSE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"undefined"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.UNDEFINED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Set"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.SET;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"TreeSet"</span>.equals(ident)) &#123;</span><br><span class="line">            token = JSONToken.TREE_SET;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token = JSONToken.IDENTIFIER;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扫描十六进制数"><a href="#扫描十六进制数" class="headerlink" title="扫描十六进制数"></a>扫描十六进制数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scanHex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'x'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"illegal state. "</span> + ch);</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">    <span class="comment">/** 十六进制x紧跟着单引号 */</span></span><br><span class="line">    <span class="comment">/** <span class="doctag">@see</span> com.alibaba.fastjson.serializer.SerializeWriter#writeHex(byte[]) */</span></span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="string">'\''</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"illegal state. "</span> + ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    np = bp;</span><br><span class="line">    <span class="comment">/** 这里一次next, for循环也读一次next, 因为十六进制被写成2个字节的单字符 */</span></span><br><span class="line">    next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = next();</span><br><span class="line">        <span class="keyword">if</span> ((ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) || (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'F'</span>)) &#123;</span><br><span class="line">            sp++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'\''</span>) &#123;</span><br><span class="line">            sp++;</span><br><span class="line">            <span class="comment">/** 遇到结束符号，自动预读下一个字符 */</span></span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"illegal state. "</span> + ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    token = JSONToken.HEX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="根据期望字符扫描token"><a href="#根据期望字符扫描token" class="headerlink" title="根据期望字符扫描token"></a>根据期望字符扫描token</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 将字符buffer pos设置为初始0 */</span></span><br><span class="line">    sp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (expect) &#123;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.LBRACE:</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACE;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.COMMA:</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">','</span>) &#123;</span><br><span class="line">                    token = JSONToken.COMMA;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                    token = JSONToken.RBRACE;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">']'</span>) &#123;</span><br><span class="line">                    token = JSONToken.RBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">                    token = JSONToken.EOF;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.LITERAL_INT:</span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                    pos = bp;</span><br><span class="line">                    scanNumber();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'"'</span>) &#123;</span><br><span class="line">                    pos = bp;</span><br><span class="line">                    scanString();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACE;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.LITERAL_STRING:</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'"'</span>) &#123;</span><br><span class="line">                    pos = bp;</span><br><span class="line">                    <span class="comment">/** 扫描字符串, pos指向字符串引号索引 */</span></span><br><span class="line">                    scanString();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                    pos = bp;</span><br><span class="line">                    <span class="comment">/** 扫描数字, 前面已经分析过 */</span></span><br><span class="line">                    scanNumber();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACE;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.LBRACKET:</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'['</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    token = JSONToken.LBRACE;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.RBRACKET:</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">']'</span>) &#123;</span><br><span class="line">                    token = JSONToken.RBRACKET;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.EOF:</span><br><span class="line">                <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">                    token = JSONToken.EOF;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> JSONToken.IDENTIFIER:</span><br><span class="line">                <span class="comment">/** 跳过空白字符，如果是标识符_、$和字母开头，否则自动获取下一个token */</span></span><br><span class="line">                nextIdent();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 跳过空白字符 */</span></span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span> || ch == <span class="string">'\f'</span> || ch == <span class="string">'\b'</span>) &#123;</span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 针对其他token自动读取下一个, 比如遇到冒号：,自动下一个token */</span></span><br><span class="line">        nextToken();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要是根据期望的字符expect，判定expect对应的token, 接下来主要分析解析对象字段的相关api实现。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>词法和语法解析（七）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90(%E4%B8%80)-token%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E8%AF%8D%E6%B3%95%E5%92%8C%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90(%E4%B8%80)-token%E5%AE%9A%E4%B9%89%E8%A7%A3%E6%9E%90%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>词法分析是反序列化的重要基础，在其他框架<code>druid</code>、<code>parsii</code>等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。</p><p>写出优秀框架之前，先理解大量优秀框架的实现对未来自己写框架非常有帮助！！！</p><p>好了，废话不多说，来看看<code>fastjson</code>中定义的token吧。</p><h3 id="JSONToken成员"><a href="#JSONToken成员" class="headerlink" title="JSONToken成员"></a>JSONToken成员</h3><p><code>com.alibaba.fastjson.parser.JSONToken</code>定义了fastjson需要的token标识符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 1 关联到 error */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR                = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/** 2 关联到 int */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LITERAL_INT          = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/** 3 关联到 float */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LITERAL_FLOAT        = <span class="number">3</span>;</span><br><span class="line"><span class="comment">/** 4 关联到 string */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LITERAL_STRING       = <span class="number">4</span>;</span><br><span class="line"><span class="comment">/** 5 关联到 iso8601 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LITERAL_ISO8601_DATE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">/** 6 关联到 true */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TRUE                 = <span class="number">6</span>;</span><br><span class="line"><span class="comment">/** 7 关联到 false */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FALSE                = <span class="number">7</span>;</span><br><span class="line"><span class="comment">/** 8 关联到 null */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NULL                 = <span class="number">8</span>;</span><br><span class="line"><span class="comment">/** 9 关联到 new */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NEW                  = <span class="number">9</span>;</span><br><span class="line"><span class="comment">/** 10 关联到 ( */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LPAREN               = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/** 11 关联到 ) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RPAREN               = <span class="number">11</span>;</span><br><span class="line"><span class="comment">/** 12 关联到 &#123; */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LBRACE               = <span class="number">12</span>;</span><br><span class="line"><span class="comment">/** 13 关联到 &#125; */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RBRACE               = <span class="number">13</span>;</span><br><span class="line"><span class="comment">/** 14 关联到 [ */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LBRACKET             = <span class="number">14</span>;</span><br><span class="line"><span class="comment">/** 15 关联到 ] */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> RBRACKET             = <span class="number">15</span>;</span><br><span class="line"><span class="comment">/** 16 关联到 , */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> COMMA                = <span class="number">16</span>;</span><br><span class="line"><span class="comment">/** 17 关联到 : */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> COLON                = <span class="number">17</span>;</span><br><span class="line"><span class="comment">/** 18 关联到 ident */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> IDENTIFIER           = <span class="number">18</span>;</span><br><span class="line"><span class="comment">/** 19 关联到 fieldName */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FIELD_NAME           = <span class="number">19</span>;</span><br><span class="line"><span class="comment">/** 20 关联到 EOF */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> EOF                  = <span class="number">20</span>;</span><br><span class="line"><span class="comment">/** 21 关联到 Set */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SET                  = <span class="number">21</span>;</span><br><span class="line"><span class="comment">/** 22 关联到 TreeSet */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TREE_SET             = <span class="number">22</span>;</span><br><span class="line"><span class="comment">/** 23 关联到 undefined */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> UNDEFINED            = <span class="number">23</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">/** 24 关联到 ; */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> SEMI                 = <span class="number">24</span>;</span><br><span class="line"><span class="comment">/** 25 关联到 . */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DOT                  = <span class="number">25</span>;</span><br><span class="line"><span class="comment">/** 26 关联到 hex */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> HEX                  = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">name</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">        <span class="keyword">case</span> ERROR:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        <span class="keyword">case</span> LITERAL_INT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"int"</span>;</span><br><span class="line">        <span class="keyword">case</span> LITERAL_FLOAT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"float"</span>;</span><br><span class="line">        <span class="keyword">case</span> LITERAL_STRING:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"string"</span>;</span><br><span class="line">        <span class="keyword">case</span> LITERAL_ISO8601_DATE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"iso8601"</span>;</span><br><span class="line">        <span class="keyword">case</span> TRUE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"true"</span>;</span><br><span class="line">        <span class="keyword">case</span> FALSE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"false"</span>;</span><br><span class="line">        <span class="keyword">case</span> NULL:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">case</span> NEW:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"new"</span>;</span><br><span class="line">        <span class="keyword">case</span> LPAREN:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"("</span>;</span><br><span class="line">        <span class="keyword">case</span> RPAREN:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">case</span> LBRACE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;"</span>;</span><br><span class="line">        <span class="keyword">case</span> RBRACE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#125;"</span>;</span><br><span class="line">        <span class="keyword">case</span> LBRACKET:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"["</span>;</span><br><span class="line">        <span class="keyword">case</span> RBRACKET:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"]"</span>;</span><br><span class="line">        <span class="keyword">case</span> COMMA:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">","</span>;</span><br><span class="line">        <span class="keyword">case</span> COLON:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">":"</span>;</span><br><span class="line">        <span class="keyword">case</span> SEMI:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">";"</span>;</span><br><span class="line">        <span class="keyword">case</span> DOT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"."</span>;</span><br><span class="line">        <span class="keyword">case</span> IDENTIFIER:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ident"</span>;</span><br><span class="line">        <span class="keyword">case</span> FIELD_NAME:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"fieldName"</span>;</span><br><span class="line">        <span class="keyword">case</span> EOF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"EOF"</span>;</span><br><span class="line">        <span class="keyword">case</span> SET:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Set"</span>;</span><br><span class="line">        <span class="keyword">case</span> TREE_SET:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"TreeSet"</span>;</span><br><span class="line">        <span class="keyword">case</span> UNDEFINED:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"undefined"</span>;</span><br><span class="line">        <span class="keyword">case</span> HEX:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hex"</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Unknown"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们继续分析如何实现具体token解析的。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（六）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E5%85%AD)-json%E7%89%B9%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E5%85%AD)-json%E7%89%B9%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="序列化回调接口实现分析"><a href="#序列化回调接口实现分析" class="headerlink" title="序列化回调接口实现分析"></a>序列化回调接口实现分析</h2><h3 id="特定序列化实现解析"><a href="#特定序列化实现解析" class="headerlink" title="特定序列化实现解析"></a>特定序列化实现解析</h3><h3 id="MapSerializer序列化"><a href="#MapSerializer序列化" class="headerlink" title="MapSerializer序列化"></a>MapSerializer序列化</h3><p>按照代码的顺序第一个分析到Map序列化器，内部调用write：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer</span></span></span><br><span class="line"><span class="function"><span class="params">        , Object object</span></span></span><br><span class="line"><span class="function"><span class="params">        , Object fieldName</span></span></span><br><span class="line"><span class="function"><span class="params">        , Type fieldType</span></span></span><br><span class="line"><span class="function"><span class="params">        , <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    write(serializer, object, fieldName, fieldType, features, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>MapSerializer#write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int, boolean)</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer</span></span></span><br><span class="line"><span class="function"><span class="params">        , Object object</span></span></span><br><span class="line"><span class="function"><span class="params">        , Object fieldName</span></span></span><br><span class="line"><span class="function"><span class="params">        , Type fieldType</span></span></span><br><span class="line"><span class="function"><span class="params">        , <span class="keyword">int</span> features </span></span></span><br><span class="line"><span class="function"><span class="params">        , <span class="keyword">boolean</span> unwrapped)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果map是null, 输出 "null" 字符串 */</span></span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) object;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> mapSortFieldMask = SerializerFeature.MapSortField.mask;</span><br><span class="line">    <span class="keyword">if</span> ((out.features &amp; mapSortFieldMask) != <span class="number">0</span> || (features &amp; mapSortFieldMask) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/** JSONObject包装HashMap或者LinkedHashMap */</span></span><br><span class="line">        <span class="keyword">if</span> (map <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">            map = ((JSONObject) map).getInnerMap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((!(map <span class="keyword">instanceof</span> SortedMap)) &amp;&amp; !(map <span class="keyword">instanceof</span> LinkedHashMap)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map = <span class="keyword">new</span> TreeMap(map);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serializer.containsReference(object)) &#123;</span><br><span class="line">        <span class="comment">/** 处理对象引用，下文详细分析 */</span></span><br><span class="line">        serializer.writeReference(object);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SerialContext parent = serializer.context;</span><br><span class="line">    <span class="comment">/** 创建当前新的序列化context */</span></span><br><span class="line">    serializer.setContext(parent, object, fieldName, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!unwrapped) &#123;</span><br><span class="line">            out.write(<span class="string">'&#123;'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serializer.incrementIndent();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; preClazz = <span class="keyword">null</span>;</span><br><span class="line">        ObjectSerializer preWriter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">            String typeKey = serializer.config.typeKey;</span><br><span class="line">            Class&lt;?&gt; mapClass = map.getClass();</span><br><span class="line">            <span class="keyword">boolean</span> containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) </span><br><span class="line">                    &amp;&amp; map.containsKey(typeKey);</span><br><span class="line">            <span class="comment">/** 序列化的map不包含key=<span class="doctag">@type</span>或者自定义值，则输出map的类名 */</span></span><br><span class="line">            <span class="keyword">if</span> (!containsKey) &#123;</span><br><span class="line">                out.writeFieldName(typeKey);</span><br><span class="line">                out.writeString(object.getClass().getName());</span><br><span class="line">                first = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line">            Object value = entry.getValue();</span><br><span class="line"></span><br><span class="line">            Object entryKey = entry.getKey();</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历JSONSerializer的PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class="line">                List&lt;PropertyPreFilter&gt; preFilters = serializer.propertyPreFilters;</span><br><span class="line">                <span class="keyword">if</span> (preFilters != <span class="keyword">null</span> &amp;&amp; preFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class="line">                List&lt;PropertyPreFilter&gt; preFilters = <span class="keyword">this</span>.propertyPreFilters;</span><br><span class="line">                <span class="keyword">if</span> (preFilters != <span class="keyword">null</span> &amp;&amp; preFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历JSONSerializer的PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class="line">                List&lt;PropertyFilter&gt; propertyFilters = serializer.propertyFilters;</span><br><span class="line">                <span class="keyword">if</span> (propertyFilters != <span class="keyword">null</span> &amp;&amp; propertyFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class="line">                List&lt;PropertyFilter&gt; propertyFilters = <span class="keyword">this</span>.propertyFilters;</span><br><span class="line">                <span class="keyword">if</span> (propertyFilters != <span class="keyword">null</span> &amp;&amp; propertyFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="keyword">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历JSONSerializer的NameFilter拦截器，适用于key字符别名串转换 */</span></span><br><span class="line">                List&lt;NameFilter&gt; nameFilters = serializer.nameFilters;</span><br><span class="line">                <span class="keyword">if</span> (nameFilters != <span class="keyword">null</span> &amp;&amp; nameFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        entryKey = <span class="keyword">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        entryKey = <span class="keyword">this</span>.processKey(serializer, object, strKey, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 遍历NameFilter拦截器，适用于key字符串别名转换 */</span></span><br><span class="line">                List&lt;NameFilter&gt; nameFilters = <span class="keyword">this</span>.nameFilters;</span><br><span class="line">                <span class="keyword">if</span> (nameFilters != <span class="keyword">null</span> &amp;&amp; nameFilters.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        entryKey = <span class="keyword">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class="keyword">instanceof</span> Number) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        entryKey = <span class="keyword">this</span>.processKey(serializer, object, strKey, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/** 处理map序列化value拦截器, ValueFilter 和 ContextValueFilter */</span></span><br><span class="line">                <span class="keyword">if</span> (entryKey == <span class="keyword">null</span> || entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    value = <span class="keyword">this</span>.processValue(serializer, <span class="keyword">null</span>, object, (String) entryKey, value);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> objectOrArray = entryKey <span class="keyword">instanceof</span> Map || entryKey <span class="keyword">instanceof</span> Collection;</span><br><span class="line">                    <span class="keyword">if</span> (!objectOrArray) &#123;</span><br><span class="line">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class="line">                        value = <span class="keyword">this</span>.processValue(serializer, <span class="keyword">null</span>, object, strKey, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果开启map为Null，不输出 */</span></span><br><span class="line">                <span class="keyword">if</span> (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entryKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String key = (String) entryKey;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 如果不是第一个属性字段增加分隔符 */</span></span><br><span class="line">                <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">                    out.write(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">                    serializer.println();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 输出key */</span></span><br><span class="line">                out.writeFieldName(key, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">                    out.write(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 开启WriteNonStringKeyAsString, 将key做一次json串转换 */</span></span><br><span class="line">                <span class="keyword">if</span> (out.isEnabled(NON_STRINGKEY_AS_STRING) &amp;&amp; !(entryKey <span class="keyword">instanceof</span> Enum)) &#123;</span><br><span class="line">                    String strEntryKey = JSON.toJSONString(entryKey);</span><br><span class="line">                    serializer.write(strEntryKey);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    serializer.write(entryKey);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                out.write(<span class="string">':'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            first = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果value为空，输出空值 */</span></span><br><span class="line">                out.writeNull();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; clazz = value.getClass();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clazz != preClazz) &#123;</span><br><span class="line">                preClazz = clazz;</span><br><span class="line">                preWriter = serializer.getObjectWriter(clazz);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class="line">                    &amp;&amp; preWriter <span class="keyword">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class="line">                Type valueType = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (fieldType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">                    ParameterizedType parameterizedType = (ParameterizedType) fieldType;</span><br><span class="line">                    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();</span><br><span class="line">                    <span class="keyword">if</span> (actualTypeArguments.length == <span class="number">2</span>) &#123;</span><br><span class="line">                        valueType = actualTypeArguments[<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 特殊处理泛型，这里假定泛型第二参数作为值的真实类型 */</span></span><br><span class="line">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) preWriter;</span><br><span class="line">                javaBeanSerializer.writeNoneASM(serializer, value, entryKey, valueType, features);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 根据value类型的序列化器 序列化value */</span></span><br><span class="line">                preWriter.write(serializer, value, entryKey, <span class="keyword">null</span>, features);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serializer.context = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serializer.decrementIdent();</span><br><span class="line">    <span class="keyword">if</span> (out.isEnabled(SerializerFeature.PrettyFormat) &amp;&amp; map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        serializer.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!unwrapped) &#123;</span><br><span class="line">        out.write(<span class="string">'&#125;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map序列化实现方法主要做了以下几件事情：</p><ol><li>处理对象引用，使用jdk的IdentityHashMap类严格判断对象严格相等。</li><li>针对map的key和value执行拦截器操作。</li><li>针对value的类型，查找value的class类型序列化输出。</li></ol><p>序列化map处理引用的逻辑在 <code>com.alibaba.fastjson.serializer.JSONSerializer#writeReference</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeReference</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    SerialContext context = <span class="keyword">this</span>.context;</span><br><span class="line">    Object current = context.object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果输出引用就是自己this, ref值为 @ */</span></span><br><span class="line">    <span class="keyword">if</span> (object == current) &#123;</span><br><span class="line">        out.write(<span class="string">"&#123;\"$ref\":\"@\"&#125;"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SerialContext parentContext = context.parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果输出引用就是父引用, ref值为 .. */</span></span><br><span class="line">    <span class="keyword">if</span> (parentContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (object == parentContext.object) &#123;</span><br><span class="line">            out.write(<span class="string">"&#123;\"$ref\":\"..\"&#125;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SerialContext rootContext = context;</span><br><span class="line">    <span class="comment">/** 查找最顶层序列化context */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rootContext.parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rootContext = rootContext.parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object == rootContext.object) &#123;</span><br><span class="line">        <span class="comment">/** 如果最顶层引用就是自己this, ref值为 $*/</span></span><br><span class="line">        out.write(<span class="string">"&#123;\"$ref\":\"$\"&#125;"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 常规java对象引用，直接输出 */</span></span><br><span class="line">        out.write(<span class="string">"&#123;\"$ref\":\""</span>);</span><br><span class="line">        out.write(references.get(object).toString());</span><br><span class="line">        out.write(<span class="string">"\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ListSerializer序列化"><a href="#ListSerializer序列化" class="headerlink" title="ListSerializer序列化"></a>ListSerializer序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span></span></span><br><span class="line"><span class="function">                                                                                                   <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class="line">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName);</span><br><span class="line"></span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    Type elementType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (writeClassName) &#123;</span><br><span class="line">        <span class="comment">/** 获取泛型字段真实类型 */</span></span><br><span class="line">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果集合对象为空并且开启WriteNullListAsEmpty特性, 输出[] */</span></span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;?&gt; list = (List&lt;?&gt;) object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果集合对象元素为0, 输出[] */</span></span><br><span class="line">        out.append(<span class="string">"[]"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 创建当前新的序列化context */</span></span><br><span class="line">    SerialContext context = serializer.context;</span><br><span class="line">    serializer.setContext(context, object, fieldName, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    ObjectSerializer itemSerializer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 判断是否开启json格式化 */</span></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">            out.append(<span class="string">'['</span>);</span><br><span class="line">            serializer.incrementIndent();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object item : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    out.append(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                serializer.println();</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 如果存在引用，输出元素引用信息 */</span></span><br><span class="line">                    <span class="keyword">if</span> (serializer.containsReference(item)) &#123;</span><br><span class="line">                        serializer.writeReference(item);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">/** 通过元素包含的类型查找序列化实例 */</span></span><br><span class="line">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class="line">                        SerialContext itemContext = <span class="keyword">new</span> SerialContext(context, object, fieldName, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                        serializer.context = itemContext;</span><br><span class="line">                        <span class="comment">/** 根据具体序列化实例输出 */</span></span><br><span class="line">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    serializer.out.writeNull();</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            serializer.decrementIdent();</span><br><span class="line">            serializer.println();</span><br><span class="line">            out.append(<span class="string">']'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = list.size(); i &lt; size; ++i) &#123;</span><br><span class="line">            Object item = list.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.append(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = item.getClass();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (clazz == Integer.class) &#123;</span><br><span class="line">                    <span class="comment">/** 元素类型如果是整数，直接输出 */</span></span><br><span class="line">                    out.writeInt(((Integer) item).intValue());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Long.class) &#123;</span><br><span class="line">                    <span class="comment">/** 元素类型如果是长整数，直接输出并判断是否追加类型L */</span></span><br><span class="line">                    <span class="keyword">long</span> val = ((Long) item).longValue();</span><br><span class="line">                    <span class="keyword">if</span> (writeClassName) &#123;</span><br><span class="line">                        out.writeLong(val);</span><br><span class="line">                        out.write(<span class="string">'L'</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        out.writeLong(val);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((SerializerFeature.DisableCircularReferenceDetect.mask &amp; features) != <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="comment">/** 如果禁用循环引用检查，根据元素类型查找序列化实例输出 */</span></span><br><span class="line">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class="line">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!out.disableCircularReferenceDetect) &#123;</span><br><span class="line">                            <span class="comment">/** 如果没有禁用循环引用检查，创建新的序列化上下文 */</span></span><br><span class="line">                            SerialContext itemContext = <span class="keyword">new</span> SerialContext(context, object, fieldName, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                            serializer.context = itemContext;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (serializer.containsReference(item)) &#123;</span><br><span class="line">                            <span class="comment">/** 处理对象引用 */</span></span><br><span class="line">                            serializer.writeReference(item);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class="line">                            itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class="line">                            <span class="keyword">if</span> ((SerializerFeature.WriteClassName.mask &amp; features) != <span class="number">0</span></span><br><span class="line">                                    &amp;&amp; itemSerializer <span class="keyword">instanceof</span> JavaBeanSerializer)</span><br><span class="line">                            &#123;</span><br><span class="line">                                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class="line">                                javaBeanSerializer.writeNoneASM(serializer, item, i, elementType, features);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.append(<span class="string">']'</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serializer.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ListSerializer</code>序列化主要判断是否需要格式化json输出，对整型和长整型进行特殊取值，如果是对象类型根据class类别查找序列化实例处理，和hessian2源码实现原理类似。</p><h3 id="DateCodec序列化"><a href="#DateCodec序列化" class="headerlink" title="DateCodec序列化"></a>DateCodec序列化</h3><p>因为日期序列化和前面已经分析的<code>MiscCodec</code>中<code>SimpleDateFormat</code>相近，在此不冗余分析，可以参考我已经添加的注释分析。</p><h3 id="JavaBeanSerializer序列化"><a href="#JavaBeanSerializer序列化" class="headerlink" title="JavaBeanSerializer序列化"></a>JavaBeanSerializer序列化</h3><p>因为前面已经涵盖了绝大部分<code>fastjson</code>序列化源码分析，为了节省篇幅，我准备用一个较为复杂的序列化实现<code>JavaBeanSerializer</code>作为结束这章内容。</p><p>在<code>SerializeConfig#getObjectWriter</code>中有一段逻辑<code>createJavaBeanSerializer</code>，我们针对进行细节分析 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ObjectSerializer <span class="title">createJavaBeanSerializer</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 封装序列化clazz Bean，包含字段类型等等 */</span></span><br><span class="line">    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class="keyword">null</span>, propertyNamingStrategy, fieldBased);</span><br><span class="line">    <span class="keyword">if</span> (beanInfo.fields.length == <span class="number">0</span> &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="comment">/** 如果clazz是迭代器类型，使用MiscCodec序列化，会被序列化成数组 [,,,] */</span></span><br><span class="line">        <span class="keyword">return</span> MiscCodec.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createJavaBeanSerializer(beanInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先进<code>TypeUtils.buildBeanInfo</code>看看内部实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SerializeBeanInfo <span class="title">buildBeanInfo</span><span class="params">(Class&lt;?&gt; beanType //</span></span></span><br><span class="line"><span class="function"><span class="params">        , Map&lt;String,String&gt; aliasMap //</span></span></span><br><span class="line"><span class="function"><span class="params">        , PropertyNamingStrategy propertyNamingStrategy //</span></span></span><br><span class="line"><span class="function"><span class="params">        , <span class="keyword">boolean</span> fieldBased //</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>&#123;</span><br><span class="line">    JSONType jsonType = TypeUtils.getAnnotation(beanType,JSONType.class);</span><br><span class="line">    String[] orders = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> features;</span><br><span class="line">    String typeName = <span class="keyword">null</span>, typeKey = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(jsonType != <span class="keyword">null</span>)&#123;</span><br><span class="line">        orders = jsonType.orders();</span><br><span class="line"></span><br><span class="line">        typeName = jsonType.typeName();</span><br><span class="line">        <span class="keyword">if</span>(typeName.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            typeName = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PropertyNamingStrategy jsonTypeNaming = jsonType.naming();</span><br><span class="line">        <span class="keyword">if</span> (jsonTypeNaming != PropertyNamingStrategy.CamelCase) &#123;</span><br><span class="line">            propertyNamingStrategy = jsonTypeNaming;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        features = SerializerFeature.of(jsonType.serialzeFeatures());</span><br><span class="line">        <span class="comment">/** 查找类型父类是否包含JSONType注解 */</span></span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; supperClass = beanType.getSuperclass()</span><br><span class="line">            ; supperClass != <span class="keyword">null</span> &amp;&amp; supperClass != Object.class</span><br><span class="line">                ; supperClass = supperClass.getSuperclass())&#123;</span><br><span class="line">            JSONType superJsonType = TypeUtils.getAnnotation(supperClass,JSONType.class);</span><br><span class="line">            <span class="keyword">if</span>(superJsonType == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            typeKey = superJsonType.typeKey();</span><br><span class="line">            <span class="keyword">if</span>(typeKey.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 查找类型实现的接口是否包含JSONType注解 */</span></span><br><span class="line">        <span class="keyword">for</span>(Class&lt;?&gt; interfaceClass : beanType.getInterfaces())&#123;</span><br><span class="line">            JSONType superJsonType = TypeUtils.getAnnotation(interfaceClass,JSONType.class);</span><br><span class="line">            <span class="keyword">if</span>(superJsonType != <span class="keyword">null</span>)&#123;</span><br><span class="line">                typeKey = superJsonType.typeKey();</span><br><span class="line">                <span class="keyword">if</span>(typeKey.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(typeKey != <span class="keyword">null</span> &amp;&amp; typeKey.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            typeKey = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        features = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询 */</span></span><br><span class="line">    Map&lt;String,Field&gt; fieldCacheMap = <span class="keyword">new</span> HashMap&lt;String,Field&gt;();</span><br><span class="line">    ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);</span><br><span class="line">    List&lt;FieldInfo&gt; fieldInfoList = fieldBased</span><br><span class="line">            ? computeGettersWithFieldBase(beanType, aliasMap, <span class="keyword">false</span>, propertyNamingStrategy)</span><br><span class="line">            : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class="keyword">false</span>, propertyNamingStrategy);</span><br><span class="line">    FieldInfo[] fields = <span class="keyword">new</span> FieldInfo[fieldInfoList.size()];</span><br><span class="line">    fieldInfoList.toArray(fields);</span><br><span class="line">    FieldInfo[] sortedFields;</span><br><span class="line">    List&lt;FieldInfo&gt; sortedFieldList;</span><br><span class="line">    <span class="keyword">if</span>(orders != <span class="keyword">null</span> &amp;&amp; orders.length != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">/** computeGettersWithFieldBase基于字段解析,</span></span><br><span class="line"><span class="comment">         *  computeGetters基于方法解析+字段解析</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sortedFieldList = fieldBased</span><br><span class="line">                ? computeGettersWithFieldBase(beanType, aliasMap, <span class="keyword">true</span>, propertyNamingStrategy) <span class="comment">//</span></span><br><span class="line">                : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class="keyword">true</span>, propertyNamingStrategy);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        sortedFieldList = <span class="keyword">new</span> ArrayList&lt;FieldInfo&gt;(fieldInfoList);</span><br><span class="line">        Collections.sort(sortedFieldList);</span><br><span class="line">    &#125;</span><br><span class="line">    sortedFields = <span class="keyword">new</span> FieldInfo[sortedFieldList.size()];</span><br><span class="line">    sortedFieldList.toArray(sortedFields);</span><br><span class="line">    <span class="keyword">if</span>(Arrays.equals(sortedFields, fields))&#123;</span><br><span class="line">        sortedFields = fields;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 封装对象的字段信息和方法信息 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SerializeBeanInfo(beanType, jsonType, typeName, typeKey, features, fields, sortedFields);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在解析字段的时候有一个区别，computeGettersWithFieldBase基于字段解析而computeGetters基于方法解析(get + is 开头方法)+字段解析。因为两者的解析类似，这里只给出computeGettersWithFieldBase方法解析 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;FieldInfo&gt; <span class="title">computeGettersWithFieldBase</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Class&lt;?&gt; clazz,</span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> sorted,</span></span></span><br><span class="line"><span class="function"><span class="params">        PropertyNamingStrategy propertyNamingStrategy)</span></span>&#123;</span><br><span class="line">    Map&lt;String,FieldInfo&gt; fieldInfoMap = <span class="keyword">new</span> LinkedHashMap&lt;String,FieldInfo&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Class&lt;?&gt; currentClass = clazz; currentClass != <span class="keyword">null</span>; currentClass = currentClass.getSuperclass())&#123;</span><br><span class="line">        Field[] fields = currentClass.getDeclaredFields();</span><br><span class="line">        <span class="comment">/** 遍历clazz所有字段，把字段信息封装成bean存储到fieldInfoMap中*/</span></span><br><span class="line">        computeFields(currentClass, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 主要处理字段有序的逻辑 */</span></span><br><span class="line">    <span class="keyword">return</span> getFieldInfos(clazz, sorted, fieldInfoMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>computeFields</code>逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">computeFields</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Class&lt;?&gt; clazz,</span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class="line"><span class="function"><span class="params">        PropertyNamingStrategy propertyNamingStrategy,</span></span></span><br><span class="line"><span class="function"><span class="params">        Map&lt;String,FieldInfo&gt; fieldInfoMap,</span></span></span><br><span class="line"><span class="function"><span class="params">        Field[] fields)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">        <span class="comment">/** 忽略静态字段类型 */</span></span><br><span class="line">        <span class="keyword">if</span>(Modifier.isStatic(field.getModifiers()))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 查找当前字段是否包含JSONField注解 */</span></span><br><span class="line">        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class="line">        <span class="keyword">int</span> ordinal = <span class="number">0</span>, serialzeFeatures = <span class="number">0</span>, parserFeatures = <span class="number">0</span>;</span><br><span class="line">        String propertyName = field.getName();</span><br><span class="line">        String label = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(fieldAnnotation != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">/** 忽略不序列化的字段 */</span></span><br><span class="line">            <span class="keyword">if</span>(!fieldAnnotation.serialize())&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/** 获取字段序列化顺序 */</span></span><br><span class="line">            ordinal = fieldAnnotation.ordinal();</span><br><span class="line">            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class="line">            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class="line">            <span class="keyword">if</span>(fieldAnnotation.name().length() != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">/** 属性名字采用JSONField注解上面的name */</span></span><br><span class="line">                propertyName = fieldAnnotation.name();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fieldAnnotation.label().length() != <span class="number">0</span>)&#123;</span><br><span class="line">                label = fieldAnnotation.label();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(aliasMap != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">/** 查找是否包含属性别名的字段 */</span></span><br><span class="line">            propertyName = aliasMap.get(propertyName);</span><br><span class="line">            <span class="keyword">if</span>(propertyName == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(propertyNamingStrategy != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">/** 属性字段命名规则转换 */</span></span><br><span class="line">            propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 封装解析类型的字段和类型 */</span></span><br><span class="line">        <span class="keyword">if</span>(!fieldInfoMap.containsKey(propertyName))&#123;</span><br><span class="line">            FieldInfo fieldInfo = <span class="keyword">new</span> FieldInfo(propertyName, <span class="keyword">null</span>, field, clazz, <span class="keyword">null</span>, ordinal, serialzeFeatures, parserFeatures,</span><br><span class="line">                    <span class="keyword">null</span>, fieldAnnotation, label);</span><br><span class="line">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理字段有序的逻辑<code>getFieldInfos</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;FieldInfo&gt; <span class="title">getFieldInfos</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">boolean</span> sorted, Map&lt;String,FieldInfo&gt; fieldInfoMap)</span></span>&#123;</span><br><span class="line">     List&lt;FieldInfo&gt; fieldInfoList = <span class="keyword">new</span> ArrayList&lt;FieldInfo&gt;();</span><br><span class="line">     String[] orders = <span class="keyword">null</span>;</span><br><span class="line">     <span class="comment">/** 查找clazz上面的JSONType注解 */</span></span><br><span class="line">     JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class="line">     <span class="keyword">if</span>(annotation != <span class="keyword">null</span>)&#123;</span><br><span class="line">         orders = annotation.orders();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(orders != <span class="keyword">null</span> &amp;&amp; orders.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">         LinkedHashMap&lt;String,FieldInfo&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String,FieldInfo&gt;(fieldInfoList.size());</span><br><span class="line">         <span class="keyword">for</span>(FieldInfo field : fieldInfoMap.values())&#123;</span><br><span class="line">             map.put(field.name, field);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">/** 先把有序字段从map移除，并添加到有序列表fieldInfoList中 */</span></span><br><span class="line">         <span class="keyword">for</span>(String item : orders)&#123;</span><br><span class="line">             FieldInfo field = map.get(item);</span><br><span class="line">             <span class="keyword">if</span>(field != <span class="keyword">null</span>)&#123;</span><br><span class="line">                 fieldInfoList.add(field);</span><br><span class="line">                 map.remove(item);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">/** 将map剩余元素追加到有序列表末尾 */</span></span><br><span class="line">         <span class="keyword">for</span>(FieldInfo field : map.values())&#123;</span><br><span class="line">             fieldInfoList.add(field);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">/** 如果注解没有要求顺序，全部添加map元素 */</span></span><br><span class="line">         <span class="keyword">for</span>(FieldInfo fieldInfo : fieldInfoMap.values())&#123;</span><br><span class="line">             fieldInfoList.add(fieldInfo);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(sorted)&#123;</span><br><span class="line">             Collections.sort(fieldInfoList);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> fieldInfoList;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们在看下具体创建<code>JavaBeanSerializer</code>序列化逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">createJavaBeanSerializer</span><span class="params">(SerializeBeanInfo beanInfo)</span> </span>&#123;</span><br><span class="line">    JSONType jsonType = beanInfo.jsonType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> asm = <span class="keyword">this</span>.asm &amp;&amp; !fieldBased;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (jsonType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; serializerClass = jsonType.serializer();</span><br><span class="line">        <span class="keyword">if</span> (serializerClass != Void.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/** 实例化注解指定的类型 */</span></span><br><span class="line">                Object seralizer = serializerClass.newInstance();</span><br><span class="line">                <span class="keyword">if</span> (seralizer <span class="keyword">instanceof</span> ObjectSerializer) &#123;</span><br><span class="line">                    <span class="keyword">return</span> (ObjectSerializer) seralizer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 注解显示指定不使用asm */</span></span><br><span class="line">        <span class="keyword">if</span> (jsonType.asm() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            asm = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 注解显示开启WriteNonStringValueAsString、WriteEnumUsingToString</span></span><br><span class="line"><span class="comment">         * 和NotWriteDefaultValue不使用asm */</span></span><br><span class="line">        <span class="keyword">for</span> (SerializerFeature feature : jsonType.serialzeFeatures()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (SerializerFeature.WriteNonStringValueAsString == feature <span class="comment">//</span></span><br><span class="line">                    || SerializerFeature.WriteEnumUsingToString == feature <span class="comment">//</span></span><br><span class="line">                    || SerializerFeature.NotWriteDefaultValue == feature) &#123;</span><br><span class="line">                asm = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = beanInfo.beanType;</span><br><span class="line">    <span class="comment">/** 非public类型，直接使用JavaBeanSerializer序列化 */</span></span><br><span class="line">    <span class="keyword">if</span> (!Modifier.isPublic(beanInfo.beanType.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanSerializer(beanInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略asm判断检查</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (asm) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** 使用asm字节码库序列化，后面单独列一个章节分析asm源码 */</span></span><br><span class="line">            ObjectSerializer asmSerializer = createASMSerializer(beanInfo);</span><br><span class="line">            <span class="keyword">if</span> (asmSerializer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> asmSerializer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"create asm serializer error, class "</span></span><br><span class="line">                    + clazz, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 默认使用JavaBeanSerializer 序列化类 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JavaBeanSerializer(beanInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK, 一切就绪，接下来有请<code>JavaBeanSerializer</code>序列化实现登场：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, </span></span></span><br><span class="line"><span class="function"><span class="params">                  Object object, </span></span></span><br><span class="line"><span class="function"><span class="params">                  Object fieldName, </span></span></span><br><span class="line"><span class="function"><span class="params">                  Type fieldType, </span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> features,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">boolean</span> unwrapped</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果开启循环引用检查，输出引用并返回 */</span></span><br><span class="line">    <span class="keyword">if</span> (writeReference(serializer, object, features)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> FieldSerializer[] getters;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (out.sortField) &#123;</span><br><span class="line">        getters = <span class="keyword">this</span>.sortedGetters;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        getters = <span class="keyword">this</span>.getters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SerialContext parent = serializer.context;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.beanInfo.beanType.isEnum()) &#123;</span><br><span class="line">        <span class="comment">/** 针对非枚举类型，创建新的上下文 */</span></span><br><span class="line">        serializer.setContext(parent, object, fieldName, <span class="keyword">this</span>.beanInfo.features, features);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> writeAsArray = isWriteAsArray(serializer, features);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span> startSeperator = writeAsArray ? <span class="string">'['</span> : <span class="string">'&#123;'</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">char</span> endSeperator = writeAsArray ? <span class="string">']'</span> : <span class="string">'&#125;'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!unwrapped) &#123;</span><br><span class="line">            out.append(startSeperator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getters.length &gt; <span class="number">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">            serializer.incrementIndent();</span><br><span class="line">            serializer.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> commaFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.beanInfo.features &amp; SerializerFeature.WriteClassName.mask) != <span class="number">0</span></span><br><span class="line">            ||(features &amp; SerializerFeature.WriteClassName.mask) != <span class="number">0</span></span><br><span class="line">            || serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class="line">            Class&lt;?&gt; objClass = object.getClass();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Type type;</span><br><span class="line">            <span class="comment">/** 获取字段的泛型类型 */</span></span><br><span class="line">            <span class="keyword">if</span> (objClass != fieldType &amp;&amp; fieldType <span class="keyword">instanceof</span> WildcardType) &#123;</span><br><span class="line">                type = TypeUtils.getClass(fieldType);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                type = fieldType;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (objClass != type) &#123;</span><br><span class="line">                <span class="comment">/** 输出字段类型名字 */</span></span><br><span class="line">                writeClassName(serializer, beanInfo.typeKey, object);</span><br><span class="line">                commaFlag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> seperator = commaFlag ? <span class="string">','</span> : <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> directWritePrefix = out.quoteFieldNames &amp;&amp; !out.useSingleQuotes;</span><br><span class="line">        <span class="comment">/** 触发序列化BeforeFilter拦截器 */</span></span><br><span class="line">        <span class="keyword">char</span> newSeperator = <span class="keyword">this</span>.writeBefore(serializer, object, seperator);</span><br><span class="line">        commaFlag = newSeperator == <span class="string">','</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getters.length; ++i) &#123;</span><br><span class="line">            FieldSerializer fieldSerializer = getters[i];</span><br><span class="line"></span><br><span class="line">            Field field = fieldSerializer.fieldInfo.field;</span><br><span class="line">            FieldInfo fieldInfo = fieldSerializer.fieldInfo;</span><br><span class="line">            String fieldInfoName = fieldInfo.name;</span><br><span class="line">            Class&lt;?&gt; fieldClass = fieldInfo.fieldClass;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 忽略配置了transient关键字的字段 */</span></span><br><span class="line">            <span class="keyword">if</span> (skipTransient) &#123;</span><br><span class="line">                <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fieldInfo.fieldTransient) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 目前看到注解方法上面 field = null */</span></span><br><span class="line">            <span class="keyword">if</span> (ignoreNonFieldGetter) &#123;</span><br><span class="line">                <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> notApply = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">/** 触发字段PropertyPreFilter拦截器 */</span></span><br><span class="line">            <span class="keyword">if</span> ((!<span class="keyword">this</span>.applyName(serializer, object, fieldInfoName))</span><br><span class="line">                || !<span class="keyword">this</span>.applyLabel(serializer, fieldInfo.label)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (writeAsArray) &#123;</span><br><span class="line">                    notApply = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** ??? */</span></span><br><span class="line">            <span class="keyword">if</span> (beanInfo.typeKey != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; fieldInfoName.equals(beanInfo.typeKey)</span><br><span class="line">                    &amp;&amp; serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object propertyValue;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (notApply) &#123;</span><br><span class="line">                propertyValue = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    propertyValue = fieldSerializer.getPropertyValueDirect(object);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) &#123;</span><br><span class="line">                        propertyValue = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 针对属性名字和属性值 触发PropertyFilter拦截器 */</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.apply(serializer, object, fieldInfoName, propertyValue)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldClass == String.class &amp;&amp; <span class="string">"trim"</span>.equals(fieldInfo.format)) &#123;</span><br><span class="line">                <span class="comment">/** 剔除字符串两边空格 */</span></span><br><span class="line">                <span class="keyword">if</span> (propertyValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    propertyValue = ((String) propertyValue).trim();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String key = fieldInfoName;</span><br><span class="line">            <span class="comment">/** 触发属性名字NameFilter拦截器 */</span></span><br><span class="line">            key = <span class="keyword">this</span>.processKey(serializer, object, key, propertyValue);</span><br><span class="line"></span><br><span class="line">            Object originalValue = propertyValue;</span><br><span class="line">            <span class="comment">/** 触发属性值ContextValueFilter拦截器 */</span></span><br><span class="line">            propertyValue = <span class="keyword">this</span>.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName,</span><br><span class="line">                                                    propertyValue);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (propertyValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> serialzeFeatures = fieldInfo.serialzeFeatures;</span><br><span class="line">                <span class="keyword">if</span> (beanInfo.jsonType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    serialzeFeatures |= SerializerFeature.of(beanInfo.jsonType.serialzeFeatures());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// beanInfo.jsonType</span></span><br><span class="line">                <span class="keyword">if</span> (fieldClass == Boolean.class) &#123;</span><br><span class="line">                    <span class="keyword">int</span> defaultMask = SerializerFeature.WriteNullBooleanAsFalse.mask;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class="line">                    <span class="keyword">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class="number">0</span> &amp;&amp; (out.features &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">/** 针对Boolean类型，值为空，输出false */</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((serialzeFeatures &amp; defaultMask) != <span class="number">0</span> || (out.features &amp; defaultMask) != <span class="number">0</span>) &#123;</span><br><span class="line">                        propertyValue = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldClass == String.class) &#123;</span><br><span class="line">                    <span class="keyword">int</span> defaultMask = SerializerFeature.WriteNullStringAsEmpty.mask;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class="line">                    <span class="keyword">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class="number">0</span> &amp;&amp; (out.features &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((serialzeFeatures &amp; defaultMask) != <span class="number">0</span> || (out.features &amp; defaultMask) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">/** 针对string类型，值为空，输出空串"" */</span></span><br><span class="line">                        propertyValue = <span class="string">""</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Number.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class="line">                    <span class="keyword">int</span> defaultMask = SerializerFeature.WriteNullNumberAsZero.mask;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class="line">                    <span class="keyword">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class="number">0</span> &amp;&amp; (out.features &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((serialzeFeatures &amp; defaultMask) != <span class="number">0</span> || (out.features &amp; defaultMask) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">/** 针对数字类型，值为空，输出0 */</span></span><br><span class="line">                        propertyValue = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class="line">                    <span class="keyword">int</span> defaultMask = SerializerFeature.WriteNullListAsEmpty.mask;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class="line">                    <span class="keyword">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class="number">0</span> &amp;&amp; (out.features &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((serialzeFeatures &amp; defaultMask) != <span class="number">0</span> || (out.features &amp; defaultMask) != <span class="number">0</span>) &#123;</span><br><span class="line">                        propertyValue = Collections.emptyList();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/** 针对值为null，配置序列化不输出特性，则输出json字符串排除这些属性 */</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!writeAsArray) &amp;&amp; (!fieldSerializer.writeNull) &amp;&amp; !out.isEnabled(SerializerFeature.WriteMapNullValue.mask))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 忽略序列化配置为不输出默认值的字段 */</span></span><br><span class="line">            <span class="keyword">if</span> (propertyValue != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (out.notWriteDefaultValue</span><br><span class="line">                    || (fieldInfo.serialzeFeatures &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class="number">0</span></span><br><span class="line">                    || (beanInfo.features &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class="number">0</span></span><br><span class="line">                    )) &#123;</span><br><span class="line">                Class&lt;?&gt; fieldCLass = fieldInfo.fieldClass;</span><br><span class="line">                <span class="keyword">if</span> (fieldCLass == <span class="keyword">byte</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Byte</span><br><span class="line">                    &amp;&amp; ((Byte) propertyValue).byteValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">short</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Short</span><br><span class="line">                           &amp;&amp; ((Short) propertyValue).shortValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">int</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Integer</span><br><span class="line">                           &amp;&amp; ((Integer) propertyValue).intValue() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">long</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Long</span><br><span class="line">                           &amp;&amp; ((Long) propertyValue).longValue() == <span class="number">0L</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">float</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Float</span><br><span class="line">                           &amp;&amp; ((Float) propertyValue).floatValue() == <span class="number">0F</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">double</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Double</span><br><span class="line">                           &amp;&amp; ((Double) propertyValue).doubleValue() == <span class="number">0</span>D) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldCLass == <span class="keyword">boolean</span>.class &amp;&amp; propertyValue <span class="keyword">instanceof</span> Boolean</span><br><span class="line">                           &amp;&amp; !((Boolean) propertyValue).booleanValue()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (commaFlag) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.unwrapped</span><br><span class="line">                        &amp;&amp; propertyValue <span class="keyword">instanceof</span> Map</span><br><span class="line">                        &amp;&amp; ((Map) propertyValue).size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">                <span class="keyword">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">                    serializer.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 应用拦截器后变更了key */</span></span><br><span class="line">            <span class="keyword">if</span> (key != fieldInfoName) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!writeAsArray) &#123;</span><br><span class="line">                    out.writeFieldName(key, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                serializer.write(propertyValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (originalValue != propertyValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!writeAsArray) &#123;</span><br><span class="line">                    fieldSerializer.writePrefix(serializer);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 应用拦截器后变更了属性值，查找value的class类型进行序列化 */</span></span><br><span class="line">                serializer.write(propertyValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!writeAsArray) &#123;</span><br><span class="line">                    <span class="comment">/** 输出属性字段名称 */</span></span><br><span class="line">                    <span class="keyword">if</span> (!fieldInfo.unwrapped) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (directWritePrefix) &#123;</span><br><span class="line">                            out.write(fieldInfo.name_chars, <span class="number">0</span>, fieldInfo.name_chars.length);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            fieldSerializer.writePrefix(serializer);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!writeAsArray) &#123;</span><br><span class="line">                    JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class="line">                    <span class="keyword">if</span> (fieldClass == String.class &amp;&amp; (fieldAnnotation == <span class="keyword">null</span> || fieldAnnotation.serializeUsing() == Void.class)) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/** 处理针对字符串类型属性值输出 */</span></span><br><span class="line">                        <span class="keyword">if</span> (propertyValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> ((out.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class="number">0</span></span><br><span class="line">                                || (fieldSerializer.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class="number">0</span>) &#123;</span><br><span class="line">                                out.writeString(<span class="string">""</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                out.writeNull();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            String propertyValueString = (String) propertyValue;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (out.useSingleQuotes) &#123;</span><br><span class="line">                                out.writeStringWithSingleQuote(propertyValueString);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                out.writeStringWithDoubleQuote(propertyValueString, (<span class="keyword">char</span>) <span class="number">0</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fieldInfo.unwrapped</span><br><span class="line">                                &amp;&amp; propertyValue <span class="keyword">instanceof</span> Map</span><br><span class="line">                                &amp;&amp; ((Map) propertyValue).size() == <span class="number">0</span>) &#123;</span><br><span class="line">                            commaFlag = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/** 基于数组形式输出 [,,,] */</span></span><br><span class="line">                    fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> fieldUnwrappedNull = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.unwrapped</span><br><span class="line">                    &amp;&amp; propertyValue <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">                Map map = ((Map) propertyValue);</span><br><span class="line">                <span class="keyword">if</span> (map.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    fieldUnwrappedNull = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))&#123;</span><br><span class="line">                    <span class="keyword">boolean</span> hasNotNull = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Object value : map.values()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hasNotNull = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!hasNotNull) &#123;</span><br><span class="line">                        fieldUnwrappedNull = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!fieldUnwrappedNull) &#123;</span><br><span class="line">                commaFlag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 触发序列化AfterFilter拦截器 */</span></span><br><span class="line">        <span class="keyword">this</span>.writeAfter(serializer, object, commaFlag ? <span class="string">','</span> : <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getters.length &gt; <span class="number">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">            serializer.decrementIdent();</span><br><span class="line">            serializer.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!unwrapped) &#123;</span><br><span class="line">            out.append(endSeperator);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        String errorMessage = <span class="string">"write javaBean error, fastjson version "</span> + JSON.VERSION;</span><br><span class="line">        <span class="keyword">if</span> (object != <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorMessage += <span class="string">", class "</span> + object.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fieldName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorMessage += <span class="string">", fieldName : "</span> + fieldName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.getMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorMessage += (<span class="string">", "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(errorMessage, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serializer.context = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在序列化过程中我们重点关注一下序列化属性值的逻辑<code>fieldSerializer.writeValue(serializer, propertyValue)</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeValue</span><span class="params">(JSONSerializer serializer, Object propertyValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (runtimeInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; runtimeFieldClass;</span><br><span class="line">        <span class="comment">/** 获取字段的类型 */</span></span><br><span class="line">        <span class="keyword">if</span> (propertyValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            runtimeFieldClass = <span class="keyword">this</span>.fieldInfo.fieldClass;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeFieldClass = propertyValue.getClass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectSerializer fieldSerializer = <span class="keyword">null</span>;</span><br><span class="line">        JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 创建并初始化字段指定序列化类型 */</span></span><br><span class="line">        <span class="keyword">if</span> (fieldAnnotation != <span class="keyword">null</span> &amp;&amp; fieldAnnotation.serializeUsing() != Void.class) &#123;</span><br><span class="line">            fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();</span><br><span class="line">            serializeUsing = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 针对format和primitive类型创建序列化类型 */</span></span><br><span class="line">            <span class="keyword">if</span> (format != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runtimeFieldClass == <span class="keyword">double</span>.class || runtimeFieldClass == Double.class) &#123;</span><br><span class="line">                    fieldSerializer = <span class="keyword">new</span> DoubleSerializer(format);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (runtimeFieldClass == <span class="keyword">float</span>.class || runtimeFieldClass == Float.class) &#123;</span><br><span class="line">                    fieldSerializer = <span class="keyword">new</span> FloatCodec(format);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fieldSerializer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/** 根据属性值class类型查找序列化类型 */</span></span><br><span class="line">                fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 封装序列化类型和属性值的类型 */</span></span><br><span class="line">        runtimeInfo = <span class="keyword">new</span> RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> RuntimeSerializerInfo runtimeInfo = <span class="keyword">this</span>.runtimeInfo;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> fieldFeatures = disableCircularReferenceDetect?</span><br><span class="line">            (fieldInfo.serialzeFeatures|SerializerFeature.DisableCircularReferenceDetect.getMask()):fieldInfo.serialzeFeatures;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (propertyValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        SerializeWriter out  = serializer.out;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fieldInfo.fieldClass == Object.class</span><br><span class="line">                &amp;&amp; out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class="line">            out.writeNull();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 针对属性值为null的情况处理 */</span></span><br><span class="line">        Class&lt;?&gt; runtimeFieldClass = runtimeInfo.runtimeFieldClass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Number.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class="line">            out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (String.class == runtimeFieldClass) &#123;</span><br><span class="line">            out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Boolean.class == runtimeFieldClass) &#123;</span><br><span class="line">            out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class="line">            out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))</span><br><span class="line">                &amp;&amp; fieldSerializer <span class="keyword">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class="line">            out.writeNull();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 序列化null对象 */</span></span><br><span class="line">        fieldSerializer.write(serializer, <span class="keyword">null</span>, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fieldInfo.isEnum) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writeEnumUsingName) &#123;</span><br><span class="line">            <span class="comment">/** 使用枚举名字序列化 */</span></span><br><span class="line">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).name());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (writeEnumUsingToString) &#123;</span><br><span class="line">            <span class="comment">/** 使用枚举toString字符串序列化 */</span></span><br><span class="line">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt; valueClass = propertyValue.getClass();</span><br><span class="line">    ObjectSerializer valueSerializer;</span><br><span class="line">    <span class="keyword">if</span> (valueClass == runtimeInfo.runtimeFieldClass || serializeUsing) &#123;</span><br><span class="line">        <span class="comment">/** 使用序列化注解指定的序列化类型 */</span></span><br><span class="line">        valueSerializer = runtimeInfo.fieldSerializer;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        valueSerializer = serializer.getObjectWriter(valueClass);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (format != <span class="keyword">null</span> &amp;&amp; !(valueSerializer <span class="keyword">instanceof</span> DoubleSerializer || valueSerializer <span class="keyword">instanceof</span> FloatCodec)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (valueSerializer <span class="keyword">instanceof</span> ContextObjectSerializer) &#123;</span><br><span class="line">            ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, <span class="keyword">this</span>.fieldContext);    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            serializer.writeWithFormat(propertyValue, format);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 特殊检查是否是具体类型序列化JavaBeanSerializer、 MapSerializer */</span></span><br><span class="line">    <span class="keyword">if</span> (fieldInfo.unwrapped) &#123;</span><br><span class="line">        <span class="keyword">if</span> (valueSerializer <span class="keyword">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class="line">            JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) valueSerializer;</span><br><span class="line">            javaBeanSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valueSerializer <span class="keyword">instanceof</span> MapSerializer) &#123;</span><br><span class="line">            MapSerializer mapSerializer = (MapSerializer) valueSerializer;</span><br><span class="line">            mapSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 针对字段类型和属性值类型不一致退化成使用JavaBeanSerializer */</span></span><br><span class="line">    <span class="keyword">if</span> ((features &amp; SerializerFeature.WriteClassName.mask) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; valueClass != fieldInfo.fieldClass</span><br><span class="line">            &amp;&amp; JavaBeanSerializer.class.isInstance(valueSerializer)) &#123;</span><br><span class="line">        ((JavaBeanSerializer) valueSerializer).write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 使用值序列化类型处理 */</span></span><br><span class="line">    valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此序列化成json字符串已经全部讲完了，接下来讲解反序列化内容，包含词法分析的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（五）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%94)-json%E5%86%85%E9%83%A8%E6%B3%A8%E5%86%8C%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%94)-json%E5%86%85%E9%83%A8%E6%B3%A8%E5%86%8C%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="序列化回调接口实现分析"><a href="#序列化回调接口实现分析" class="headerlink" title="序列化回调接口实现分析"></a>序列化回调接口实现分析</h2><h3 id="内部注册的序列化"><a href="#内部注册的序列化" class="headerlink" title="内部注册的序列化"></a>内部注册的序列化</h3><p>fastjson针对常用的类型已经注册了序列化实现方案：</p><table><thead><tr><th style="text-align:left">注册的类型</th><th style="text-align:left">序列化实例</th><th style="text-align:center">是否支持序列化</th><th style="text-align:center">是否支持反序列化</th></tr></thead><tbody><tr><td style="text-align:left">Boolean</td><td style="text-align:left">BooleanCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Character</td><td style="text-align:left">CharacterCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Byte</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Integer</td><td style="text-align:left">IntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">LongCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">FloatCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Double</td><td style="text-align:left">DoubleSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">BigDecimal</td><td style="text-align:left">BigDecimalCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">BigInteger</td><td style="text-align:left">BigIntegerCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">String</td><td style="text-align:left">StringCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">byte[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">short[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">int[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">long[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">float[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">double[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">boolean[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">char[]</td><td style="text-align:left">PrimitiveArraySerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">Object[]</td><td style="text-align:left">ObjectArrayCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Class</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">SimpleDateFormat</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Currency</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">TimeZone</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">InetAddress</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Inet4Address</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Inet6Address</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">InetSocketAddress</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">File</td><td style="text-align:left">MiscCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">Appendable</td><td style="text-align:left">AppendableSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">StringBuffer</td><td style="text-align:left">AppendableSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">StringBuilder</td><td style="text-align:left">AppendableSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">Charset</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">Pattern</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">Locale</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">URI</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">URL</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">UUID</td><td style="text-align:left">ToStringSerializer</td><td style="text-align:center">是</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">AtomicBoolean</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicInteger</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicLong</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicIntegerArray</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">AtomicLongArray</td><td style="text-align:left">AtomicCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">WeakReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">SoftReference</td><td style="text-align:left">ReferenceCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">LinkedList</td><td style="text-align:left">CollectionCodec</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr></tbody></table><h3 id="BooleanCodec序列化"><a href="#BooleanCodec序列化" class="headerlink" title="BooleanCodec序列化"></a>BooleanCodec序列化</h3><p>其实理解了前面分析<code>SerializeWriter</code>, 接下来的内容比较容易理解, <code>BooleanCodec</code> 序列化实现 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是boolean值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullBooleanAsFalse特性, 输出false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean value = (Boolean) object;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value.booleanValue()) &#123;</span><br><span class="line">        out.write(<span class="string">"true"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.write(<span class="string">"false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BooleanCodec</code>序列化实现主要判断是否开启如果为null值是否输出false，否则输出boolean字面量值。</p><h3 id="CharacterCodec序列化"><a href="#CharacterCodec序列化" class="headerlink" title="CharacterCodec序列化"></a>CharacterCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    Character value = (Character) object;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 字符串为空，输出空字符串 */</span></span><br><span class="line">        out.writeString(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> c = value.charValue();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/** 空白字符，输出unicode空格字符 */</span></span><br><span class="line">        out.writeString(<span class="string">"\u0000"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 输出字符串值 */</span></span><br><span class="line">        out.writeString(value.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IntegerCodec序列化"><a href="#IntegerCodec序列化" class="headerlink" title="IntegerCodec序列化"></a>IntegerCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    Number value = (Number) object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是整形值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 判断整形或者长整型，直接输出 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">        out.writeLong(value.longValue());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.writeInt(value.intValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果开启WriteClassName特性，输出具体值类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class="line">        <span class="keyword">if</span> (clazz == Byte.class) &#123;</span><br><span class="line">            out.write(<span class="string">'B'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz == Short.class) &#123;</span><br><span class="line">            out.write(<span class="string">'S'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LongCodec序列化"><a href="#LongCodec序列化" class="headerlink" title="LongCodec序列化"></a>LongCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是长整形值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> value = ((Long) object).longValue();</span><br><span class="line">        out.writeLong(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果长整型值范围和整型相同，显示添加L 标识为long */</span></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class="line">            &amp;&amp; value &lt;= Integer.MAX_VALUE &amp;&amp; value &gt;= Integer.MIN_VALUE</span><br><span class="line">            &amp;&amp; fieldType != Long.class</span><br><span class="line">            &amp;&amp; fieldType != <span class="keyword">long</span>.class) &#123;</span><br><span class="line">            out.write(<span class="string">'L'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Long</code>类型序列化会特殊标识值落在整数范围内，如果开启<code>WriteClassName</code>序列化特性，会追加L字符。</p><h3 id="FloatCodec序列化"><a href="#FloatCodec序列化" class="headerlink" title="FloatCodec序列化"></a>FloatCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是float值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> floatValue = ((Float) object).floatValue();</span><br><span class="line">    <span class="keyword">if</span> (decimalFormat != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 转换一下浮点数值格式 */</span></span><br><span class="line">        String floatText = decimalFormat.format(floatValue);</span><br><span class="line">        out.write(floatText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.writeFloat(floatValue, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BigDecimalCodec序列化"><a href="#BigDecimalCodec序列化" class="headerlink" title="BigDecimalCodec序列化"></a>BigDecimalCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是BigDecimal值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BigDecimal val = (BigDecimal) object;</span><br><span class="line"></span><br><span class="line">        String outText;</span><br><span class="line">        <span class="comment">/** 如果序列化开启WriteBigDecimalAsPlain特性，搞定度输出不会包含指数e */</span></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) &#123;</span><br><span class="line">            outText = val.toPlainString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            outText = val.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(outText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName) &amp;&amp; fieldType != BigDecimal.class &amp;&amp; val.scale() == <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(<span class="string">'.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BigIntegerCodec序列化"><a href="#BigIntegerCodec序列化" class="headerlink" title="BigIntegerCodec序列化"></a>BigIntegerCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是BigInteger值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    BigInteger val = (BigInteger) object;</span><br><span class="line">    out.write(val.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringCodec序列化"><a href="#StringCodec序列化" class="headerlink" title="StringCodec序列化"></a>StringCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, String value)</span> </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是string值, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串""</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.writeString(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PrimitiveArraySerializer序列化"><a href="#PrimitiveArraySerializer序列化" class="headerlink" title="PrimitiveArraySerializer序列化"></a>PrimitiveArraySerializer序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 当前object是数组值, 如果为null,</span></span><br><span class="line"><span class="comment">         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串""</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写int数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">int</span>[]) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = (<span class="keyword">int</span>[]) object;</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.writeInt(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写short数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">short</span>[]) &#123;</span><br><span class="line">        <span class="keyword">short</span>[] array = (<span class="keyword">short</span>[]) object;</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.writeInt(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写long数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">long</span>[]) &#123;</span><br><span class="line">        <span class="keyword">long</span>[] array = (<span class="keyword">long</span>[]) object;</span><br><span class="line"></span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.writeLong(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写boolean数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">boolean</span>[]) &#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] array = (<span class="keyword">boolean</span>[]) object;</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写float数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">float</span>[]) &#123;</span><br><span class="line">        <span class="keyword">float</span>[] array = (<span class="keyword">float</span>[]) object;</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">float</span> item = array[i];</span><br><span class="line">            <span class="keyword">if</span> (Float.isNaN(item)) &#123;</span><br><span class="line">                out.writeNull();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.append(Float.toString(item));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 循环写double数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">double</span>[]) &#123;</span><br><span class="line">        <span class="keyword">double</span>[] array = (<span class="keyword">double</span>[]) object;</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">double</span> item = array[i];</span><br><span class="line">            <span class="keyword">if</span> (Double.isNaN(item)) &#123;</span><br><span class="line">                out.writeNull();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.append(Double.toString(item));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 写字节数组 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] array = (<span class="keyword">byte</span>[]) object;</span><br><span class="line">        out.writeByteArray(array);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** char数组当做字符串 */</span></span><br><span class="line">    <span class="keyword">char</span>[] chars = (<span class="keyword">char</span>[]) object;</span><br><span class="line">    out.writeString(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectArrayCodec序列化"><a href="#ObjectArrayCodec序列化" class="headerlink" title="ObjectArrayCodec序列化"></a>ObjectArrayCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span></span></span><br><span class="line"><span class="function">                                                                                                   <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    Object[] array = (Object[]) object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是数组对象, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = array.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> end = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是数组对象, 如果为没有元素, 输出空串[] */</span></span><br><span class="line">    <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">        out.append(<span class="string">"[]"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SerialContext context = serializer.context;</span><br><span class="line">    serializer.setContext(context, object, fieldName, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; preClazz = <span class="keyword">null</span>;</span><br><span class="line">        ObjectSerializer preWriter = <span class="keyword">null</span>;</span><br><span class="line">        out.append(<span class="string">'['</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  如果开启json格式化，循环输出数组对象，</span></span><br><span class="line"><span class="comment">         *  会根据数组元素class类型查找序列化实例输出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class="line">            serializer.incrementIndent();</span><br><span class="line">            serializer.println();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    out.write(<span class="string">','</span>);</span><br><span class="line">                    serializer.println();</span><br><span class="line">                &#125;</span><br><span class="line">                serializer.write(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            serializer.decrementIdent();</span><br><span class="line">            serializer.println();</span><br><span class="line">            out.write(<span class="string">']'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; ++i) &#123;</span><br><span class="line">            Object item = array[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.append(<span class="string">"null,"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (serializer.containsReference(item)) &#123;</span><br><span class="line">                    serializer.writeReference(item);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Class&lt;?&gt; clazz = item.getClass();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/** 如果当前序列化元素和前一次class类型相同，避免再一次class类型查找序列化实例 */</span></span><br><span class="line">                    <span class="keyword">if</span> (clazz == preClazz) &#123;</span><br><span class="line">                        preWriter.write(serializer, item, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        preClazz = clazz;</span><br><span class="line">                        <span class="comment">/** 查找数组元素class类型的序列化器 序列化item */</span></span><br><span class="line">                        preWriter = serializer.getObjectWriter(clazz);</span><br><span class="line">                        preWriter.write(serializer, item, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                out.append(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object item = array[end];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.append(<span class="string">"null]"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (serializer.containsReference(item)) &#123;</span><br><span class="line">                serializer.writeReference(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serializer.writeWithFieldName(item, end);</span><br><span class="line">            &#125;</span><br><span class="line">            out.append(<span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serializer.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ObjectArrayCodec</code>序列化主要判断是否开启格式化输出json，如果是输出添加适当的缩进。针对数组元素不一样会根据元素class类型查找具体的序列化器输出，这里优化了如果元素相同的元素避免冗余的查找序列化器。</p><h3 id="MiscCodec序列化"><a href="#MiscCodec序列化" class="headerlink" title="MiscCodec序列化"></a>MiscCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; objClass = object.getClass();</span><br><span class="line"></span><br><span class="line">    String strVal;</span><br><span class="line">    <span class="keyword">if</span> (objClass == SimpleDateFormat.class) &#123;</span><br><span class="line">        String pattern = ((SimpleDateFormat) object).toPattern();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 输出SimpleDateFormat类型的类型 */</span></span><br><span class="line">        <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object.getClass() != fieldType) &#123;</span><br><span class="line">                out.write(<span class="string">'&#123;'</span>);</span><br><span class="line">                out.writeFieldName(JSON.DEFAULT_TYPE_KEY);</span><br><span class="line">                serializer.write(object.getClass().getName());</span><br><span class="line">                out.writeFieldValue(<span class="string">','</span>, <span class="string">"val"</span>, pattern);</span><br><span class="line">                out.write(<span class="string">'&#125;'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 转换SimpleDateFormat对象成pattern字符串 */</span></span><br><span class="line">        strVal = pattern;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objClass == Class.class) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = (Class&lt;?&gt;) object;</span><br><span class="line">        <span class="comment">/** 转换Class对象成name字符串 */</span></span><br><span class="line">        strVal = clazz.getName();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objClass == InetSocketAddress.class) &#123;</span><br><span class="line">        InetSocketAddress address = (InetSocketAddress) object;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = address.getAddress();</span><br><span class="line">        <span class="comment">/** 转换InetSocketAddress对象成地址和端口字符串 */</span></span><br><span class="line">        out.write(<span class="string">'&#123;'</span>);</span><br><span class="line">        <span class="keyword">if</span> (inetAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.writeFieldName(<span class="string">"address"</span>);</span><br><span class="line">            serializer.write(inetAddress);</span><br><span class="line">            out.write(<span class="string">','</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.writeFieldName(<span class="string">"port"</span>);</span><br><span class="line">        out.writeInt(address.getPort());</span><br><span class="line">        out.write(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> File) &#123;</span><br><span class="line">        <span class="comment">/** 转换File对象成文件路径字符串 */</span></span><br><span class="line">        strVal = ((File) object).getPath();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> InetAddress) &#123;</span><br><span class="line">        <span class="comment">/** 转换InetAddress对象成主机地址字符串 */</span></span><br><span class="line">        strVal = ((InetAddress) object).getHostAddress();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> TimeZone) &#123;</span><br><span class="line">        TimeZone timeZone = (TimeZone) object;</span><br><span class="line">        <span class="comment">/** 转换TimeZone对象成时区id字符串 */</span></span><br><span class="line">        strVal = timeZone.getID();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Currency) &#123;</span><br><span class="line">        Currency currency = (Currency) object;</span><br><span class="line">        <span class="comment">/** 转换Currency对象成币别编码字符串 */</span></span><br><span class="line">        strVal = currency.getCurrencyCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> JSONStreamAware) &#123;</span><br><span class="line">        JSONStreamAware aware = (JSONStreamAware) object;</span><br><span class="line">        aware.writeJSONString(out);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Iterator) &#123;</span><br><span class="line">        Iterator&lt;?&gt; it = ((Iterator&lt;?&gt;) object);</span><br><span class="line">        <span class="comment">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class="line">        writeIterator(serializer, out, it);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Iterable) &#123;</span><br><span class="line">        <span class="comment">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class="line">        Iterator&lt;?&gt; it = ((Iterable&lt;?&gt;) object).iterator();</span><br><span class="line">        writeIterator(serializer, out, it);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">        Map.Entry entry = (Map.Entry) object;</span><br><span class="line">        Object objKey = entry.getKey();</span><br><span class="line">        Object objVal = entry.getValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 输出map的Entry值 */</span></span><br><span class="line">        <span class="keyword">if</span> (objKey <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String key = (String) objKey;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String value = (String) objVal;</span><br><span class="line">                out.writeFieldValueStringWithDoubleQuoteCheck(<span class="string">'&#123;'</span>, key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.write(<span class="string">'&#123;'</span>);</span><br><span class="line">                out.writeFieldName(key);</span><br><span class="line">                <span class="comment">/** 根据value的class类型查找序列化器并输出 */</span></span><br><span class="line">                serializer.write(objVal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 根据key、value的class类型查找序列化器并输出 */</span></span><br><span class="line">            out.write(<span class="string">'&#123;'</span>);</span><br><span class="line">            serializer.write(objKey);</span><br><span class="line">            out.write(<span class="string">':'</span>);</span><br><span class="line">            serializer.write(objVal);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object.getClass().getName().equals(<span class="string">"net.sf.json.JSONNull"</span>)) &#123;</span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"not support class : "</span> + objClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out.writeString(strVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MiscCodec</code>序列化的主要思想是吧JDK内部常用的对象简化处理，比如TimeZone只保留id输出，极大地降低了输出字节大小。</p><h3 id="AppendableSerializer序列化"><a href="#AppendableSerializer序列化" class="headerlink" title="AppendableSerializer序列化"></a>AppendableSerializer序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object实现了Appendable接口, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串""</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        SerializeWriter out = serializer.out;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出对象toString结果作为json串 */</span></span><br><span class="line">    serializer.write(object.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ToStringSerializer序列化"><a href="#ToStringSerializer序列化" class="headerlink" title="ToStringSerializer序列化"></a>ToStringSerializer序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果为null, 输出空串"null" */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出对象toString结果作为json串 */</span></span><br><span class="line">    String strVal = object.toString();</span><br><span class="line">    out.writeString(strVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AtomicCodec序列化"><a href="#AtomicCodec序列化" class="headerlink" title="AtomicCodec序列化"></a>AtomicCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AtomicInteger) &#123;</span><br><span class="line">        AtomicInteger val = (AtomicInteger) object;</span><br><span class="line">        <span class="comment">/** 获取整数输出 */</span></span><br><span class="line">        out.writeInt(val.get());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AtomicLong) &#123;</span><br><span class="line">        AtomicLong val = (AtomicLong) object;</span><br><span class="line">        <span class="comment">/** 获取长整数输出 */</span></span><br><span class="line">        out.writeLong(val.get());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AtomicBoolean) &#123;</span><br><span class="line">        AtomicBoolean val = (AtomicBoolean) object;</span><br><span class="line">        <span class="comment">/** 获取boolean值输出 */</span></span><br><span class="line">        out.append(val.get() ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是原子数组类型, 如果为null，输出[] */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 遍历AtomicIntegerArray，输出int数组类型 */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AtomicIntegerArray) &#123;</span><br><span class="line">        AtomicIntegerArray array = (AtomicIntegerArray) object;</span><br><span class="line">        <span class="keyword">int</span> len = array.length();</span><br><span class="line">        out.write(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            out.writeInt(val);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="string">']'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 遍历AtomicLongArray，输出long数组类型 */</span></span><br><span class="line">    AtomicLongArray array = (AtomicLongArray) object;</span><br><span class="line">    <span class="keyword">int</span> len = array.length();</span><br><span class="line">    out.write(<span class="string">'['</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> val = array.get(i);</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            out.write(<span class="string">','</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.writeLong(val);</span><br><span class="line">    &#125;</span><br><span class="line">    out.write(<span class="string">']'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReferenceCodec序列化"><a href="#ReferenceCodec序列化" class="headerlink" title="ReferenceCodec序列化"></a>ReferenceCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Object item;</span><br><span class="line">    <span class="comment">/** 当前object是Reference类型,</span></span><br><span class="line"><span class="comment">     *  调用get()查找对应的class序列化器输出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object <span class="keyword">instanceof</span> AtomicReference) &#123;</span><br><span class="line">        AtomicReference val = (AtomicReference) object;</span><br><span class="line">        item = val.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        item = ((Reference) object).get();</span><br><span class="line">    &#125;</span><br><span class="line">    serializer.write(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CollectionCodec序列化"><a href="#CollectionCodec序列化" class="headerlink" title="CollectionCodec序列化"></a>CollectionCodec序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerializeWriter out = serializer.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 当前object是集合对象, 如果为null,</span></span><br><span class="line"><span class="comment">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type elementType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class="line">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/** 获取字段泛型类型 */</span></span><br><span class="line">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collection&lt;?&gt; collection = (Collection&lt;?&gt;) object;</span><br><span class="line"></span><br><span class="line">    SerialContext context = serializer.context;</span><br><span class="line">    serializer.setContext(context, object, fieldName, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (HashSet.class == collection.getClass()) &#123;</span><br><span class="line">            out.append(<span class="string">"Set"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TreeSet.class == collection.getClass()) &#123;</span><br><span class="line">            out.append(<span class="string">"TreeSet"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        out.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object item : collection) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i++ != <span class="number">0</span>) &#123;</span><br><span class="line">                out.append(<span class="string">','</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.writeNull();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; clazz = item.getClass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 获取整形类型值，输出 */</span></span><br><span class="line">            <span class="keyword">if</span> (clazz == Integer.class) &#123;</span><br><span class="line">                out.writeInt(((Integer) item).intValue());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 获取整形长类型值，输出并添加L标识(如果开启WriteClassName特性) */</span></span><br><span class="line">            <span class="keyword">if</span> (clazz == Long.class) &#123;</span><br><span class="line">                out.writeLong(((Long) item).longValue());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">                    out.write(<span class="string">'L'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class="line">            ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);</span><br><span class="line">            <span class="keyword">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class="line">                    &amp;&amp; itemSerializer <span class="keyword">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class="line">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class="line">                javaBeanSerializer.writeNoneASM(serializer, item, i - <span class="number">1</span>, elementType, features);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                itemSerializer.write(serializer, item, i - <span class="number">1</span>, elementType, features);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.append(<span class="string">']'</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        serializer.context = context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（四）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E5%9B%9B)-json%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E5%9B%9B)-json%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>fastjson序列化主要使用入口就是在<code>JSON.java</code>类中，它提供非常简便和友好的api将java对象转换成json字符串。</p><h3 id="JSON成员函数"><a href="#JSON成员函数" class="headerlink" title="JSON成员函数"></a>JSON成员函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  便捷序列化java对象，序列化对象可以包含任意泛型属性字段，但是不适用本身是泛型的对象。</span></span><br><span class="line"><span class="comment"> *  默认序列化返回字符串，可以使用writeJSONString(Writer, Object, SerializerFeature[])</span></span><br><span class="line"><span class="comment"> *  将序列化字符串输出到指定输出器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接调用重载方法，将指定object序列化成json字符串，忽略序列化filter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, emptyFilters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用便捷接口toJSONString方法，可以将任意java对象序列化为json字符串，内部调用<code>toJSONString(Object, SerializeFilter[], SerializerFeature... )</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializeFilter[] filters, SerializerFeature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, SerializeConfig.globalInstance, filters, <span class="keyword">null</span>, DEFAULT_GENERATE_FEATURE, features);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟踪方法调用到<code>toJSONString(Object, SerializeConfig ,SerializeFilter[], String, int, SerializerFeature... )</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object,                   <span class="comment">/** 序列化对象    */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializeConfig config,          <span class="comment">/** 全局序列化配置 */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializeFilter[] filters,       <span class="comment">/** 序列化拦截器   */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                                  String dateFormat,               <span class="comment">/** 序列化日期格式 */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> defaultFeatures,             <span class="comment">/** 默认序列化特性 */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializerFeature... features)</span> </span>&#123; <span class="comment">/** 自定义序列化特性 */</span></span><br><span class="line">    <span class="comment">/** 初始化序列化writer，用features覆盖defaultFeatures配置 */</span></span><br><span class="line">    SerializeWriter out = <span class="keyword">new</span> SerializeWriter(<span class="keyword">null</span>, defaultFeatures, features);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  初始化JSONSerializer，序列化类型由它委托config查找具体</span></span><br><span class="line"><span class="comment">         *  序列化处理器处理，序列化结果写入out的buffer中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out, config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dateFormat != <span class="keyword">null</span> &amp;&amp; dateFormat.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            serializer.setDateFormat(dateFormat);</span><br><span class="line">            <span class="comment">/** 调用out 重新配置属性 并且打开WriteDateUseDateFormat特性 */</span></span><br><span class="line">            serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SerializeFilter filter : filters) &#123;</span><br><span class="line">                <span class="comment">/** 添加拦截器 */</span></span><br><span class="line">                serializer.addFilter(filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 使用序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class="line">        serializer.write(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个序列化方法实际并不是真正执行序列化操作，首先做序列化特性配置，然后追加序列化拦截器，开始执行序列化对象操作委托给了config对象查找。</p><p>我们继续进入<code>serializer.write(object)</code> 查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果对象为空，直接输出 "null" 字符串 */</span></span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    <span class="comment">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class="line">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 使用具体serializer实例处理对象 */</span></span><br><span class="line">        writer.write(<span class="keyword">this</span>, object, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化回调接口"><a href="#序列化回调接口" class="headerlink" title="序列化回调接口"></a>序列化回调接口</h2><h3 id="ObjectSerializer序列化接口"><a href="#ObjectSerializer序列化接口" class="headerlink" title="ObjectSerializer序列化接口"></a>ObjectSerializer序列化接口</h3><p>我们发现真正序列化对象的时候是由具体<code>ObjectSerializer</code>实例完成，我们首先查看一下接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(JSONSerializer serializer, <span class="comment">/** json序列化实例 */</span></span></span></span><br><span class="line"><span class="function"><span class="params">           Object object,       <span class="comment">/** 待序列化的对象*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">           Object fieldName,    <span class="comment">/** 待序列化字段*/</span></span></span></span><br><span class="line"><span class="function"><span class="params">           Type fieldType,      <span class="comment">/** 待序列化字段类型 */</span></span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> features)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>当fastjson序列化特定的字段时会回调这个方法。</p><p>我们继续跟踪<code>writer.write(this, object, null, null, 0)</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果对象为空，直接输出 "null" 字符串 */</span></span><br><span class="line">        out.writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    <span class="comment">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class="line">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 使用具体serializer实例处理对象 */</span></span><br><span class="line">        writer.write(<span class="keyword">this</span>, object, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现在方法内部调用<code>getObjectWriter(clazz)</code>根据具体类型查找序列化实例，方法内部只有一行调用 <code>config.getObjectWriter(clazz)</code>，让我们更进一步查看委托实现细节<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;)</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getObjectWriter(clazz, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部又调用<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;, boolean)</code>，这个类实现相对复杂了一些，我会按照代码顺序梳理所有序列化实例的要点 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">boolean</span> create)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 首先从内部已经注册查找特定class的序列化实例 */</span></span><br><span class="line">    ObjectSerializer writer = serializers.get(clazz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="comment">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class="line">            <span class="keyword">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class="line">                <span class="keyword">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                    <span class="comment">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class="line">                    put(forType, autowired);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException ex) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class="line">        writer = serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 使用加载JSON类的加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class="line">        <span class="keyword">final</span> ClassLoader classLoader = JSON.class.getClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (classLoader != Thread.currentThread().getContextClassLoader()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class="line">                    <span class="keyword">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                        <span class="comment">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class="line">                        put(forType, autowired);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassCastException ex) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class="line">            writer = serializers.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String className = clazz.getName();</span><br><span class="line">        Class&lt;?&gt; superClass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类Map接口，使用MapSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = MapSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (List.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类List接口，使用ListSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = ListSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类Collection接口，使用CollectionCodec序列化 */</span></span><br><span class="line">            put(clazz, writer = CollectionCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Date.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class继承Date，使用DateCodec序列化 */</span></span><br><span class="line">            put(clazz, writer = DateCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JSONAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类JSONAware接口，使用JSONAwareSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = JSONAwareSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JSONSerializable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类JSONSerializable接口，使用JSONSerializableSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = JSONSerializableSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JSONStreamAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现类JSONStreamAware接口，使用MiscCodecr序列化 */</span></span><br><span class="line">            put(clazz, writer = MiscCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isEnum()) &#123;</span><br><span class="line">            JSONType jsonType = TypeUtils.getAnnotation(clazz, JSONType.class);</span><br><span class="line">            <span class="keyword">if</span> (jsonType != <span class="keyword">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class="line">                <span class="comment">/** 如果是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class="line"><span class="comment">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 如果是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class="line"><span class="comment">                 *  使用EnumSerializer序列化</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                put(clazz, writer = EnumSerializer.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((superClass = clazz.getSuperclass()) != <span class="keyword">null</span> &amp;&amp; superClass.isEnum()) &#123;</span><br><span class="line">            JSONType jsonType = TypeUtils.getAnnotation(superClass, JSONType.class);</span><br><span class="line">            <span class="keyword">if</span> (jsonType != <span class="keyword">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class="line">                <span class="comment">/** 如果父类是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class="line"><span class="comment">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 如果父类是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class="line"><span class="comment">                 *  使用EnumSerializer序列化</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                put(clazz, writer = EnumSerializer.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isArray()) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class="line">            <span class="comment">/** 如果是数组类型，根据数组实际类型查找序列化实例 */</span></span><br><span class="line">            ObjectSerializer compObjectSerializer = getObjectWriter(componentType);</span><br><span class="line">            put(clazz, writer = <span class="keyword">new</span> ArraySerializer(componentType, compObjectSerializer));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 注册通用JavaBeanSerializer序列化处理 Throwable */</span></span><br><span class="line">            SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class="keyword">null</span>, propertyNamingStrategy);</span><br><span class="line">            beanInfo.features |= SerializerFeature.WriteClassName.mask;</span><br><span class="line">            put(clazz, writer = <span class="keyword">new</span> JavaBeanSerializer(beanInfo));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现Map.Entry接口或者继承类TimeZone，使用MiscCodecr序列化 */</span></span><br><span class="line">            put(clazz, writer = MiscCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现Appendable接口，使用AppendableSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = AppendableSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Charset.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class继承Charset抽象类，使用ToStringSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Enumeration.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现Enumeration接口，使用EnumerationSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = EnumerationSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Calendar.class.isAssignableFrom(clazz)</span><br><span class="line">                || XMLGregorianCalendar.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class继承类Calendar或者XMLGregorianCalendar，使用CalendarCodec序列化 */</span></span><br><span class="line">            put(clazz, writer = CalendarCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Clob.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现Clob接口，使用ClobSeriliazer序列化 */</span></span><br><span class="line">            put(clazz, writer = ClobSeriliazer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TypeUtils.isPath(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现java.nio.file.Path接口，使用ToStringSerializer序列化 */</span></span><br><span class="line">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Iterator.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="comment">/** 如果class实现Iterator接口，使用MiscCodec序列化 */</span></span><br><span class="line">            put(clazz, writer = MiscCodec.instance);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  如果class的name是"java.awt."开头 并且</span></span><br><span class="line"><span class="comment">             *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(<span class="string">"java.awt."</span>)</span><br><span class="line">                &amp;&amp; AwtCodec.support(clazz)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="comment">// awt</span></span><br><span class="line">                <span class="keyword">if</span> (!awtError) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        String[] names = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                                <span class="string">"java.awt.Color"</span>,</span><br><span class="line">                                <span class="string">"java.awt.Font"</span>,</span><br><span class="line">                                <span class="string">"java.awt.Point"</span>,</span><br><span class="line">                                <span class="string">"java.awt.Rectangle"</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                                <span class="comment">/** 如果系统支持4中类型， 使用AwtCodec 序列化 */</span></span><br><span class="line">                                put(Class.forName(name), writer = AwtCodec.instance);</span><br><span class="line">                                <span class="keyword">return</span> writer;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        awtError = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="comment">// skip</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// jdk8</span></span><br><span class="line">            <span class="keyword">if</span> ((!jdk8Error) <span class="comment">//</span></span><br><span class="line">                &amp;&amp; (className.startsWith(<span class="string">"java.time."</span>) <span class="comment">//</span></span><br><span class="line">                    || className.startsWith(<span class="string">"java.util.Optional"</span>) <span class="comment">//</span></span><br><span class="line">                    || className.equals(<span class="string">"java.util.concurrent.atomic.LongAdder"</span>)</span><br><span class="line">                    || className.equals(<span class="string">"java.util.concurrent.atomic.DoubleAdder"</span>)</span><br><span class="line">                )) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    &#123;</span><br><span class="line">                        String[] names = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                                <span class="string">"java.time.LocalDateTime"</span>,</span><br><span class="line">                                <span class="string">"java.time.LocalDate"</span>,</span><br><span class="line">                                <span class="string">"java.time.LocalTime"</span>,</span><br><span class="line">                                <span class="string">"java.time.ZonedDateTime"</span>,</span><br><span class="line">                                <span class="string">"java.time.OffsetDateTime"</span>,</span><br><span class="line">                                <span class="string">"java.time.OffsetTime"</span>,</span><br><span class="line">                                <span class="string">"java.time.ZoneOffset"</span>,</span><br><span class="line">                                <span class="string">"java.time.ZoneRegion"</span>,</span><br><span class="line">                                <span class="string">"java.time.Period"</span>,</span><br><span class="line">                                <span class="string">"java.time.Duration"</span>,</span><br><span class="line">                                <span class="string">"java.time.Instant"</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                                <span class="comment">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 序列化 */</span></span><br><span class="line">                                put(Class.forName(name), writer = Jdk8DateCodec.instance);</span><br><span class="line">                                <span class="keyword">return</span> writer;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#123;</span><br><span class="line">                        String[] names = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                                <span class="string">"java.util.Optional"</span>,</span><br><span class="line">                                <span class="string">"java.util.OptionalDouble"</span>,</span><br><span class="line">                                <span class="string">"java.util.OptionalInt"</span>,</span><br><span class="line">                                <span class="string">"java.util.OptionalLong"</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                                <span class="comment">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 序列化 */</span></span><br><span class="line">                                put(Class.forName(name), writer = OptionalCodec.instance);</span><br><span class="line">                                <span class="keyword">return</span> writer;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#123;</span><br><span class="line">                        String[] names = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                                <span class="string">"java.util.concurrent.atomic.LongAdder"</span>,</span><br><span class="line">                                <span class="string">"java.util.concurrent.atomic.DoubleAdder"</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                                <span class="comment">/** 如果系统支持JDK8中原子类型， 使用AdderSerializer 序列化 */</span></span><br><span class="line">                                put(Class.forName(name), writer = AdderSerializer.instance);</span><br><span class="line">                                <span class="keyword">return</span> writer;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    <span class="comment">// skip</span></span><br><span class="line">                    jdk8Error = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!oracleJdbcError) <span class="comment">//</span></span><br><span class="line">                &amp;&amp; className.startsWith(<span class="string">"oracle.sql."</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String[] names = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                            <span class="string">"oracle.sql.DATE"</span>,</span><br><span class="line">                            <span class="string">"oracle.sql.TIMESTAMP"</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                            <span class="comment">/** 如果系统支持oralcle驱动中日期类型， 使用DateCodec 序列化 */</span></span><br><span class="line">                            put(Class.forName(name), writer = DateCodec.instance);</span><br><span class="line">                            <span class="keyword">return</span> writer;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    <span class="comment">// skip</span></span><br><span class="line">                    oracleJdbcError = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!springfoxError) <span class="comment">//</span></span><br><span class="line">                &amp;&amp; className.equals(<span class="string">"springfox.documentation.spring.web.json.Json"</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">/** 如果系统支持springfox-spring-web框架中Json类型， 使用SwaggerJsonSerializer 序列化 */</span></span><br><span class="line">                    put(Class.forName(<span class="string">"springfox.documentation.spring.web.json.Json"</span>),</span><br><span class="line">                            writer = SwaggerJsonSerializer.instance);</span><br><span class="line">                    <span class="keyword">return</span> writer;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// skip</span></span><br><span class="line">                    springfoxError = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!guavaError) <span class="comment">//</span></span><br><span class="line">                    &amp;&amp; className.startsWith(<span class="string">"com.google.common.collect."</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String[] names = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                            <span class="string">"com.google.common.collect.HashMultimap"</span>,</span><br><span class="line">                            <span class="string">"com.google.common.collect.LinkedListMultimap"</span>,</span><br><span class="line">                            <span class="string">"com.google.common.collect.ArrayListMultimap"</span>,</span><br><span class="line">                            <span class="string">"com.google.common.collect.TreeMultimap"</span></span><br><span class="line">                    &#125;;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (name.equals(className)) &#123;</span><br><span class="line">                            <span class="comment">/** 如果系统支持guava框架中日期类型， 使用GuavaCodec 序列化 */</span></span><br><span class="line">                            put(Class.forName(name), writer = GuavaCodec.instance);</span><br><span class="line">                            <span class="keyword">return</span> writer;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// skip</span></span><br><span class="line">                    guavaError = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((!jsonnullError) &amp;&amp; className.equals(<span class="string">"net.sf.json.JSONNull"</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">/** 如果系统支持json-lib框架中JSONNull类型， 使用MiscCodec 序列化 */</span></span><br><span class="line">                    put(Class.forName(<span class="string">"net.sf.json.JSONNull"</span>), writer = MiscCodec.instance);</span><br><span class="line">                    <span class="keyword">return</span> writer;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// skip</span></span><br><span class="line">                    jsonnullError = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">            <span class="comment">/** 如果class只实现唯一接口，并且接口包含注解，使用AnnotationSerializer 序列化 */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaces.length == <span class="number">1</span> &amp;&amp; interfaces[<span class="number">0</span>].isAnnotation()) &#123;</span><br><span class="line">                <span class="keyword">return</span> AnnotationSerializer.instance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 如果使用了cglib或者javassist动态代理 */</span></span><br><span class="line">            <span class="keyword">if</span> (TypeUtils.isProxy(clazz)) &#123;</span><br><span class="line">                Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 通过父类型查找序列化，父类是真实的类型 */</span></span><br><span class="line">                ObjectSerializer superWriter = getObjectWriter(superClazz);</span><br><span class="line">                put(clazz, superWriter);</span><br><span class="line">                <span class="keyword">return</span> superWriter;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 如果使用了jdk动态代理 */</span></span><br><span class="line">            <span class="keyword">if</span> (Proxy.isProxyClass(clazz)) &#123;</span><br><span class="line">                Class handlerClass = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (interfaces.length == <span class="number">2</span>) &#123;</span><br><span class="line">                    handlerClass = interfaces[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Class proxiedInterface : interfaces) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (proxiedInterface.getName().startsWith(<span class="string">"org.springframework.aop."</span>)) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (handlerClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            handlerClass = <span class="keyword">null</span>; <span class="comment">// multi-matched</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        handlerClass = proxiedInterface;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (handlerClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 根据class实现接口类型查找序列化 */</span></span><br><span class="line">                    ObjectSerializer superWriter = getObjectWriter(handlerClass);</span><br><span class="line">                    put(clazz, superWriter);</span><br><span class="line">                    <span class="keyword">return</span> superWriter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (create) &#123;</span><br><span class="line">                <span class="comment">/** 没有精确匹配，使用通用JavaBeanSerializer 序列化(假设不启用asm) */</span></span><br><span class="line">                writer = createJavaBeanSerializer(clazz);</span><br><span class="line">                put(clazz, writer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class="line">            writer = serializers.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> writer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找具体序列化实例，查找方法基本思想根据class类型或者实现接口类型进行匹配查找。接下来针对逐个序列化实现依次分析。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（三）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%89)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E5%B1%9E%E6%80%A7%E9%94%AE%E5%80%BC%E5%AF%B9/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%89)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E6%AE%B5%E5%B1%9E%E6%80%A7%E9%94%AE%E5%80%BC%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="SerializeWriter成员函数"><a href="#SerializeWriter成员函数" class="headerlink" title="SerializeWriter成员函数"></a>SerializeWriter成员函数</h2><h3 id="序列化字段名称"><a href="#序列化字段名称" class="headerlink" title="序列化字段名称"></a>序列化字段名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFieldName</span><span class="params">(String key, <span class="keyword">boolean</span> checkSpecial)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果字段key为null， 输出 "null:" */</span></span><br><span class="line">        write(<span class="string">"null:"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useSingleQuotes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (quoteFieldNames) &#123;</span><br><span class="line">            <span class="comment">/** 使用单引号并且在字段后面加'：'输出 标准的json key*/</span></span><br><span class="line">            writeStringWithSingleQuote(key);</span><br><span class="line">            write(<span class="string">':'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 输出key，如果有特殊字符会自动添加单引号 */</span></span><br><span class="line">            writeKeyWithSingleQuoteIfHasSpecial(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (quoteFieldNames) &#123;</span><br><span class="line">            <span class="comment">/** 使用双引号输出json key 并添加 ： */</span></span><br><span class="line">            writeStringWithDoubleQuote(key, <span class="string">':'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> hashSpecial = key.length() == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = key.charAt(i);</span><br><span class="line">                <span class="keyword">boolean</span> special = (ch &lt; <span class="number">64</span> &amp;&amp; (sepcialBits &amp; (<span class="number">1L</span> &lt;&lt; ch)) != <span class="number">0</span>) || ch == <span class="string">'\\'</span>;</span><br><span class="line">                <span class="keyword">if</span> (special) &#123;</span><br><span class="line">                    hashSpecial = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hashSpecial) &#123;</span><br><span class="line">                <span class="comment">/** 如果包含特殊字符，会进行特殊字符转换输出，eg: 使用转换后的native编码输出 */</span></span><br><span class="line">                writeStringWithDoubleQuote(key, <span class="string">':'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/** 输出字段不加引号 */</span></span><br><span class="line">                write(key);</span><br><span class="line">                write(<span class="string">':'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化字段名称方法writeFieldName主要的任务：</p><ol><li>完成字段特殊字符的转译</li><li>添加字段的引号</li></ol><p>处理输出key的特殊字符方法<code>writeStringWithDoubleQuote</code>前面已经分析过了，序列化字段名称是否需要添加引号和特殊字符处理参考<code>writeKeyWithSingleQuoteIfHasSpecial</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeKeyWithSingleQuoteIfHasSpecial</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = text.length();</span><br><span class="line">    <span class="keyword">int</span> newcount = count + len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/** 如果字段为null， 输出空白字符('':)作为key */</span></span><br><span class="line">                write(<span class="string">'\''</span>);</span><br><span class="line">                write(<span class="string">'\''</span>);</span><br><span class="line">                write(<span class="string">':'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> hasSpecial = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class="number">0</span>) &#123;</span><br><span class="line">                    hasSpecial = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class="line">            <span class="keyword">if</span> (hasSpecial) &#123;</span><br><span class="line">                write(<span class="string">'\''</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 如果输出key中包含特殊字符，添加转译字符并将特殊字符替换成普通字符 */</span></span><br><span class="line">                    write(<span class="string">'\\'</span>);</span><br><span class="line">                    write(replaceChars[(<span class="keyword">int</span>) ch]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    write(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class="line">            <span class="keyword">if</span> (hasSpecial) &#123;</span><br><span class="line">                write(<span class="string">'\''</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            write(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> newCount = count + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (newCount &gt; buf.length) &#123;</span><br><span class="line">            expandCapacity(count + <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buf[count++] = <span class="string">'\''</span>;</span><br><span class="line">        buf[count++] = <span class="string">'\''</span>;</span><br><span class="line">        buf[count++] = <span class="string">':'</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = count;</span><br><span class="line">    <span class="keyword">int</span> end = start + len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class="line">    text.getChars(<span class="number">0</span>, len, buf, start);</span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasSpecial = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = buf[i];</span><br><span class="line">        <span class="keyword">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">                newcount += <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">                    expandCapacity(newcount);</span><br><span class="line">                &#125;</span><br><span class="line">                count = newcount;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 将字符后移两位，插入字符'\ 并替换特殊字符为普通字符 */</span></span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">3</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">/** 将字符后移一位 */</span></span><br><span class="line">                System.arraycopy(buf, <span class="number">0</span>, buf, <span class="number">1</span>, i);</span><br><span class="line">                buf[start] = <span class="string">'\''</span>;</span><br><span class="line">                buf[++i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[++i] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                end += <span class="number">2</span>;</span><br><span class="line">                buf[count - <span class="number">2</span>] = <span class="string">'\''</span>;</span><br><span class="line"></span><br><span class="line">                hasSpecial = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newcount++;</span><br><span class="line">                <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">                    expandCapacity(newcount);</span><br><span class="line">                &#125;</span><br><span class="line">                count = newcount;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 包含特殊字符，将字符后移一位，插入转译字符\ 并替换特殊字符为普通字符 */</span></span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">2</span>, end - i);</span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[++i] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf[newcount - <span class="number">1</span>] = <span class="string">':'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化Boolean类型字段键值对"><a href="#序列化Boolean类型字段键值对" class="headerlink" title="序列化Boolean类型字段键值对"></a>序列化Boolean类型字段键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFieldValue</span><span class="params">(<span class="keyword">char</span> seperator, String name, <span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!quoteFieldNames) &#123;</span><br><span class="line">        <span class="comment">/** 如果不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class="line">        write(seperator);</span><br><span class="line">        writeFieldName(name);</span><br><span class="line">        write(value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** true 占用4位， false 占用5位 */</span></span><br><span class="line">    <span class="keyword">int</span> intSize = value ? <span class="number">4</span> : <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nameLen = name.length();</span><br><span class="line">    <span class="comment">/** 输出总长度， 中间的4  代表 key 和 value 总共占用4个引号 */</span></span><br><span class="line">    <span class="keyword">int</span> newcount = count + nameLen + <span class="number">4</span> + intSize;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 依次输出字段分隔符，字段：字段值 */</span></span><br><span class="line">            write(seperator);</span><br><span class="line">            writeString(name);</span><br><span class="line">            write(<span class="string">':'</span>);</span><br><span class="line">            write(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = count;</span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段分隔符，一般是, */</span></span><br><span class="line">    buf[start] = seperator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nameEnd = start + nameLen + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class="line">    buf[start + <span class="number">1</span>] = keySeperator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段名称 */</span></span><br><span class="line">    name.getChars(<span class="number">0</span>, nameLen, buf, start + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 字段名称添加分隔符，一般是单引号或双引号 */</span></span><br><span class="line">    buf[nameEnd + <span class="number">1</span>] = keySeperator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出boolean类型字符串值 */</span></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        System.arraycopy(<span class="string">":true"</span>.toCharArray(), <span class="number">0</span>, buf, nameEnd + <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.arraycopy(<span class="string">":false"</span>.toCharArray(), <span class="number">0</span>, buf, nameEnd + <span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化boolean类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。</p><h3 id="序列化Int类型字段键值对"><a href="#序列化Int类型字段键值对" class="headerlink" title="序列化Int类型字段键值对"></a>序列化Int类型字段键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFieldValue</span><span class="params">(<span class="keyword">char</span> seperator, String name, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == Integer.MIN_VALUE || !quoteFieldNames) &#123;</span><br><span class="line">        <span class="comment">/** 如果是整数最小值或不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class="line">        write(seperator);</span><br><span class="line">        writeFieldName(name);</span><br><span class="line">        writeInt(value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class="line">    <span class="keyword">int</span> intSize = (value &lt; <span class="number">0</span>) ? IOUtils.stringSize(-value) + <span class="number">1</span> : IOUtils.stringSize(value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nameLen = name.length();</span><br><span class="line">    <span class="keyword">int</span> newcount = count + nameLen + <span class="number">4</span> + intSize;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            write(seperator);</span><br><span class="line">            writeFieldName(name);</span><br><span class="line">            writeInt(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = count;</span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段分隔符，一般是, */</span></span><br><span class="line">    buf[start] = seperator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nameEnd = start + nameLen + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class="line">    buf[start + <span class="number">1</span>] = keySeperator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出字段名称 */</span></span><br><span class="line">    name.getChars(<span class="number">0</span>, nameLen, buf, start + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    buf[nameEnd + <span class="number">1</span>] = keySeperator;</span><br><span class="line">    buf[nameEnd + <span class="number">2</span>] = <span class="string">':'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 输出整数值，对整数转化成单字符 */</span></span><br><span class="line">    IOUtils.getChars(value, count, buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化int类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。截止到现在，已经把核心<code>SerializWriter</code>类讲完了，剩余字段键值对极其类似<code>writeFieldValue</code> boolean和int等，因此无需冗余分析。因为序列化真正开始之前，这个类极其基础并且非常重要，因此花的时间较多。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（二）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%8C)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E8%8A%82%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%8C)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E8%8A%82%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="SerializeWriter成员函数"><a href="#SerializeWriter成员函数" class="headerlink" title="SerializeWriter成员函数"></a>SerializeWriter成员函数</h2><h3 id="序列化16进制字节数组"><a href="#序列化16进制字节数组" class="headerlink" title="序列化16进制字节数组"></a>序列化16进制字节数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeHex</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 计算总共字符长度, 乘以2 代表一个字符要占用2字节, 3代表要添加 x 和 前后添加' */</span></span><br><span class="line">    <span class="keyword">int</span> newcount = count + bytes.length * <span class="number">2</span> + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[bytes.length + <span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">            chars[pos++] = <span class="string">'x'</span>;</span><br><span class="line">            chars[pos++] = <span class="string">'\''</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">byte</span> b = bytes[i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> a = b &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="comment">/** 取字节的高四位 1111 0000*/</span></span><br><span class="line">                <span class="keyword">int</span> b0 = a &gt;&gt; <span class="number">4</span>;</span><br><span class="line">                <span class="comment">/** 取字节的低四位 0000 1111*/</span></span><br><span class="line">                <span class="keyword">int</span> b1 = a &amp; <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 索引低索引存储字节高位</span></span><br><span class="line"><span class="comment">                 *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class="line"><span class="comment">                 *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                chars[pos++] = (<span class="keyword">char</span>) (b0 + (b0 &lt; <span class="number">10</span> ? <span class="number">48</span> : <span class="number">55</span>));</span><br><span class="line">                chars[pos++] = (<span class="keyword">char</span>) (b1 + (b1 &lt; <span class="number">10</span> ? <span class="number">48</span> : <span class="number">55</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            chars[pos++] = <span class="string">'\''</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.write(chars);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"writeBytes error."</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf[count++] = <span class="string">'x'</span>;</span><br><span class="line">    buf[count++] = <span class="string">'\''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">byte</span> b = bytes[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = b &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="comment">/** 取字节的高四位 */</span></span><br><span class="line">        <span class="keyword">int</span> b0 = a &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        <span class="comment">/** 取字节的低四位 */</span></span><br><span class="line">        <span class="keyword">int</span> b1 = a &amp; <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 索引低索引存储字节高位</span></span><br><span class="line"><span class="comment">         *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class="line"><span class="comment">         *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        buf[count++] = (<span class="keyword">char</span>) (b0 + (b0 &lt; <span class="number">10</span> ? <span class="number">48</span> : <span class="number">55</span>));</span><br><span class="line">        buf[count++] = (<span class="keyword">char</span>) (b1 + (b1 &lt; <span class="number">10</span> ? <span class="number">48</span> : <span class="number">55</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    buf[count++] = <span class="string">'\''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>writeHex</code> 这个序列化方法主要对16进制的自己转换为占用2个ascii码字符，添加单引号和x前缀。</p><h3 id="序列化byte字节数组"><a href="#序列化byte字节数组" class="headerlink" title="序列化byte字节数组"></a>序列化byte字节数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeByteArray</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (isEnabled(SerializerFeature.WriteClassName.mask)) &#123;</span><br><span class="line">         <span class="comment">/** 如果开启序列化特性WriteClassName，直接写16进制字符 */</span></span><br><span class="line">         writeHex(bytes);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> bytesLen = bytes.length;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">char</span> quote = useSingleQuotes ? <span class="string">'\''</span> : <span class="string">'"'</span>;</span><br><span class="line">     <span class="keyword">if</span> (bytesLen == <span class="number">0</span>) &#123;</span><br><span class="line">         String emptyString = useSingleQuotes ? <span class="string">"''"</span> : <span class="string">"\"\""</span>;</span><br><span class="line">         <span class="comment">/** 如果字节数组长度为0，输出空白字符 */</span></span><br><span class="line">         write(emptyString);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">char</span>[] CA = IOUtils.CA;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/** 验证长度是24bit位整数倍 */</span></span><br><span class="line">     <span class="keyword">int</span> eLen = (bytesLen / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">     <span class="comment">/** base64 编码字符长度</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *  base64 :</span></span><br><span class="line"><span class="comment">      *  第一步，将每三个字节作为一组，一共是24个二进制位。</span></span><br><span class="line"><span class="comment">      *  第二步，将这24个二进制位分为四组，每个组有6个二进制位。</span></span><br><span class="line"><span class="comment">      *  第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</span></span><br><span class="line"><span class="comment">      *  第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      *  ref: http://www.ruanyifeng.com/blog/2008/06/base64.html</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">int</span> charsLen = ((bytesLen - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">     <span class="comment">// char[] chars = new char[charsLen];</span></span><br><span class="line">     <span class="keyword">int</span> offset = count;</span><br><span class="line">     <span class="keyword">int</span> newcount = count + charsLen + <span class="number">2</span>;</span><br><span class="line">     <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">         <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">             write(quote);</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; eLen;) &#123;</span><br><span class="line">                 <span class="comment">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class="line">                 <span class="keyword">int</span> i = (bytes[s++] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span> | (bytes[s++] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | (bytes[s++] &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">                 write(CA[(i &gt;&gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">                 write(CA[(i &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">                 write(CA[(i &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">                 <span class="comment">/** 填充00 */</span></span><br><span class="line">                 write(CA[i &amp; <span class="number">0x3f</span>]);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class="line">             <span class="comment">// Pad and encode last bits if source isn't even 24 bits.</span></span><br><span class="line">             <span class="keyword">int</span> left = bytesLen - eLen; <span class="comment">// 0 - 2.</span></span><br><span class="line">             <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">/**</span></span><br><span class="line"><span class="comment">                  * a) 1个字节的情况：</span></span><br><span class="line"><span class="comment">                  * 将这1字节8位二进制，每6位分成2组，最后一组除了前面加00，后面加上0000，</span></span><br><span class="line"><span class="comment">                  * 这样得到 两位的Base64编码， 在末尾补上2个"="号</span></span><br><span class="line"><span class="comment">                  *</span></span><br><span class="line"><span class="comment">                  * b) 2个字节的情况：</span></span><br><span class="line"><span class="comment">                  * 将这2字节的一共16个二进制位，每6位分成3组，最后一组除了前面加00，后面也要加00，</span></span><br><span class="line"><span class="comment">                  * 这样得到 3位的Base64编码， 在末尾补上"="号</span></span><br><span class="line"><span class="comment">                  *</span></span><br><span class="line"><span class="comment">                  *</span></span><br><span class="line"><span class="comment">                  * 如果只有1个字节，按照前面规则a)</span></span><br><span class="line"><span class="comment">                  * 第1组是6位，第2组后面4个0， 因此应该左移 10 = 6 + 4</span></span><br><span class="line"><span class="comment">                  *</span></span><br><span class="line"><span class="comment">                  * 如果只有2个字节，按照前面规则b)</span></span><br><span class="line"><span class="comment">                  * 第1个字节左移 10 位 加上 第2个字节左移 2 位补0即可</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                 <span class="keyword">int</span> i = ((bytes[eLen] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">10</span>) | (left == <span class="number">2</span> ? ((bytes[bytesLen - <span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">2</span>) : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">/** 扩展为四个字节 */</span></span><br><span class="line">                 write(CA[i &gt;&gt; <span class="number">12</span>]);</span><br><span class="line">                 write(CA[(i &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>]);</span><br><span class="line">                 write(left == <span class="number">2</span> ? CA[i &amp; <span class="number">0x3f</span>] : <span class="string">'='</span>);</span><br><span class="line">                 write(<span class="string">'='</span>);</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             write(quote);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         expandCapacity(newcount);</span><br><span class="line">     &#125;</span><br><span class="line">     count = newcount;</span><br><span class="line">     buf[offset++] = quote;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Encode even 24-bits</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>, d = offset; s &lt; eLen;) &#123;</span><br><span class="line">         <span class="comment">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class="line">         <span class="keyword">int</span> i = (bytes[s++] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span> | (bytes[s++] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span> | (bytes[s++] &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Encode the int into four chars</span></span><br><span class="line">         buf[d++] = CA[(i &gt;&gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">         buf[d++] = CA[(i &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">         buf[d++] = CA[(i &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">         <span class="comment">/** 填充00 */</span></span><br><span class="line">         buf[d++] = CA[i &amp; <span class="number">0x3f</span>];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class="line">     <span class="keyword">int</span> left = bytesLen - eLen; <span class="comment">// 0 - 2.</span></span><br><span class="line">     <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// Prepare the int</span></span><br><span class="line">         <span class="keyword">int</span> i = ((bytes[eLen] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">10</span>) | (left == <span class="number">2</span> ? ((bytes[bytesLen - <span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">2</span>) : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/** 扩展为四个字节 */</span></span><br><span class="line">         buf[newcount - <span class="number">5</span>] = CA[i &gt;&gt; <span class="number">12</span>];</span><br><span class="line">         buf[newcount - <span class="number">4</span>] = CA[(i &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>];</span><br><span class="line">         buf[newcount - <span class="number">3</span>] = left == <span class="number">2</span> ? CA[i &amp; <span class="number">0x3f</span>] : <span class="string">'='</span>;</span><br><span class="line">         buf[newcount - <span class="number">2</span>] = <span class="string">'='</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     buf[newcount - <span class="number">1</span>] = quote;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>writeByteArray</code>序列化字节数组实际上就是做了base64编码转换，代码添加了详尽的注释帮助理解。</p><h3 id="序列化字符串"><a href="#序列化字符串" class="headerlink" title="序列化字符串"></a>序列化字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 计算总共字符串长度 */</span></span><br><span class="line">    <span class="keyword">int</span> newcount = count + len;</span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果字符串str超过缓冲区大小, 进行循环拷贝</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class="line">                <span class="keyword">int</span> rest = buf.length - count;</span><br><span class="line">                <span class="comment">/** 将字符串str[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class="line">                str.getChars(off, off + rest, buf, count);</span><br><span class="line">                count = buf.length;</span><br><span class="line">                <span class="comment">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class="line">                flush();</span><br><span class="line">                <span class="comment">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class="line">                len -= rest;</span><br><span class="line">                <span class="comment">/** 剩余要拷贝字符在str中偏移量(索引) */</span></span><br><span class="line">                off += rest;</span><br><span class="line">            &#125; <span class="keyword">while</span> (len &gt; buf.length);</span><br><span class="line">            newcount = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 存储空间充足，直接将str[off, off + len) 拷贝到buf[count, ...]中*/</span></span><br><span class="line">    str.getChars(off, off + len, buf, count);</span><br><span class="line">    count = newcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化字符串<code>write(string)</code>,最终都会转化为上面形式<code>write(string, 0, string.length)</code>。</p><h3 id="序列化字符数组"><a href="#序列化字符数组" class="headerlink" title="序列化字符数组"></a>序列化字符数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (off &lt; <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">        || off &gt; c.length <span class="comment">//</span></span><br><span class="line">        || len &lt; <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">        || off + len &gt; c.length <span class="comment">//</span></span><br><span class="line">        || off + len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 计算总共字符串长度 */</span></span><br><span class="line">    <span class="keyword">int</span> newcount = count + len;</span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果字符数组c超过缓冲区大小, 进行循环拷贝</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class="line">                <span class="keyword">int</span> rest = buf.length - count;</span><br><span class="line">                <span class="comment">/** c[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class="line">                System.arraycopy(c, off, buf, count, rest);</span><br><span class="line">                count = buf.length;</span><br><span class="line">                <span class="comment">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class="line">                flush();</span><br><span class="line">                <span class="comment">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class="line">                len -= rest;</span><br><span class="line">                <span class="comment">/** 剩余要拷贝字符在c中偏移量(索引) */</span></span><br><span class="line">                off += rest;</span><br><span class="line">            &#125; <span class="keyword">while</span> (len &gt; buf.length);</span><br><span class="line">            newcount = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.arraycopy(c, off, buf, count, len);</span><br><span class="line">    count = newcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化列表字符串"><a href="#序列化列表字符串" class="headerlink" title="序列化列表字符串"></a>序列化列表字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">/** 空字符列表，输出[]字符串 */</span></span><br><span class="line">        write(<span class="string">"[]"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = count;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> initOffset = offset;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, list_size = list.size(); i &lt; list_size; ++i) &#123;</span><br><span class="line">        <span class="comment">/** 循环获取列表中包含的字符串 */</span></span><br><span class="line">        String text = list.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> hasSpecial = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** list包含特殊的null值 */</span></span><br><span class="line">            hasSpecial = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = text.length(); j &lt; len; ++j) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(j);</span><br><span class="line">                <span class="comment">/** 包含指定特殊字符 */</span></span><br><span class="line">                <span class="keyword">if</span> (hasSpecial = (ch &lt; <span class="string">' '</span> <span class="comment">//</span></span><br><span class="line">                                  || ch &gt; <span class="string">'~'</span> <span class="comment">//</span></span><br><span class="line">                                  || ch == <span class="string">'"'</span> <span class="comment">//</span></span><br><span class="line">                                  || ch == <span class="string">'\\'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasSpecial) &#123;</span><br><span class="line">            count = initOffset;</span><br><span class="line">            write(<span class="string">'['</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; list.size(); ++j) &#123;</span><br><span class="line">                text = list.get(j);</span><br><span class="line">                <span class="comment">/** 每个字符用,隔开输出 */</span></span><br><span class="line">                <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">                    write(<span class="string">','</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/** 字符串为空，直接输出null字符串 */</span></span><br><span class="line">                    write(<span class="string">"null"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/** 使用双引号输出，并且处理特殊字符, 下文有分析 */</span></span><br><span class="line">                    writeStringWithDoubleQuote(text, (<span class="keyword">char</span>) <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            write(<span class="string">']'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 计算新的字符占用空间，额外3个字符用于存储 "," */</span></span><br><span class="line">        <span class="keyword">int</span> newcount = offset + text.length() + <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == list.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            newcount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 如果当前存储空间不够*/</span></span><br><span class="line">        <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">            count = offset;</span><br><span class="line">            <span class="comment">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            buf[offset++] = <span class="string">'['</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buf[offset++] = <span class="string">','</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf[offset++] = <span class="string">'"'</span>;</span><br><span class="line">        <span class="comment">/** 拷贝text字符串到buffer数组中 */</span></span><br><span class="line">        text.getChars(<span class="number">0</span>, text.length(), buf, offset);</span><br><span class="line">        offset += text.length();</span><br><span class="line">        buf[offset++] = <span class="string">'"'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 最终构造列表形式 ["element", "element", ...] */</span></span><br><span class="line">    buf[offset++] = <span class="string">']'</span>;</span><br><span class="line">    count = offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化字符串会转化成<code>[“element”, &quot;element&quot;, ...]</code>格式。如果列表字符串中包含特殊字符，调用特化版本<code>writeStringWithDoubleQuote(text, (char) 0)</code>。</p><h3 id="序列化包含特殊字符字符串"><a href="#序列化包含特殊字符字符串" class="headerlink" title="序列化包含特殊字符字符串"></a>序列化包含特殊字符字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeStringWithDoubleQuote</span><span class="params">(String text, <span class="keyword">final</span> <span class="keyword">char</span> seperator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果字符换为空，输出null字符串 */</span></span><br><span class="line">        writeNull();</span><br><span class="line">        <span class="keyword">if</span> (seperator != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/** 如果分隔符不为空白字符' '，输出分隔符 */</span></span><br><span class="line">            write(seperator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = text.length();</span><br><span class="line">    <span class="keyword">int</span> newcount = count + len + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (seperator != <span class="number">0</span>) &#123;</span><br><span class="line">        newcount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 写双引号字符 */</span></span><br><span class="line">            write(<span class="string">'"'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class="line">                <span class="comment">/** 循环提取字符串中字符 */</span></span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isEnabled(SerializerFeature.BrowserSecure)) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (ch == <span class="string">'('</span> || ch == <span class="string">')'</span> || ch == <span class="string">'&lt;'</span> || ch == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">                        <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                        write(<span class="string">'\\'</span>);</span><br><span class="line">                        write(<span class="string">'u'</span>);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[ch &amp; <span class="number">15</span>]);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ch == <span class="string">'\b'</span>      <span class="comment">//  退格</span></span><br><span class="line">                        || ch == <span class="string">'\f'</span>   <span class="comment">//  分页</span></span><br><span class="line">                        || ch == <span class="string">'\n'</span>   <span class="comment">//  换行</span></span><br><span class="line">                        || ch == <span class="string">'\r'</span>   <span class="comment">//  回车</span></span><br><span class="line">                        || ch == <span class="string">'\t'</span>   <span class="comment">//  tab</span></span><br><span class="line">                        || ch == <span class="string">'"'</span>    <span class="comment">//  双引号</span></span><br><span class="line">                        || ch == <span class="string">'/'</span>    <span class="comment">//  左反斜杠</span></span><br><span class="line">                        || ch == <span class="string">'\\'</span>) &#123;<span class="comment">//  单引号</span></span><br><span class="line">                        <span class="comment">/** 输出转义字符 + 字符ascii码 */</span></span><br><span class="line">                        write(<span class="string">'\\'</span>); <span class="comment">//  右反斜杠</span></span><br><span class="line">                        write(replaceChars[(<span class="keyword">int</span>) ch]);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (ch &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                        <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                        write(<span class="string">'\\'</span>);</span><br><span class="line">                        write(<span class="string">'u'</span>);</span><br><span class="line">                        write(<span class="string">'0'</span>);</span><br><span class="line">                        write(<span class="string">'0'</span>);</span><br><span class="line">                        write(IOUtils.ASCII_CHARS[ch * <span class="number">2</span>]);</span><br><span class="line">                        write(IOUtils.ASCII_CHARS[ch * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (ch &gt;= <span class="number">127</span>) &#123;</span><br><span class="line">                        <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                        write(<span class="string">'\\'</span>);</span><br><span class="line">                        write(<span class="string">'u'</span>);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>]);</span><br><span class="line">                        write(IOUtils.DIGITS[ch &amp; <span class="number">15</span>]);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                    <span class="keyword">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length</span><br><span class="line">                        &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">                        || (ch == <span class="string">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class="line">                        write(<span class="string">'\\'</span>);</span><br><span class="line">                        <span class="keyword">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class="number">4</span>) &#123;</span><br><span class="line">                            write(<span class="string">'u'</span>);</span><br><span class="line">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class="number">12</span> &amp; <span class="number">15</span>]);</span><br><span class="line">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class="number">8</span> &amp; <span class="number">15</span>]);</span><br><span class="line">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">15</span>]);</span><br><span class="line">                            write(IOUtils.DIGITS[ch &amp; <span class="number">15</span>]);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            write(IOUtils.replaceChars[ch]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 非特殊字符，直接输出 */</span></span><br><span class="line">                write(ch);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 字符串结束 */</span></span><br><span class="line">            write(<span class="string">'"'</span>);</span><br><span class="line">            <span class="keyword">if</span> (seperator != <span class="number">0</span>) &#123;</span><br><span class="line">                write(seperator);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = count + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = start + len;</span><br><span class="line"></span><br><span class="line">    buf[count] = <span class="string">'\"'</span>;</span><br><span class="line">    <span class="comment">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class="line">    text.getChars(<span class="number">0</span>, len, buf, start);</span><br><span class="line"></span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class="line">        <span class="keyword">int</span> lastSpecialIndex = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">            <span class="comment">/** 循环提取字符串中字符 */</span></span><br><span class="line">            <span class="keyword">char</span> ch = buf[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'"'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'/'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\\'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 记录指定字符最后出现的位置 */</span></span><br><span class="line">                lastSpecialIndex = i;</span><br><span class="line">                newcount += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'\b'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\f'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\n'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\r'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\t'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 记录指定字符最后出现的位置 */</span></span><br><span class="line">                lastSpecialIndex = i;</span><br><span class="line">                newcount += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                lastSpecialIndex = i;</span><br><span class="line">                newcount += <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="number">127</span>) &#123;</span><br><span class="line">                lastSpecialIndex = i;</span><br><span class="line">                newcount += <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果存储空间不足，触发到(1.5倍buffer大小+1) */</span></span><br><span class="line">        <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125;</span><br><span class="line">        count = newcount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 逆向从指定特殊字符开始遍历 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lastSpecialIndex; i &gt;= start; --i) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = buf[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'\b'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\f'</span><span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\n'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\r'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\t'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 将字符后移一位，插入转译字符\ */</span></span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">2</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                <span class="comment">/** 将特殊字符转换成普通单字符 */</span></span><br><span class="line">                buf[i + <span class="number">1</span>] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                end += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'"'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'/'</span> <span class="comment">//</span></span><br><span class="line">                || ch == <span class="string">'\\'</span>) &#123;</span><br><span class="line">                <span class="comment">/** 和上面处理一致，不需要单独替换成普通字符 */</span></span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">2</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[i + <span class="number">1</span>] = ch;</span><br><span class="line">                end += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">6</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[i + <span class="number">1</span>] = <span class="string">'u'</span>;</span><br><span class="line">                buf[i + <span class="number">2</span>] = <span class="string">'0'</span>;</span><br><span class="line">                buf[i + <span class="number">3</span>] = <span class="string">'0'</span>;</span><br><span class="line">                buf[i + <span class="number">4</span>] = IOUtils.ASCII_CHARS[ch * <span class="number">2</span>];</span><br><span class="line">                buf[i + <span class="number">5</span>] = IOUtils.ASCII_CHARS[ch * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">                end += <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="number">127</span>) &#123;</span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">6</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">/** ascii转换成native编码 */</span></span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[i + <span class="number">1</span>] = <span class="string">'u'</span>;</span><br><span class="line">                buf[i + <span class="number">2</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[i + <span class="number">3</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[i + <span class="number">4</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[i + <span class="number">5</span>] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">                end += <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 追加引用符号 */</span></span><br><span class="line">        <span class="keyword">if</span> (seperator != <span class="number">0</span>) &#123;</span><br><span class="line">            buf[count - <span class="number">2</span>] = <span class="string">'\"'</span>;</span><br><span class="line">            buf[count - <span class="number">1</span>] = seperator;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buf[count - <span class="number">1</span>] = <span class="string">'\"'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> specialCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lastSpecialIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> firstSpecialIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> lastSpecial = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = buf[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">']'</span>) &#123; <span class="comment">//   93</span></span><br><span class="line">            <span class="comment">/** 特殊字符参考：http://www.mokuge.com/tool/asciito16/ */</span></span><br><span class="line">            <span class="keyword">if</span> (ch &gt;= <span class="number">0x7F</span> <span class="comment">// 127</span></span><br><span class="line">                    &amp;&amp; (ch == <span class="string">'\u2028'</span> <span class="comment">//</span></span><br><span class="line">                    || ch == <span class="string">'\u2029'</span>  <span class="comment">//</span></span><br><span class="line">                    || ch &lt; <span class="number">0xA0</span>)) &#123;   <span class="comment">// 160 [空格]</span></span><br><span class="line">                <span class="keyword">if</span> (firstSpecialIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                    firstSpecialIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                specialCount++;</span><br><span class="line">                lastSpecialIndex = i;</span><br><span class="line">                lastSpecial = ch;</span><br><span class="line">                newcount += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> special = (ch &lt; <span class="number">64</span> &amp;&amp; (sepcialBits &amp; (<span class="number">1L</span> &lt;&lt; ch)) != <span class="number">0</span>) || ch == <span class="string">'\\'</span>;</span><br><span class="line">        <span class="keyword">if</span> (special) &#123;</span><br><span class="line">            specialCount++;</span><br><span class="line">            lastSpecialIndex = i;</span><br><span class="line">            lastSpecial = ch;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'('</span></span><br><span class="line">                    || ch == <span class="string">')'</span></span><br><span class="line">                    || ch == <span class="string">'&lt;'</span></span><br><span class="line">                    || ch == <span class="string">'&gt;'</span></span><br><span class="line">                    || (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class="comment">//</span></span><br><span class="line">                &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class="number">4</span>) <span class="comment">//</span></span><br><span class="line">            ) &#123;</span><br><span class="line">                newcount += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (firstSpecialIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">                firstSpecialIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (specialCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        newcount += specialCount;</span><br><span class="line">        <span class="comment">/** 包含特殊字符并且buffer空间不够，触发扩容 */</span></span><br><span class="line">        <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125;</span><br><span class="line">        count = newcount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span></span><br><span class="line">        <span class="keyword">if</span> (specialCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 行分隔符</span></span><br><span class="line">            <span class="keyword">if</span> (lastSpecial == <span class="string">'\u2028'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> srcPos = lastSpecialIndex + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> destPos = lastSpecialIndex + <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">int</span> LengthOfCopy = end - lastSpecialIndex - <span class="number">1</span>;</span><br><span class="line">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class="line">                buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'u'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'2'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'0'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'2'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'8'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 段落分隔符</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (lastSpecial == <span class="string">'\u2029'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> srcPos = lastSpecialIndex + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> destPos = lastSpecialIndex + <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">int</span> LengthOfCopy = end - lastSpecialIndex - <span class="number">1</span>;</span><br><span class="line">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class="line">                buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'u'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'2'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'0'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'2'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'9'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastSpecial == <span class="string">'('</span> || lastSpecial == <span class="string">')'</span> || lastSpecial == <span class="string">'&lt;'</span> || lastSpecial == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> srcPos = lastSpecialIndex + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> destPos = lastSpecialIndex + <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">int</span> LengthOfCopy = end - lastSpecialIndex - <span class="number">1</span>;</span><br><span class="line">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class="line">                buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[++lastSpecialIndex] = <span class="string">'u'</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">char</span> ch = lastSpecial;</span><br><span class="line">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                buf[++lastSpecialIndex] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">char</span> ch = lastSpecial;</span><br><span class="line">                <span class="keyword">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class="comment">//</span></span><br><span class="line">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> srcPos = lastSpecialIndex + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> destPos = lastSpecialIndex + <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">int</span> LengthOfCopy = end - lastSpecialIndex - <span class="number">1</span>;</span><br><span class="line">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> bufIndex = lastSpecialIndex;</span><br><span class="line">                    buf[bufIndex++] = <span class="string">'\\'</span>;</span><br><span class="line">                    buf[bufIndex++] = <span class="string">'u'</span>;</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> srcPos = lastSpecialIndex + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">int</span> destPos = lastSpecialIndex + <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">int</span> LengthOfCopy = end - lastSpecialIndex - <span class="number">1</span>;</span><br><span class="line">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class="line">                    buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">                    buf[++lastSpecialIndex] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (specialCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> textIndex = firstSpecialIndex - start;</span><br><span class="line">            <span class="keyword">int</span> bufIndex = firstSpecialIndex;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = textIndex; i &lt; text.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(i);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span> </span><br><span class="line">                <span class="keyword">if</span> (browserSecure &amp;&amp; (ch == <span class="string">'('</span></span><br><span class="line">                        || ch == <span class="string">')'</span></span><br><span class="line">                        || ch == <span class="string">'&lt;'</span></span><br><span class="line">                        || ch == <span class="string">'&gt;'</span>)) &#123;</span><br><span class="line">                    buf[bufIndex++] = <span class="string">'\\'</span>;</span><br><span class="line">                    buf[bufIndex++] = <span class="string">'u'</span>;</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">                    end += <span class="number">5</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class="comment">//</span></span><br><span class="line">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">                    || (ch == <span class="string">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class="line">                    buf[bufIndex++] = <span class="string">'\\'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class="number">4</span>) &#123;</span><br><span class="line">                        buf[bufIndex++] = <span class="string">'u'</span>;</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">                        end += <span class="number">5</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buf[bufIndex++] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                        end++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 行分隔符 、段落分隔符</span></span><br><span class="line">                    <span class="keyword">if</span> (ch == <span class="string">'\u2028'</span> || ch == <span class="string">'\u2029'</span>) &#123;</span><br><span class="line">                        buf[bufIndex++] = <span class="string">'\\'</span>;</span><br><span class="line">                        buf[bufIndex++] = <span class="string">'u'</span>;</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">12</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class="number">15</span>];</span><br><span class="line">                        end += <span class="number">5</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        buf[bufIndex++] = ch;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seperator != <span class="number">0</span>) &#123;</span><br><span class="line">        buf[count - <span class="number">2</span>] = <span class="string">'\"'</span>;</span><br><span class="line">        buf[count - <span class="number">1</span>] = seperator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buf[count - <span class="number">1</span>] = <span class="string">'\"'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>writeStringWithDoubleQuote方法实现实在是太长了，这个方法主要做了以下几件事情：</p><ol><li>如果开启序列化BrowserCompatible特性，执行ascii转换成native编码，节省空间。</li><li>如果输出器writer不为空，会自动触发buffer扩容<code>(原有容量1.5倍+1)</code>。</li></ol><p>另外一个针对特殊字符的字符串序列化方法writeStringWithDoubleQuote(char[] text, final char seperator)，因为和writeStringWithDoubleQuote(String text, final char seperator)版本极其类似，所以不再冗余分析。</p><p>序列化字符串的方法包括添加单引号的版本，详细请参考 writeStringWithSingleQuote ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeStringWithSingleQuote</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> newcount = count + <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 如果字符串为null，输出"null"字符串 */</span></span><br><span class="line">        <span class="string">"null"</span>.getChars(<span class="number">0</span>, <span class="number">4</span>, buf, count);</span><br><span class="line">        count = newcount;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = text.length();</span><br><span class="line">    <span class="keyword">int</span> newcount = count + len + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 使用单引号输出字符串值 */</span></span><br><span class="line">            write(<span class="string">'\''</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch = text.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (ch &lt;= <span class="number">13</span> || ch == <span class="string">'\\'</span> || ch == <span class="string">'\''</span> <span class="comment">//</span></span><br><span class="line">                    || (ch == <span class="string">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class="line">                    <span class="comment">/** 如果包含特殊字符 或者 单字符'\' ''' ，添加转译并且替换为普通字符*/</span></span><br><span class="line">                    write(<span class="string">'\\'</span>);</span><br><span class="line">                    write(replaceChars[(<span class="keyword">int</span>) ch]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    write(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            write(<span class="string">'\''</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = count + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> end = start + len;</span><br><span class="line"></span><br><span class="line">    buf[count] = <span class="string">'\''</span>;</span><br><span class="line">    <span class="comment">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class="line">    text.getChars(<span class="number">0</span>, len, buf, start);</span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> specialCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lastSpecialIndex = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> lastSpecial = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = buf[i];</span><br><span class="line">        <span class="keyword">if</span> (ch &lt;= <span class="number">13</span> || ch == <span class="string">'\\'</span> || ch == <span class="string">'\''</span> <span class="comment">//</span></span><br><span class="line">            || (ch == <span class="string">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class="line">            <span class="comment">/** 记录特殊字符个数和最后一个特殊字符索引 */</span></span><br><span class="line">            specialCount++;</span><br><span class="line">            lastSpecialIndex = i;</span><br><span class="line">            lastSpecial = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newcount += specialCount;</span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        expandCapacity(newcount);</span><br><span class="line">    &#125;</span><br><span class="line">    count = newcount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (specialCount == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">/** 将字符后移一位，插入转译字符\ 并替换特殊字符为普通字符*/</span></span><br><span class="line">        System.arraycopy(buf, lastSpecialIndex + <span class="number">1</span>, buf, lastSpecialIndex + <span class="number">2</span>, end - lastSpecialIndex - <span class="number">1</span>);</span><br><span class="line">        buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">        buf[++lastSpecialIndex] = replaceChars[(<span class="keyword">int</span>) lastSpecial];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (specialCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        System.arraycopy(buf, lastSpecialIndex + <span class="number">1</span>, buf, lastSpecialIndex + <span class="number">2</span>, end - lastSpecialIndex - <span class="number">1</span>);</span><br><span class="line">        buf[lastSpecialIndex] = <span class="string">'\\'</span>;</span><br><span class="line">        buf[++lastSpecialIndex] = replaceChars[(<span class="keyword">int</span>) lastSpecial];</span><br><span class="line">        end++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lastSpecialIndex - <span class="number">2</span>; i &gt;= start; --i) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = buf[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ch &lt;= <span class="number">13</span> || ch == <span class="string">'\\'</span> || ch == <span class="string">'\''</span> <span class="comment">//</span></span><br><span class="line">                || (ch == <span class="string">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class="line">                <span class="comment">/** 将字符后移一位，插入转译字符\ 并替换特殊字符为普通字符*/</span></span><br><span class="line">                System.arraycopy(buf, i + <span class="number">1</span>, buf, i + <span class="number">2</span>, end - i - <span class="number">1</span>);</span><br><span class="line">                buf[i] = <span class="string">'\\'</span>;</span><br><span class="line">                buf[i + <span class="number">1</span>] = replaceChars[(<span class="keyword">int</span>) ch];</span><br><span class="line">                end++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 字符串结尾添加单引号引用 */</span></span><br><span class="line">    buf[count - <span class="number">1</span>] = <span class="string">'\''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>writeStringWithSingleQuote这个方法主要做了以下几件事情：</p><ol><li>针对特殊字符，添加转译字符并且替换特殊字符为普通字符</li><li>如果输出器writer不为空，会自动触发buffer扩容<code>(原有容量1.5倍+1)</code>。</li></ol><p>另外一个针对特殊字符的字符串序列化方法<code>writeStringWithSingleQuote(char[])</code>，因为和<code>writeStringWithSingleQuote(String)</code>版本极其类似，所以不再冗余分析。</p>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>序列化（一）</title>
      <link href="/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%80)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/09/30/Fastjson%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%80)-%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。</p><p>现在，我们正式开始咀嚼原汁原味的代码吧，我添加了详细的代码注释。</p><h2 id="SerializeWriter成员变量"><a href="#SerializeWriter成员变量" class="headerlink" title="SerializeWriter成员变量"></a>SerializeWriter成员变量</h2><p><code>com.alibaba.fastjson.serializer.SerializeWriter</code>类非常重要，序列化输出都是通过转换底层操作，重要字段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 字符类型buffer */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;<span class="keyword">char</span>[]&gt; bufLocal      = <span class="keyword">new</span> ThreadLocal&lt;<span class="keyword">char</span>[]&gt;();</span><br><span class="line"><span class="comment">/** 字节类型buffer */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadLocal&lt;<span class="keyword">byte</span>[]&gt; bytesBufLocal = <span class="keyword">new</span> ThreadLocal&lt;<span class="keyword">byte</span>[]&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 存储序列化结果buffer */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">char</span>                           buf[];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** buffer中包含的字符数 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 序列化的特性，比如写枚举按照名字还是枚举值 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            features;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 序列化输出器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Writer                     writer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 是否使用单引号输出json */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        useSingleQuotes;</span><br><span class="line"><span class="comment">/** 输出字段是否追加 "和：字符 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        quoteFieldNames;</span><br><span class="line"><span class="comment">/** 是否对字段排序 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        sortField;</span><br><span class="line"><span class="comment">/** 禁用字段循环引用探测 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        disableCircularReferenceDetect;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        beanToArray;</span><br><span class="line"><span class="comment">/** 按照toString方式获取对象字面值 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        writeNonStringValueAsString;</span><br><span class="line"><span class="comment">/** 如果字段默认值不输出，比如原型int，默认值0不输出 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        notWriteDefaultValue;</span><br><span class="line"><span class="comment">/** 序列化枚举时使用枚举name */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        writeEnumUsingName;</span><br><span class="line"><span class="comment">/** 序列化枚举时使用枚举toString值 */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        writeEnumUsingToString;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        writeDirect;</span><br><span class="line"><span class="comment">/** key分隔符，默认单引号是'，双引号是" */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">char</span>                           keySeperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>                            maxBufSize = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span>                        browserSecure;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">long</span>                           sepcialBits;</span><br></pre></td></tr></table></figure><h2 id="SerializeWriter成员函数"><a href="#SerializeWriter成员函数" class="headerlink" title="SerializeWriter成员函数"></a>SerializeWriter成员函数</h2><h3 id="序列化整形数字"><a href="#序列化整形数字" class="headerlink" title="序列化整形数字"></a>序列化整形数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 如果是整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class="line">    <span class="keyword">if</span> (i == Integer.MIN_VALUE) &#123;</span><br><span class="line">        write(<span class="string">"-2147483648"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class="line">    <span class="keyword">int</span> size = (i &lt; <span class="number">0</span>) ? IOUtils.stringSize(-i) + <span class="number">1</span> : IOUtils.stringSize(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newcount = count + size;</span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[size];</span><br><span class="line">            <span class="comment">/** 将整数i转换成单字符并存储到chars数组 */</span></span><br><span class="line">            IOUtils.getChars(i, size, chars);</span><br><span class="line">            <span class="comment">/** 将chars字符数组内容写到buffer中*/</span></span><br><span class="line">            write(chars, <span class="number">0</span>, chars.length);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果buffer空间够，直接将字符写到buffer中 */</span></span><br><span class="line">    IOUtils.getChars(i, newcount, buf);</span><br><span class="line">    <span class="comment">/** 重新计数buffer中字符数 */</span></span><br><span class="line">    count = newcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中值得提一下的是<code>IOUtils.getChars</code>，里面利用了<code>Integer.getChars(int i, int index, char[] buf)</code>,主要的思想是整数超过65536 进行除以100, 循环取出数字后两位，依次将个位和十位转换为单字符，如果整数小于等于65536，进行除以10，取出个位数字并转换单字符，getCharts中 <code>q = (i * 52429) &gt;&gt;&gt; (16+3)</code>，可以理解为 (i乘以0.1), 但是精度更高。</p><h3 id="序列化长整形数字"><a href="#序列化长整形数字" class="headerlink" title="序列化长整形数字"></a>序列化长整形数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLong</span><span class="params">(<span class="keyword">long</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> needQuotationMark = isEnabled(SerializerFeature.BrowserCompatible) <span class="comment">//</span></span><br><span class="line">                                &amp;&amp; (!isEnabled(SerializerFeature.WriteClassName)) <span class="comment">//</span></span><br><span class="line">                                &amp;&amp; (i &gt; <span class="number">9007199254740991L</span> || i &lt; -<span class="number">9007199254740991L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == Long.MIN_VALUE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (needQuotationMark) write(<span class="string">"\"-9223372036854775808\""</span>);</span><br><span class="line">        <span class="comment">/** 如果是长整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class="line">        <span class="keyword">else</span> write(<span class="string">"-9223372036854775808"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class="line">    <span class="keyword">int</span> size = (i &lt; <span class="number">0</span>) ? IOUtils.stringSize(-i) + <span class="number">1</span> : IOUtils.stringSize(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newcount = count + size;</span><br><span class="line">    <span class="keyword">if</span> (needQuotationMark) newcount += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[size];</span><br><span class="line">            <span class="comment">/** 将长整数i转换成单字符并存储到chars数组 */</span></span><br><span class="line">            IOUtils.getChars(i, size, chars);</span><br><span class="line">            <span class="keyword">if</span> (needQuotationMark) &#123;</span><br><span class="line">                write(<span class="string">'"'</span>);</span><br><span class="line">                write(chars, <span class="number">0</span>, chars.length);</span><br><span class="line">                write(<span class="string">'"'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                write(chars, <span class="number">0</span>, chars.length);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加引号 */</span></span><br><span class="line">    <span class="keyword">if</span> (needQuotationMark) &#123;</span><br><span class="line">        buf[count] = <span class="string">'"'</span>;</span><br><span class="line">        IOUtils.getChars(i, newcount - <span class="number">1</span>, buf);</span><br><span class="line">        buf[newcount - <span class="number">1</span>] = <span class="string">'"'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        IOUtils.getChars(i, newcount, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    count = newcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化长整型和整型非常类似，增加了双引号判断，采用用了和Integer转换为单字符同样的技巧。</p><h3 id="序列化浮点类型数字"><a href="#序列化浮点类型数字" class="headerlink" title="序列化浮点类型数字"></a>序列化浮点类型数字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeDouble</span><span class="params">(<span class="keyword">double</span> doubleValue, <span class="keyword">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 如果doubleValue不合法或者是无穷数，调用writeNull */</span></span><br><span class="line">    <span class="keyword">if</span> (Double.isNaN(doubleValue)</span><br><span class="line">            || Double.isInfinite(doubleValue)) &#123;</span><br><span class="line">        writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 将高精度double转换为字符串 */</span></span><br><span class="line">        String doubleText = Double.toString(doubleValue);</span><br><span class="line">        <span class="comment">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class="line">        <span class="keyword">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; doubleText.endsWith(<span class="string">".0"</span>)) &#123;</span><br><span class="line">            doubleText = doubleText.substring(<span class="number">0</span>, doubleText.length() - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 调用字符串输出方法 */</span></span><br><span class="line">        write(doubleText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果开启序列化WriteClassName特性，输出Double类型 */</span></span><br><span class="line">        <span class="keyword">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">            write(<span class="string">'D'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFloat</span><span class="params">(<span class="keyword">float</span> value, <span class="keyword">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 如果value不合法或者是无穷数，调用writeNull */</span></span><br><span class="line">    <span class="keyword">if</span> (Float.isNaN(value) <span class="comment">//</span></span><br><span class="line">            || Float.isInfinite(value)) &#123;</span><br><span class="line">        writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 将高精度float转换为字符串 */</span></span><br><span class="line">        String floatText= Float.toString(value);</span><br><span class="line">        <span class="comment">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class="line">        <span class="keyword">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; floatText.endsWith(<span class="string">".0"</span>)) &#123;</span><br><span class="line">            floatText = floatText.substring(<span class="number">0</span>, floatText.length() - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        write(floatText);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 如果开启序列化WriteClassName特性，输出float类型 */</span></span><br><span class="line">        <span class="keyword">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class="line">            write(<span class="string">'F'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化浮点类型的基本思路是先转换为字符串，然后在输出到输出流中。</p><h3 id="序列化枚举类型"><a href="#序列化枚举类型" class="headerlink" title="序列化枚举类型"></a>序列化枚举类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeEnum</span><span class="params">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果枚举value为空，调用writeNull输出 */</span></span><br><span class="line">        writeNull();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String strVal = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/** 如果开启序列化输出枚举名字作为属性值 */</span></span><br><span class="line">    <span class="keyword">if</span> (writeEnumUsingName &amp;&amp; !writeEnumUsingToString) &#123;</span><br><span class="line">        strVal = value.name();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeEnumUsingToString) &#123;</span><br><span class="line">        <span class="comment">/** 采用枚举默认toString方法作为属性值 */</span></span><br><span class="line">        strVal = value.toString();;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strVal != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/** 如果开启引号特性，输出json包含引号的字符串 */</span></span><br><span class="line">        <span class="keyword">char</span> quote = isEnabled(SerializerFeature.UseSingleQuotes) ? <span class="string">'\''</span> : <span class="string">'"'</span>;</span><br><span class="line">        write(quote);</span><br><span class="line">        write(strVal);</span><br><span class="line">        write(quote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 输出枚举所在的索引号 */</span></span><br><span class="line">        writeInt(value.ordinal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化单字符"><a href="#序列化单字符" class="headerlink" title="序列化单字符"></a>序列化单字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newcount = count + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** 如果当前存储空间不够 */</span></span><br><span class="line">    <span class="keyword">if</span> (newcount &gt; buf.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            expandCapacity(newcount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/** 强制流输出并刷新缓冲区 */</span></span><br><span class="line">            flush();</span><br><span class="line">            newcount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 存储单字符到buffer并更新计数 */</span></span><br><span class="line">    buf[count] = (<span class="keyword">char</span>) c;</span><br><span class="line">    count = newcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化Null"><a href="#序列化Null" class="headerlink" title="序列化Null"></a>序列化Null</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 调用输出字符串null */</span></span><br><span class="line">    write(<span class="string">"null"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化Boolean"><a href="#序列化Boolean" class="headerlink" title="序列化Boolean"></a>序列化Boolean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="comment">/** 输出true字符串 */</span></span><br><span class="line">        write(<span class="string">"true"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/** 输出false字符串 */</span></span><br><span class="line">        write(<span class="string">"false"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Fastjson源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fastjson源码解析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>源码编译openjdk8</title>
      <link href="/2018/09/30/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91openjdk8/"/>
      <url>/2018/09/30/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91openjdk8/</url>
      
        <content type="html"><![CDATA[<h2 id="macOS-High-Sierra-编译openjdk-8"><a href="#macOS-High-Sierra-编译openjdk-8" class="headerlink" title="macOS High Sierra 编译openjdk 8"></a>macOS High Sierra 编译openjdk 8</h2><p>本次编译使用的系统是 <code>macOS High Sierra</code>，版本为 <code>10.13.2</code>。使用的 jdk 是 openjdk 8 。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>openjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用 jdk1.7 作为 Bootstrap JDK 。</p><p>我当前系统已经安装了jdk1.7 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;1.7.0_79&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h4><p>因为代码比较大，国内采用镜像下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/gorden5566/jdk8u.git</span><br><span class="line">cd jdk8u/</span><br><span class="line">git checkout --track origin/fix</span><br><span class="line">sh ./getModules.sh</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>安装freetype</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install freetype</span><br></pre></td></tr></table></figure><p>或者进入官网<a href="https://www.xquartz.org/" target="_blank" rel="noopener">XQuartx</a>下载dmg安装。</p><ul><li>安装xcode</li></ul><p>直接从 <code>App Store</code> 中下载安装 或命令行安装 <code>xcode-select --install</code> </p><ul><li>安装gcc编译器</li></ul><p>不要安装编译器版本高于5的，因为默认启用c++14 导致编译中断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gcc@4.9</span><br></pre></td></tr></table></figure></p><ul><li>链接gcc编译器(4.9版本)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/gcc-4.9 /usr/bin/gcc</span><br><span class="line">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/g++-4.9 /usr/bin/g++</span><br></pre></td></tr></table></figure><p>如果安装gcc版本和我的不一样，需要自行替换。</p><ul><li>添加环境变量(~/.bash_profile)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LFLAGS=&apos;-Xlinker -lstdc++&apos;</span><br></pre></td></tr></table></figure><p>添加执行命令生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>源码修改</li></ul><p>修改openjdk/hotspot/src/share/vm/opto/loopPredicate.cpp 第775行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(rng-&gt;Opcode() == Op_LoadRange || _igvn.type(rng)-&gt;is_int()-&gt;_lo &gt;= 0, &quot;must be&quot;);</span><br></pre></td></tr></table></figure></p><p> 在is_int()后在添加 -&gt;_lo 。</p><p> 修改openjdk/jdk/src/macosx/native/sun/osxapp/ThreadUtilities.m 第一个函数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static inline void attachCurrentThread(void** env);</span><br></pre></td></tr></table></figure><p>函数名前面添加static 关键字。</p><h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>为了方便我直接指定我当前bootstrap jdk1.7的版本，我的~/.bash_profile :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ANT_HOME=/Users/Jason/tools/apache-ant-1.10.1</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</span><br><span class="line"># export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JAVA_HOME&#125;/jre/lib:$&#123;ANT_HOME&#125;/lib</span><br></pre></td></tr></table></figure><h3 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export MACOSX_DEPLOYMENT_TARGET=10.13.2</span><br><span class="line"></span><br><span class="line">bash ./configure --with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=&quot;-Xlint:deprecation -Xlint:unchecked&quot;  --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug</span><br></pre></td></tr></table></figure><p> 其中freetype是前面安装的路径，可以进/usr/local/Cellar目录查看自己对应版本</p><p> 执行命令后我电脑输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">====================================================</span><br><span class="line">A new configuration has been successfully created in</span><br><span class="line">/Users/Jason/openjdk/jdk8u-default/build/macosx-x86_64-normal-server-slowdebug</span><br><span class="line">using configure arguments &apos;--with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=-Xlint:deprecation -Xlint:unchecked --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug&apos;.</span><br><span class="line"></span><br><span class="line">Configuration summary:</span><br><span class="line">* Debug level:    slowdebug</span><br><span class="line">* JDK variant:    normal</span><br><span class="line">* JVM variants:   server</span><br><span class="line">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class="line"></span><br><span class="line">Tools summary:</span><br><span class="line">* Boot JDK:       java version &quot;1.7.0_79&quot; Java(TM) SE Runtime Environment (build 1.7.0_79-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home)</span><br><span class="line">* C Compiler:      version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class="line">* C++ Compiler:    version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class="line"></span><br><span class="line">Build performance summary:</span><br><span class="line">* Cores to use:   4</span><br><span class="line">* Memory limit:   16384 MB</span><br><span class="line">* ccache status:  installed, but disabled (version older than 3.1.4)</span><br><span class="line"></span><br><span class="line">WARNING: The result of this configuration has overridden an older</span><br><span class="line">configuration. You *should* run &apos;make clean&apos; to make sure you get a</span><br><span class="line">proper build. Failure to do so might result in strange build problems.</span><br></pre></td></tr></table></figure><h3 id="生成jdk8"><a href="#生成jdk8" class="headerlink" title="生成jdk8"></a>生成jdk8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make all COMPILER_WARNINGS_FATAL=false</span><br></pre></td></tr></table></figure><p>生成jdk8成功会输出耗时信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## Finished docs (build time 00:01:59)</span><br><span class="line"></span><br><span class="line">----- Build times -------</span><br><span class="line">Start 2018-01-25 11:08:51</span><br><span class="line">End   2018-01-25 11:22:23</span><br><span class="line">00:00:22 corba</span><br><span class="line">00:00:28 demos</span><br><span class="line">00:01:59 docs</span><br><span class="line">00:05:21 hotspot</span><br><span class="line">00:00:59 images</span><br><span class="line">00:00:14 jaxp</span><br><span class="line">00:00:23 jaxws</span><br><span class="line">00:02:50 jdk</span><br><span class="line">00:00:41 langtools</span><br><span class="line">00:00:12 nashorn</span><br><span class="line">00:13:32 TOTAL</span><br><span class="line">-------------------------</span><br><span class="line">Finished building OpenJDK for target &apos;all&apos;</span><br></pre></td></tr></table></figure><h2 id="使用openjdk8"><a href="#使用openjdk8" class="headerlink" title="使用openjdk8"></a>使用openjdk8</h2><ol><li>生成的jdk Home 在源码目录build ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>直接在intellij idea 或者 eclipse 中指定上面的Home即可。</p><ol start="2"><li>验证jdk版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br><span class="line">$ ./bin/java -version -version</span><br><span class="line">openjdk version &quot;1.8.0-internal-debug&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0-internal-debug-jason_2018_01_25_11_07-b00)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)</span><br></pre></td></tr></table></figure><h3 id="为什么要编译JDK源码"><a href="#为什么要编译JDK源码" class="headerlink" title="为什么要编译JDK源码"></a>为什么要编译JDK源码</h3><ol><li><p>已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码</p></li><li><p>深入jvm细节，自己动手编译为深入学习打基础</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm, openjdk </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
